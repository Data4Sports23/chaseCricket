
package com.data4sports.chasecricket.activities;

//import android.app.AlertDialog;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.util.EventLog;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.data4sports.chasecricket.R;
import com.data4sports.chasecricket.applicationConstants.AppConstants;
import com.data4sports.chasecricket.applicationConstants.utils.FileUtils;
import com.data4sports.chasecricket.models.Batsman;
import com.data4sports.chasecricket.models.Bowler;
import com.data4sports.chasecricket.models.Commentary;
import com.data4sports.chasecricket.models.Constants;
import com.data4sports.chasecricket.models.Events;
import com.data4sports.chasecricket.models.ExtraCard;
import com.data4sports.chasecricket.models.FOW;
import com.data4sports.chasecricket.models.Match;
import com.data4sports.chasecricket.models.MatchNotes;
import com.data4sports.chasecricket.models.MatchOfficials;
import com.data4sports.chasecricket.models.MyApplicationClass;
import com.data4sports.chasecricket.models.Partnership;
import com.data4sports.chasecricket.models.Penalty;
import com.data4sports.chasecricket.models.Player;
import com.data4sports.chasecricket.models.Power;
import com.data4sports.chasecricket.models.SharedPreferenceClass;
import com.data4sports.chasecricket.models.Substitution;
import com.data4sports.chasecricket.models.Undo;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.nio.MappedByteBuffer;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import io.realm.Realm;
import io.realm.RealmConfiguration;
import io.realm.RealmResults;
import io.realm.Sort;
import io.realm.exceptions.RealmException;
import io.realm.exceptions.RealmPrimaryKeyConstraintException;

/**
 * Copied on 24/07/2021
 */

public class UpdatedScoringActivity extends AppCompatActivity
        implements View.OnClickListener {//, CompoundButton.OnCheckedChangeListener {

    TextView tvTeamA, tvTeamB, tvMatchType, tvTotalRuns, tvTotalWicket, tvPlayingOver, tvPlayingInnings,
            tvRemainingRunsText, tvRemainingRuns, tvRemainingOversBallsText, tvRemainingOversBalls,
            tvBattingTeam, tvFieldingTeam, tvPlayer1, tvPlayer2, tvBowler, tvBowler2, player1Selected,
            player2Selected, tvPlayer1Runs, tvPlayer2Runs, tvPlayer1Balls, tvPlayer2Balls, tvdiv,
            tvBowlerOver, tvBowlerMO, tvBowlerRuns, tvBowlerWicket, tvBowlerOver2, tvBowlerMO2,
            tvBowlerRuns2, tvBowlerWicket2, tvCurrentOver, tvCommentry, tv_outType, tv_outBatsman,
            tv_fielder, tv_extraType, tv_com, tvExtrasType, tvExtrasCom, tvServerSync,
    /*tv_extra_penalty, tv_out_penalty,*/ tv_bo_head, tv_bmo_head,match_id;

    Button btnUndo, btnSwap, btnScore, btnOut, btnExtras, btnHash, btnCom, btn1, btn2, btn3, btn4,
            btn6, btn0, btnWagonWheel, btnInterval, btnChangeBatsman, btnChangeBowler,
            btn_out_Type,btn_out_batsman, btn_out_fielder, btn_out_next, btn_out_extra_type,
            btn_out_com, /*btn_out_penalty,*/ btn_out_extra, btn_extra_type, btn_extra_com,
            btn_extra_next/*, btn_extra_penalty*/;

    EditText et_out_run, et_runsOffBat_out, et_extra_run_out,
            et_runsOffBat_extra, et_extra_run_extra;

    LinearLayout ll_batsman, ll_fielder, ll_crossed,  ll_remainings, ll_extras, ll_extra, ll_ballcount,
            ll_extra_runs, /*ll_penalty,*/ ll_extra_extra;

    CheckBox cb_ball_count;

    int lastBallType = -1, ballExtra = 0, out_run = 0, matchid, flag = 0, i_flag = 0, ve_flag = 0,
            outType = -1, ballType = -1, runsOffBat = 0, t = 0, extraType = -1, extra = 0, checkedItem =-1,
            penaltyType = 0, penaltyRunTeam, extraRun = 0, session_click = 0, ttt = 0, bowlerID,
            player1ID, player2ID, preBowlerID = 0, replacedBowlerID = 0, replacedBowlerOver = 0,
            replacedBowlerBall = 0, intervalID = 0, sessionID  = 0, ballsPerOver, currentRuns,
            remainingRuns, remainingBalls, lastRun = 0, leadingRuns = 0, wicket = 0, totalExtras = 0,
            so_inninngs1Runs = 0, so_inninngs2Runs = 0, revisedTarget = 0, player1Runs, player2Runs,
            psRuns = 0, psBalls = 0, psTBalls = 0, p1CR = 0, p1CB = 0, p2CR = 0, p2CB = 0,ps1ID = 0, ps2ID  = 0, psOver = 0,
            player1Balls, player2Balls, totalBalls = 0, builderText, battingOrder = 0, bowlerBalls,
            bowlerMO, bowlerWicket, bowlerDots, bowlerF4s, bowlerS6s, bowlerWide, bowlerNoBall,
            preBowlerBalls, preBowlerRun, preBowlerMO, preBowlerWicket, preBowlerDots, hashScore, ball = 0,
            preInningsRuns = 0, innings1Runs = 0, innings2Runs = 0, innings3Runs = 0, innings4Runs = 0,
            runs, ecByes = 0, ecLB = 0, ecNoball = 0, ecWide = 0, ecPenlaty = 0, penaltyTeam = 0,
            player1Dots = 0, player1F4s = 0, player1S6s = 0, player2Dots = 0, player2F4s = 0,
            player2S6s = 0, bowlerOver = 0, preBowlerOver = 0, fieldingTeamNo, lastPreBowlerID = 0,
            battingTeamNo, player_count = 0, subst = 0, bwRun = 0, mo = 0, undoID = 0, player_in_id = 0,
            noballRun = 0, wideRun = 0, penaltyRun = 0, eventID = 0, currentInnings = 0, player_out_id = 0,
            totalInnings= 0, nonStrikerDots, nonStrikerF4s, nonStrikerS6s, penaltyBallCount = 0,
            strID, nstrID, strikerRuns, strikerBalls, strikerDots, strikerF4s, strikerS6s, nonStrikerRuns,
            nonStrikerBalls, stroke_direction = -1, lastEventID, uinngs, uptype, urun, ubtype,upt, uetype,
            uerun, uout = -1, upteam, team = 0, sout_id = 0, sin_id = 0, undoLastEventID = 0,
            temp_team = 0, subID = 0, pp_id = 0, sub_new_bowler_id = 0, dismissedPlayrID = 0,
            lastBowler = 0, count = 0, undo_count = 0, disPID = 0, lunch_flag = 0, tea_flag = 0,
            dinner_flag = 0, strBO = 0, nstrBO = 0, disNewBatsmanBattingOrder = 0,gameid;

    boolean forceSwap = false, bye = false, lb = false, noBall = false, wide = false, byeNB = false,
            resetBowler = false, lbNB = false, runsOffBatNB = false, boundaryNB = false, efo = false,
            endOfInnings = false, crossed = false, noneNB = false, undo_balltype_7 = false,
            interval = false, session = false, firstbowler = false, multi = false, newFlag = false,
            maiden = false, boundary = false, out = false, extras = false, confirm_extras = false,
            strikerPlaying = true,
            concussion = false,strikerOut = false, strike = false, wheel = false, endOfOver = false,
            penalty = false, ballCount = false, UNDO_LIMIT = false, freeHit = false, inningsNotStarted = false,
            RUN_ONCE = false, score = false, allOUT = false, retired = false, SET_OVER = false,
            SUPER_OVER = false, batting = false, fielding = false, playerSelected = false, endOfMatch = false,
            continueBatting = false, initialize = false, new_bowler = false, eventSync = false,
            just_started = false, single = false,  first_batsman = false, endOfDay = false, inning_started = false,
            declared = false, checkFreeHit = false, substitute, followon = false, newPartnership = false,
            lastOut = false, new_innings = false, undo = false, pre_out = false, substitution = false,
            bowball  = false, batsball = false, power = false, endOver = false, other = false,
            pre_interval = false, callBowlerAlert = false, out_ball_not_count = false, outextras = true,
            lastWicket = false, wk_flag = false, force_end_over = false, UNDO = false;

    ExtraCard extraCard;

    PopupWindow popupOUT, popupExtra;

    ArrayList<String> intervalList, sessionList, fieldersList;

    static String bats = "", fielderPlayer = "", dismissedPlayer =  "", teamName, teamAName, teamBName,
            fielderPlayerID = null;

    SharedPreferences sharedPreferences;
    SharedPreferences.Editor editor;

    private ProgressDialog progress;

    String matchID, teamA, teamB, battingTeam, fieldingTeam, player1, player2, bowler, preBowler = null,
            token, matchtype, innings, tossWinner, decision, ubowler, replacedBowler = null,
            status = null, oType = "", eType = "", commentary, newBatsman, str = "", dso = "",
            modified = "", udisplay = "", text = "", string = "", tem = "", striker, nonStriker,
            replacedPlayer, message = "", sessionType = null, wicketkeeper = null,
            wheelRegion = null, endMessage = "", fei_com = "";

    float currentOver, remainingOver, tco, tbo, tpbo, tro, reduced_overs, totalOver, serverSync;

    Realm realm;

    ImageButton btn_out_back, btn_extra_back;

    final String[] fielders = new String[20];

    ArrayList<Integer> dismissedList, retiredList;

    LinearLayout linearLayout;

    JSONArray jsonEventArray, tempArray, jsonUndoArray;

    AlertDialog.Builder substitutionBuilder, matchOverBuilder, teamBuilder, comBuilder,
            penaltyBalllCountDialog, penaltyDialog, boundryDialog, noballBuilder, extraTypeBuilder,
            outComBuilder, outExtraTypeBuilder, fielderBuilder, selectDismissedBuilder, outtypeBuilder,
            replaceBatsmanBuilder, boundaryAlert, addRunsBuilder, declarationBuilder, bowlerBuilder,
            batsmanBuilder;

    AlertDialog matchTieAlert, allOutAlert, powerPlayDialog, forceEndInningsAlert, forceEndOverAlert,
            retiredAlert, confirmAlert, outOfPlayerAlert, bowlerAlert, allottedInningsAlert,
            endOfInningsAlert, overCompleteAlert, matchOverAlert, swapAlert;

    String[] fielderss;

    boolean midScore = false;

    boolean[] checkedFielders;

    private boolean FORFEIT = false, CONCEDE = false, limited_over = false,
            rain_rule = false, remaining_absent = false, fei_others = false, target_achieved = false;

    public static boolean HUNDRED = false;

    RadioButton rb_crossed, rb_not_crossed;

    int wk_id = 0, wk_position = 0, keeper_position = 0, pre_wk_id = 0,  pre_wk_position = 0,
            forfeit_innings = 0, forfeit_team = 0, conceded_team = 0, forceEndingType = 0,
            newBatsID = 0, max_opb = 0, b_over = 0, b_ball = 0, max_bpb = 0, bt_balls = 0,
            rbt_balls = 0, pbt_balls = 0, reduced_balls, undo_last_event_id = 0, bCount = 0,
            playerA = 0, playerB = 0;

    RealmConfiguration config;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.activity_updated_scoring);

        Realm.init(this);
        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
        linearLayout = findViewById(R.id.linearLayoutScore);


        //testDb();



//        getActionBar().setDisplayHomeAsUpEnabled(true);
        /*getActionBar().setCustomView();*//*

        getSupportActionBar().setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
        getSupportActionBar().setDisplayShowCustomEnabled(true);
        getSupportActionBar().setCustomView(R.layout.custom_action_bar_layout);
        View view =getSupportActionBar().getCustomView();

        back = (ImageButton)view.findViewById(R.id.action_bar_back);

        back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                *//*finish();*//*
                Log.e("scoring", "oncreate, back button pressd");
            }
        });

       /* ImageButton imageButton2= (ImageButton)view.findViewById(R.id.action_bar_forward);

        imageButton2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Toast.makeText(getApplicationContext(),"Forward Button is clicked",Toast.LENGTH_LONG).show();
            }
        });*/

        assignViews();


        Log.e("SCoring", "oncreate, SET_OVER : "+SET_OVER);
        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        midScore = sharedPreferences.getBoolean("midscoreTest", false);
        Log.d("TAG", "onCreate: Midscore " + midScore);
//        if (midScore){
//            databaseValue(realm);
//        }else {
//            getFromSP();
//        }

        if (midScore){
            getJsonInFileUpload();
        }else {
            getFromSP();
            if (!RUN_ONCE) {

                Log.e("SCoring", "oncreate, initializeVariables 1");
                initializeVariables();

                if (SET_OVER && (runs == 0)){// || (runs == 0)){

                    Log.e("SCoring", "oncreate, SET_OVER : "+SET_OVER);
                    setOver(537);                   // for setting the over after displaying Wagon wheel
                }

            }
        }

        //getSharedPreferenceValue();


        runOnce();
        saveToSP();


        btnUndo.setOnClickListener(this);
        btnSwap.setOnClickListener(this);
        btnScore.setOnClickListener(this);

        btnOut.setOnClickListener(this);
        btnExtras.setOnClickListener(this);
        btnHash.setOnClickListener(this);
        btnCom.setOnClickListener(this);

        btn1.setOnClickListener(this);
        btn2.setOnClickListener(this);
        btn3.setOnClickListener(this);
        btn4.setOnClickListener(this);
        btn6.setOnClickListener(this);
        btn0.setOnClickListener(this);

        btnWagonWheel.setOnClickListener(this);
        btnInterval.setOnClickListener(this);
        btnChangeBatsman.setOnClickListener(this);
        btnChangeBowler.setOnClickListener(this);
    }

    private void testDb() {



        Realm realm1 = null;
        RealmConfiguration realmConfiguration = new  RealmConfiguration.Builder()
                .name("1037916.realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm1 = Realm.getInstance(realmConfiguration);
        Realm.setDefaultConfiguration(realmConfiguration);
        Realm finalRealm = realm1;
        realm1.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
                RealmResults<Events> events = finalRealm.where(Events.class).
                                equalTo("matchid", 3).findAll();
                        Log.d("Scoring", "initializeVariables, lastEvent : " + events.size());
            }
        });

//        Realm realm = null;
//        try {
//            config = new RealmConfiguration.Builder()
//                    .name("1037916" + ".realm")
//                    .deleteRealmIfMigrationNeeded()
//                    .build();
//            realm = Realm.getInstance(config);
//
//            Realm finalRealm = realm;
//            realm.executeTransaction(new Realm.Transaction() {
//                @Override
//                public void execute(Realm bgRealm) {
//
//                    try {
//
////
//                        RealmResults<Events> events = finalRealm.where(Events.class).
//                                equalTo("matchid", 3).findAll();
//                        Log.d("Scoring", "initializeVariables, lastEvent : " + events.size());
//
//                    } catch (RealmPrimaryKeyConstraintException e) {
//                        Toast.makeText(getApplicationContext(),
//                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
//                    }
//                }
//            });
//        }
//
//        catch (RealmException e) {
//            Log.d("test", "Exception : " + e);
//        }
//
//        finally {
//            if (realm != null) {
//                realm.close();
//            }
//        }
    }


    public void databaseValue(Realm realm) {
        Log.d("TAG", "databaseValue: Invoke");


        Integer match_id = 0;
        String match_ID = "";
        String teamA = "";
        String teamB = "";
        String sp_innings = "";
        String battingTeam = "";
        String fieldingTeam = "";
        int battingTeamNo = 0;
        int fieldingTeamNo = 0;

        boolean justStarted = false;
        String status = "";
        String matchType = "";
        int ballsPerOver = 0;
        int noBallRun = 0;
        int penaltyRun = 0;
        int wideRun = 0;

        String wicketKeeper = "";
        int wk_id = 0;
        int keeper_position = 0;
        RealmResults<Match> match = realm.where(Match.class).
                equalTo("d4s_matchid", AppConstants.GAME_ID).findAll();
        Log.d("TAG", "databaseValue: " + match.size());
        if (match.size() > 0) {
            match_id = match.get(match.size() - 1).getMatchid();
            match_ID = match.get(match.size() - 1).getMatchID();
            teamA = match.get(match.size() - 1).getTeamA();
            teamB = match.get(match.size() - 1).getTeamB();
            sp_innings = match.get(match.size() - 1).getInnings();

            justStarted = match.get(match.size() - 1).isJustStarted();
            status = match.get(match.size() - 1).getStatus();
            matchType = match.get(match.size() - 1).getMatchType();
            ballsPerOver = match.get(match.size() - 1).getBalls();
            noBallRun = match.get(match.size() - 1).getNoballrun();
            penaltyRun = match.get(match.size() - 1).getPenaltyrun();
            wideRun = match.get(match.size() - 1).getWiderun();


            if (match.get(match.size() - 1).getToss_winner().equals(teamA)) {
                if (match.get(match.size() - 1).getDecision().equals("Batting")) {
                    battingTeam = teamA;
                    fieldingTeam = teamB;
                    battingTeamNo = 2;
                    fieldingTeamNo = 1;
                } else {
                    battingTeam = teamB;
                    fieldingTeam = teamA;
                    fieldingTeamNo = 2;
                    battingTeamNo = 1;
                }
            } else {
                if (match.get(match.size() - 1).getDecision().equals("Batting")) {
                    battingTeam = teamB;
                    fieldingTeam = teamA;
                    fieldingTeamNo = 1;
                    battingTeamNo = 2;
                } else {
                    battingTeam = teamA;
                    fieldingTeam = teamB;
                    battingTeamNo = 1;
                    fieldingTeamNo = 2;
                }
            }
        }
        // Log.d("TAG", "databaseValue: Match ID " + match.get(match.size() - 1).getMatchid());



        // Player List
        int player1ID = 0;
        int player2ID = 0;
        int bowlerId = 0;

        int currentInnings = 0;

        RealmResults<Events> event_results = realm.where(Events.class).equalTo("matchid", match_id).findAll();
        Log.d("TAG", "databaseValue: Events size " + event_results);

        if (event_results.size() > 0) {
            Log.d("TAG", "databaseValue: " + event_results.get(event_results.size() - 1).getStrikerID() + " Non Striker " + event_results.get(event_results.size() - 1).getNonStrikerID());
            player1ID = event_results.get(event_results.size() - 1).getStrikerID();
            player2ID = event_results.get(event_results.size() - 1).getNonStrikerID();
            bowlerId = event_results.get(event_results.size() - 1).getBowlerID();
            currentInnings = event_results.get(event_results.size() - 1).getInnings();

        }

        // Player Name
        String player1 = "";
        String player2 = "";
        String bowlerName = "";
        Player playerOne = realm.where(Player.class)
                .equalTo("gameid", AppConstants.GAME_ID)
                .equalTo("matchid", match_id)
                .equalTo("playerID", player1ID).findFirst();
        Log.d("TAG", "databaseValue: Player " + playerOne);
        if (playerOne != null) {
            player1 = playerOne.getPlayerName();
        }

        Player playerTwo = realm.where(Player.class)
                .equalTo("gameid", AppConstants.GAME_ID)
                .equalTo("matchid", match_id)
                .equalTo("playerID", player2ID).findFirst();
        if (playerTwo != null) {
            player2 = playerTwo.getPlayerName();
        }

        Player bowlerNameDB = realm.where(Player.class)
                .equalTo("gameid", AppConstants.GAME_ID)
                .equalTo("matchid", match_id)
                .equalTo("playerID", bowlerId).findFirst();
        if (bowlerNameDB != null) {
            bowlerName = bowlerNameDB.getPlayerName();
        }


        // total Innings
        int totalInnings = 0;
        totalInnings = match.get(match.size() - 1).getTotalInnings();

        // Player Count
        int player_count = 2;
        boolean hundred = false;
        boolean HUNDRED = match.get(match.size() - 1).isHundred();

        String striker = "";
        String nonStriker = "";
        int strID = 0;
        int nstrID = 0;
        int ps1ID = 0;
        int ps2ID = 0;

        striker = player1;
        nonStriker = player2;
        strID = player1ID;
        nstrID = player2ID;
        ps1ID = player1ID;
        ps2ID = player2ID;

        // Just Started



        //currentInnings = sharedPreferences.getInt("sp_current_innings", 0);

        Log.d("TAG", "getFromSP: First set preference call Testttt" + "Match id " + match_id + " sp_match_id " + match_ID +
                " Team A " + teamA + " Team B " + teamB + " sp innings " + sp_innings + " Batting Team " + battingTeam +
                " Fielding Team " + fieldingTeam + " Batting Team Number " + battingTeam + " Fielding Team Number " + fieldingTeam +
                " Player 1 " + player1 + " Player 2 " + player2 + " Player 1 ID " + player1ID + " Player 2 ID " + player2ID +
                " Total Innings " + totalInnings + " Player Count " + player_count + " Hundreds " + hundred + " Striker " + striker +
                " Non Stricker " + nonStriker + " STR_ID " + strID + " NSTR_ID " + nstrID + " PS1ID " + ps1ID +
                " PS2ID " + ps2ID + " Bowler " + bowlerName + " Bowler ID " + bowlerId + " Just Started " + justStarted +
                " Status " + status + " Match Type " + matchType + " Balls per Over " + ballsPerOver + " Current Innings " + currentInnings +
                " No Ball Run " + noBallRun + " Wide Run " + wideRun + " Penalty Run " + penaltyRun);


//        Player wk_player = realm.where(Player.class).
//                equalTo("matchid", matchid).
//                equalTo("team", fieldingTeamNo).
//                equalTo("new_wk", true).findFirst();

//        wicketkeeper = wk_player.getPlayerName();
//        wk_id = wk_player.getPlayerID();
//        keeper_position = wk_player.getWicketkeeping_position();


        //battingOrder = sharedPreferences.getInt("sp_batting_order", 0);


        //events.get(events.size() - 1).getStrikerID();
        //Log.d("TAG", "databaseValue: " +   events.get(events.size() - 1).getStrikerID()+ " Non Striker " +   events.get(events.size() - 1).getNonStrikerID());

    }

    @Override
    public void onClick(View v) {
        switch(v.getId()) {
            case R.id.btn_undo:
                Log.d("undo", "button pressed");
                Events events = realm.where(Events.class).
                        equalTo("matchid", matchid).
                        equalTo("innings", currentInnings).findAll().last();

                Log.d("undo", "events : " + events);
                if ((currentOver < 0.0f) || (events == null)) {
                    btnUndo.setEnabled(false);
                    initializeBowler();
                    syncBowler();
                }
                else {
                    btnUndo.setEnabled(true);
                    undo();
                }
                if (isNetworkAvailable()){
                    postJsonInFileUpload();
                    FileUtils.fileUtils(this);
                }

                break;

            case R.id.btn_swap:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);
                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "swap pressed");
                    // added on 06/05/2020
                    if (undo) {
                        /* Commented on 26/07/2021
                        // updated on 24/07/2021
                        if (HUNDRED)
                            callBallsCompleted();
                        else*/
                        callEndOfOverAlert();
                    }

                }

                else {
                    forceSwap = true;
                    changeStriker(true);
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }

                break;

            case R.id.btn_score:
                displayScoreCard(false, false);
                //FileUtils.fileUtils(this);
                break;

            case R.id.btn_out:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);

                checkUndoLimit();   // Added on 28/04/2021

                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "out pressed");
                    // added on 06/05/2020
                    if (undo) {
                        /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                        if (HUNDRED)
                            callBallsCompleted();
                        else*/
                        callEndOfOverAlert();
                    }
                }

                else {
                    /*Commented on 31/08/2021
                    // Added on 30/08/2021
                    if (checkLastBallType() == 4 || checkLastBallType() == 5)// || checkLastBallType() == 7)
                        undoErrorDisplay(ubtype, "Please select new bowler");
                    else if (checkLastBallType() == 3 || checkLastBallType() == 111)
                        undoErrorDisplay(ubtype, "Please select new batsman");
                    else*/ {
                        out = true;
                        playerOUT();
                    }
                }

                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.btn_extras:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);

                checkUndoLimit();   // Added on 28/04/2021

                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "extras pressed");
                    // added on 06/05/2020
                    if (undo) {
                        /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                        if (HUNDRED)
                            callBallsCompleted();
                        else*/
                        callEndOfOverAlert();
                    }
                }

                else {
                    /* Commented on 31/08/2021
                    // Added on 30/08/2021
                    if (checkLastBallType() == 4 || checkLastBallType() == 5)// || checkLastBallType() == 7)
                        undoErrorDisplay(ubtype, "Please select new bowler");
                    else if (checkLastBallType() == 3 || checkLastBallType() == 111)
                        undoErrorDisplay(ubtype, "Please select new batsman");
                    else*/ {
                        extras = true;
                        setExtra();
                    }
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.btn_hash:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);

                checkUndoLimit();   // Added on 28/04/2021

                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "hash pressed");
                    // added on 06/05/2020
                    if (undo) {
                        /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                        if (HUNDRED)
                            callBallsCompleted();
                        else*/
                        callEndOfOverAlert();
                    }
                }

                else {
                   /*Commented on 31/08/2021
                    // Added on 30/08/2021
                    if (checkLastBallType() == 4 || checkLastBallType() == 5)// || checkLastBallType() == 7)
                        undoErrorDisplay(ubtype, "Please select new bowler");
                    else if (checkLastBallType() == 3 || checkLastBallType() == 111)
                        undoErrorDisplay(ubtype, "Please select new batsman");
                    else*/ {
                        addRuns();
                    }
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.btn_com:
//                setCommentry();   Commented on 15/12/2021
                getCommentaryType();
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.btn_one:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);

                checkUndoLimit();   // Added on 28/04/2021

                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "one pressed");
                    // added on 06/05/2020
                    if (undo) {
                        /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                        if (HUNDRED)
                            callBallsCompleted();
                        else*/
                        callEndOfOverAlert();
                    }
                }

                else {
                    Log.d("ball", "1 : " + ball + ", ballsPerOver : " + ballsPerOver);
                    /* Commented on 31/08/2021
                    // Added on 30/08/2021
                    if (checkLastBallType() == 4 || checkLastBallType() == 5)// || checkLastBallType() == 7)
                        undoErrorDisplay(ubtype, "Please select new bowler");
                    else if (checkLastBallType() == 3 || checkLastBallType() == 111)
                        undoErrorDisplay(ubtype, "Please select new batsman");
                    else*/
                    displayOver(1);
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.btn_two:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);

                checkUndoLimit();   // Added on 28/04/2021
                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "two pressed");
                    // added on 06/05/2020
                    if (undo) {
                        /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                        if (HUNDRED)
                            callBallsCompleted();
                        else*/
                        callEndOfOverAlert();
                    }
                }

                else {
                   /* Commented on 31/08/2021
                   // Added on 30/08/2021
                    if (checkLastBallType() == 4 || checkLastBallType() == 5)// || checkLastBallType() == 7)
                        undoErrorDisplay(ubtype, "Please select new bowler");
                    else if (checkLastBallType() == 3 || checkLastBallType() == 111)
                        undoErrorDisplay(ubtype, "Please select new batsman");
                    else*/
                    displayOver(2);
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.btn_three:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);

                checkUndoLimit();   // Added on 28/04/2021

                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "three pressed");
                    // added on 06/05/2020
                    if (undo) {
                        /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                        if (HUNDRED)
                            callBallsCompleted();
                        else*/
                        callEndOfOverAlert();
                    }
                }

                else {
                    /* Commented on 31/08/2021
                    // Added on 30/08/2021
                    if (checkLastBallType() == 4 || checkLastBallType() == 5)// || checkLastBallType() == 7)
                        undoErrorDisplay(ubtype, "Please select new bowler");
                    else if (checkLastBallType() == 3 || checkLastBallType() == 111)
                        undoErrorDisplay(ubtype, "Please select new batsman");
                    else*/
                    displayOver(3);
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.btn_four:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);

                checkUndoLimit();   // Added on 28/04/2021

                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "four pressed");
                    // added on 06/05/2020
                    if (undo) {
                        /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                        if (HUNDRED)
                            callBallsCompleted();
                        else*/
                        callEndOfOverAlert();
                    }
                }

                else {
                    /* Commented on 31/08/2021
                    // Added on 30/08/2021
                    if (checkLastBallType() == 4 || checkLastBallType() == 5)// || checkLastBallType() == 7)
                        undoErrorDisplay(ubtype, "Please select new bowler");
                    else if (checkLastBallType() == 3 || checkLastBallType() == 111)
                        undoErrorDisplay(ubtype, "Please select new batsman");
                    else*/
                    displayOver(4);
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.btn_six:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);

                checkUndoLimit();   // Added on 28/04/2021

                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "six pressed");
                    // added on 06/05/2020
                    if (undo) {
                        /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                        if (HUNDRED)
                            callBallsCompleted();
                        else*/
                        callEndOfOverAlert();
                    }
                }

                else {
                    /* Commented on 31/08/2021
                    // Added on 30/08/2021
                    if (checkLastBallType() == 4 || checkLastBallType() == 5)// || checkLastBallType() == 7)
                        undoErrorDisplay(ubtype, "Please select new bowler");
                    else if (checkLastBallType() == 3 || checkLastBallType() == 111)
                        undoErrorDisplay(ubtype, "Please select new batsman");
                    else*/
                    displayOver(6);
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.btn_zero:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);

                checkUndoLimit();   // Added on 28/04/2021

                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "zero pressed");
                    // added on 06/05/2020
                    if (undo) {
                        /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                        if (HUNDRED)
                            callBallsCompleted();
                        else*/
                        callEndOfOverAlert();
                    }
                }

                else {
                    /* Commented on 31/08/2021
                    // Added on 30/08/2021
                    if (checkLastBallType() == 4 || checkLastBallType() == 5)// || checkLastBallType() == 7)
                        undoErrorDisplay(ubtype, "Please select new bowler");
                    else if (checkLastBallType() == 3 || checkLastBallType() == 111)
                        undoErrorDisplay(ubtype, "Please select new batsman");
                    else*/
                    displayOver(0);
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.btn_p:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);

                checkUndoLimit();   // Added on 28/04/2021

                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "zero pressed");
                    if (undo) {
                        callEndOfOverAlert();
                    }
                }

                else {
                    setPenalty();
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.btn_wagon_wheel:
                break;

            case R.id.btn_interval:

                Log.d("enable", "interval : " + interval + ", endOfDay : " + endOfDay);
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);
                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "interval pressed");
                    // added on 06/05/2020
                    if (undo) {
                        /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                        if (HUNDRED)
                            callBallsCompleted();
                        else*/
                        callEndOfOverAlert();
                    }
                }

                else {
                    if (interval || endOfDay){
                        if (interval)
                            enableButtons(1);
                        else if (endOfDay)
                            enableButtons(2);
                        else // Added else word in 26/11/2021
                            if (i_flag == 1 || callBowlerAlert) {
                                if (pre_out){
                                    Log.d("interval", "enable 1, pre_out : " + pre_out);
                                }
                                else {
                                    i_flag = 0;
                                    selectBowlerAlertDialog();
                                }
                            }
                    }
                    else
                        setInterval(new Events(), 0);
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;


            case R.id.btn_change_batsman:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);
                if (allOUT || endOfInnings || endOfMatch) {
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "change batsman pressed");
                }

                else {
                    confirmReplace(1);
//                    replaceBatsman(new Events(), false);
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.btn_change_bowler:
                Log.d("scoring", "allOUT : " + allOUT + ", endOfInnings : " + endOfInnings + ", endOfMatch : " + endOfMatch);
                if (allOUT || endOfInnings || endOfMatch) {
//                    alert(); COMMENTED ON 08/03/2021
                    displayAlert(endMessage, 1);
                }

                else if (endOver) {
                    Log.d("endOver", "change bowler pressed");
                }

                else {
                    confirmReplace(2);
//                    changeBowler(new Events(),0, 1);
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            case R.id.rb_not_crossed:
                crossed = false;
                Log.d("scoring", "onClick, rb_not_crossed crossed : "+crossed);
                break;

            case R.id.rb_crossed:
                crossed = true;
                Log.d("scoring", "onClick, rb_crossed crossed : "+crossed);
                if (outType == 2)
                    btn_out_batsman.setVisibility(View.VISIBLE);

                else if (outType == 3 || outType == 8) {
                    ll_extra.setVisibility(View.VISIBLE);
                }
                if (isNetworkAvailable()){
                    FileUtils.fileUtils(this);
                    postJsonInFileUpload();
                }
                break;

            default:
                break;
        }
    }



    private void runOnce() {
        Log.e("Scoring", "inside run once,  RUN_ONCE : "+RUN_ONCE);
        Log.e("Scoring", "runonce,  SET_OVER : "+SET_OVER);
        Log.e("Scoring", "runonce,  status : "+status);



        if (RUN_ONCE) {
            RUN_ONCE = false;
            Log.d("Scoring", "inside run once");

            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);

            dismissedList = new ArrayList<Integer>();
            retiredList = new ArrayList<Integer>();
            extraCard = new ExtraCard();

            jsonEventArray = new JSONArray();
            tempArray = new JSONArray();
            jsonUndoArray = new JSONArray();

            inning_started = true;

            initializeVariables();
            Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();

            newBowler(bowlerID, 0);
            syncBatsmann(strID, 0, null, false, -1, false, false, false);
            syncBatsmann(nstrID, 0, null, false, -1, false, false, false);

            if (SUPER_OVER){

               /* Commented on 23/11/2021
                newBowler(bowlerID, 0);
                syncBatsmann(strID, 0, null, false, -1, false, false, false);
                syncBatsmann(nstrID, 0, null, false, -1, false, false, false); */
                if (currentInnings == 99)
                    ll_remainings.setVisibility(View.GONE);

            }

            else {

                Log.d("Test", " Bowler : " + bowler);

                /* Commented on 23/11/2021
                newBowler(bowlerID, 0);
                syncBatsmann(strID, 0, null, false, -1, false, false, false);
                syncBatsmann(nstrID, 0, null, false, -1, false, false, false); */
//
                Log.d("Scoring", "runOnce, bowler  : " + bowler);
                Log.d("Scoring", "runOnce, next bowler  : " + preBowler);

                tossWinner = match.getToss_winner();
                decision = match.getDecision();

                if (currentInnings == 1 || currentInnings == 99)
                    ll_remainings.setVisibility(View.GONE);

                else
                    ll_remainings.setVisibility(View.VISIBLE);

                Log.e("Scoring", "runonce, remainingBalls : "+remainingBalls);
                Log.e("Scoring", "runonce, totalInnings : "+totalInnings);

                // commented on 04/05/2020
                /*if (currentInnings == 1) {
                    sessionType = "MS";
                    sessionID = 6;
                    setMatchStatus(sessionType, sessionID);
                }
                else*/
                //commented on 05/06/2020
//                    setMatchStatus(match.getStatus(), match.getStatusId());

                addsToBatsman(battingTeamNo, currentInnings);
            }
            updateMatch(matchid, false);

            Log.d("power", "runOnce, new_innings : " + new_innings);
            Log.d("power", "runOnce, matchtype : " + matchtype);
            Log.d("power", "runOnce, innings : " + innings);
            if (/*!HUNDRED && */new_innings && !(innings.matches("multi"))) {   // updated on 26/07/2021
                    /*(!(matchtype.matches("Test")) ||
                         !((matchtype.matches("Custom")) && (innings.matches("multi"))))) {*/

                // Moved to downwards (28/07/2021)
                setNewPowerPlay();
               /* AlertDialog ppDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
                ppDialog.setIcon(R.drawable.ball);
                ppDialog.setCancelable(false);
                ppDialog.setTitle("Do you want to enter PowerPlay details?");
                ppDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Ok",
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                                setPowerPlay();
                            }
                        });
                ppDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "Cancel",
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                            }
                        });

                ppDialog.show();*/

            }

        }


    }








    void assignViews(){

        tvTeamA = findViewById(R.id.txt_teamA_scoring);
        tvTeamB = findViewById(R.id.txt_teamB_scoring);
        tvMatchType = findViewById(R.id.txt_matchType_scoring);
        match_id = findViewById(R.id.match_id);

        ll_remainings = findViewById(R.id.layout_remainings);

        tvTotalRuns = findViewById(R.id.txt_total_runs);
        tvTotalWicket = findViewById(R.id.txt_total_wicket);
        tvdiv = findViewById(R.id.backslash);
        tvPlayingOver = findViewById(R.id.txt_playing_overs);
        tvPlayingInnings = findViewById(R.id.txt_total_innings);
        tvRemainingRunsText = findViewById(R.id.txt_remaining_runs1);
        tvRemainingRuns = findViewById(R.id.txt_remaining_runs);
        tvRemainingOversBallsText = findViewById(R.id.txt_remaining_over_balls1);
        tvRemainingOversBalls = findViewById(R.id.txt_remaining_over_balls2);

        tvBattingTeam = findViewById(R.id.txt_batting_team_score);
        tvFieldingTeam = findViewById(R.id.txt_bowling_team_score);

        tvPlayer1 = findViewById(R.id.txt_player1);
        tvPlayer2 = findViewById(R.id.txt_player2);
        player1Selected = findViewById(R.id.player1_selected);
        player2Selected = findViewById(R.id.player2_selected);

        tvPlayer1Runs = findViewById(R.id.txt_player1_runs);
        tvPlayer2Runs = findViewById(R.id.txt_player2_runs);
        tvPlayer1Balls = findViewById(R.id.txt_player1_faced_balls);
        tvPlayer2Balls = findViewById(R.id.txt_player2_faced_balls);

        tvBowler = findViewById(R.id.txt_bowler);
        tvBowlerOver = findViewById(R.id.txt_bowler_overs);
        tvBowlerMO = findViewById(R.id.txt_bowler_MO);
        tvBowlerRuns = findViewById(R.id.txt_bowler_runs);
        tvBowlerWicket = findViewById(R.id.txt_bowler_wicket);

        tvBowler2 = findViewById(R.id.txt_bowler2);
        tvBowlerOver2 = findViewById(R.id.txt_bowler_overs2);
        tvBowlerMO2 = findViewById(R.id.txt_bowler_MO2);
        tvBowlerRuns2 = findViewById(R.id.txt_bowler_runs2);
        tvBowlerWicket2 = findViewById(R.id.txt_bowler_wicket2);

        tvCurrentOver = findViewById(R.id.txt_current_over);
        tvCommentry = findViewById(R.id.txt_com_display);

        btnUndo = findViewById(R.id.btn_undo);
        btnSwap = findViewById(R.id.btn_swap);
        btnScore = findViewById(R.id.btn_score);

        btnOut = findViewById(R.id.btn_out);
        btnExtras = findViewById(R.id.btn_extras);
        btnHash = findViewById(R.id.btn_hash);
        btnCom = findViewById(R.id.btn_com);

        btn1 = findViewById(R.id.btn_one);
        btn2 = findViewById(R.id.btn_two);
        btn3 = findViewById(R.id.btn_three);
        btn4 = findViewById(R.id.btn_four);
        btn6 = findViewById(R.id.btn_six);
        btn0 = findViewById(R.id.btn_zero);

        btnWagonWheel = findViewById(R.id.btn_wagon_wheel);
        btnInterval = findViewById(R.id.btn_interval);
//        btnSession = findViewById(R.id.btn_session);
        btnChangeBatsman = findViewById(R.id.btn_change_batsman);
        btnChangeBowler = findViewById(R.id.btn_change_bowler);

        tvServerSync = findViewById(R.id.txt_sync_display);

        // Added on 27/07/2021
        tv_bo_head = findViewById(R.id.tv_us_bo_head);
        tv_bmo_head = findViewById(R.id.tv_us_bmo_head);
    }





    // get the required values from SharedPreferences

    void getFromSP(){


        token = sharedPreferences.getString("user_token", null);
        matchid = sharedPreferences.getInt("sp_match_id", 0);
        matchID = sharedPreferences.getString("sp_match_ID", null);
        Log.v("scoring", " getFromSP, matchid : "+matchid);
        Log.v("scoring", " getFromSP, matchID : "+matchID);
        teamA = sharedPreferences.getString("sp_teamA", null);
        teamB = sharedPreferences.getString("sp_teamB", null);
        innings = sharedPreferences.getString("sp_innings", null);
        battingTeam = sharedPreferences.getString("sp_batting_team", null);
        fieldingTeam = sharedPreferences.getString("sp_fielding_team", null);
        battingTeamNo = sharedPreferences.getInt("sp_batting_team_no", 0);
        fieldingTeamNo = sharedPreferences.getInt("sp_fielding_team_no", 0);
        player1 = sharedPreferences.getString("sp_striker", null);
        player2 = sharedPreferences.getString("sp_non_striker", null);
        player1ID = sharedPreferences.getInt("sp_striker_id", 0);
        player2ID = sharedPreferences.getInt("sp_non_striker_id", 0);
        totalInnings = sharedPreferences.getInt("sp_total_innings", 0);
        player_count = sharedPreferences.getInt("sp_player_count", 0);
        HUNDRED = sharedPreferences.getBoolean("sp_hundred", false);
        Log.v("scoring", " getFromSP, HUNDRED = " + HUNDRED);
        striker = player1;
        nonStriker = player2;
        strID = player1ID;
        nstrID = player2ID;
        ps1ID = player1ID;
        ps2ID = player2ID;
        Log.v("scoring", " getFromSP, player1ID : "+player1ID);
        Log.v("scoring", " getFromSP, player2ID : "+player2ID);
        Log.v("scoring", " getFromSP, ps1ID : "+ps1ID);
        Log.v("scoring", " getFromSP, ps2ID : "+ps2ID);
        bowler = sharedPreferences.getString("sp_bowler", null);
//        nextBowler = sharedPreferences.getString("sp_next_bowler", null);
        bowlerID = sharedPreferences.getInt("sp_bowler_id", 0);
        Log.d("BOWLER", "getFromSP, bowlerID : " + bowlerID);
//        nextBowlerID = sharedPreferences.getInt("sp_next_bowler_id", 0);
//        SUPER_OVER = sharedPreferences.getBoolean("SUPER_OVER", false);
//        wagon_wheel = sharedPreferences.getBoolean("sp_wagon_wheel", false);
        just_started = sharedPreferences.getBoolean("sp_just_started", false);
        status = sharedPreferences.getString("sp_status", null);

//        setInnings();



        Log.v("scoring", " getFromSP, innings : "+innings);

        matchtype = sharedPreferences.getString("sp_match_type", null);
//        totalOver = sharedPreferences.getInt("sp_over", 0);
        ballsPerOver = sharedPreferences.getInt("sp_balls" , 0);
        currentInnings = sharedPreferences.getInt("sp_current_innings", 0);
        noballRun = sharedPreferences.getInt("sp_noball_value", 0);
        wideRun = sharedPreferences.getInt("sp_wide_value", 0);
        penaltyRun = sharedPreferences.getInt("sp_penalty_value", 0);
        Log.d("Scoring", "getFromSP(), noballRun : "+noballRun);
        Log.d("Scoring", "getFromSP(), wideRun : "+wideRun);
        Log.d("Scoring", "getFromSP(), penaltyRun : "+penaltyRun);
        /* Rewritted on bottom
        if (fieldingTeamNo == 1) {
            wicketkeeper = sharedPreferences.getString("sp_wkA", null);
            wk_id = sharedPreferences.getInt("sp_wkA_id", 0);
        }
        else if (fieldingTeamNo == 2) {
            wicketkeeper = sharedPreferences.getString("sp_wkB", null);
            wk_id = sharedPreferences.getInt("sp_wkB_id", 0);
        }

        Player player =  realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", fieldingTeamNo).
//                equalTo("retired", false).
//                equalTo("retired_concussion", false).
                equalTo("playerID", wk_id).findFirst();

        Log.d("WK", "getFromSP, matchid = " + matchid);
        Log.d("WK", "getFromSP, fieldingTeamNo = " + fieldingTeamNo);
        Log.d("WK", "getFromSP, wk_id = " + wk_id);
        Log.d("WK", "getFromSP, player = " + player);

        *//*int j = 0;
        RealmResults<Player> results = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", fieldingTeamNo).findAll();
        for (Player p1 : results) {
            ++j;
            Log.d("WK", "getFromSP, p" + j + " = " + p1);
        }*//*

         *//*keeper_position = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", fieldingTeamNo).
                equalTo("retired", false).
                equalTo("retired_concussion", false).
                equalTo("playerID", wk_id).findFirst().getWicketkeeping_position();*//*

        keeper_position = player.getWicketkeeping_position();*/

        // Updating the above code of wicketkeeper
        Player wk_player =  realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", fieldingTeamNo).
                equalTo("new_wk", true).findFirst();

        Log.d("TAG", "getFromSP: " + wk_player);

        wicketkeeper = wk_player.getPlayerName();
        wk_id = wk_player.getPlayerID();
        keeper_position = wk_player.getWicketkeeping_position();
        // === till here




        battingOrder = sharedPreferences.getInt("sp_batting_order", 0);
        Log.d("battingOrder", "" + battingOrder);



        Intent i = getIntent();
//        status = i.getStringExtra("status");
        RUN_ONCE = i.getBooleanExtra("runonce", false);
        initialize = i.getBooleanExtra("initialize", false);
        score = i.getBooleanExtra("score", false);
        inningsNotStarted = i.getBooleanExtra("inningsnotstarted", false);
        SET_OVER = i.getBooleanExtra("SET_OVER", false);
        eventID = i.getIntExtra("eventId", 0);
        firstbowler = i.getBooleanExtra("first_bowler", false);
        first_batsman = i.getBooleanExtra("first_batsman", false);
        interval = i.getBooleanExtra("interval", false);
        session = i.getBooleanExtra("session", false);

        new_innings = i.getBooleanExtra("new_innings", false);

//        just_started = i.getBooleanExtra("just_started", false);

        // for substitution
        concussion = i.getBooleanExtra("concussion", false);
        batting = i.getBooleanExtra("batting", false);
        fielding = i.getBooleanExtra("fielding", false);
        sout_id = i.getIntExtra("sout_id", 0);
        sin_id = i.getIntExtra("sin_id", 0);
        new_bowler = i.getBooleanExtra("new_bowler", false);
        Log.d("new_bowler", " getFromSP from match, new_bowler : "+new_bowler);
        substitution = i.getBooleanExtra("substitution", false);
        subID = i.getIntExtra("subID", 0);
        ballType = i.getIntExtra("ballType", 0);
        pp_id = i.getIntExtra("p_id", 0);

        // new Bowler if substitution
        if (substitution) {
            bowlerID = i.getIntExtra("bowler_id", 0);
            bowler = i.getStringExtra("bowler");
        }

//        wheel = i.getBooleanExtra("wheel", false);
        power = i.getBooleanExtra("power", false);
        efo = i.getBooleanExtra("efo", false);
        wheelRegion = i.getStringExtra("wagon_wheel");
        stroke_direction = i.getIntExtra("stroke_direction", -1);
//        eventID = i.getIntExtra("eventId", 0);


        Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
        Log.v("scoring", " getFromSP from match, matchid : "+matchid);
        Log.v("scoring", " getFromSP from match, matchID : "+matchID);
        Log.d("eventId", " scoring getFromSP from match,  : "+ eventID);
        totalInnings = match.getTotalInnings();
        wheel = match.isWagonwheel();
        limited_over = match.isLimited_overs();
        HUNDRED = match.isHundred();
        playerA = match.getPlayerA();
        playerB = match.getPlayerB();

        Log.d("HUNDRED", " getFromSP from match,  : "+ HUNDRED);
        Log.d("wheel", " scoring getFromSP from match,  : "+ wheel);
        Log.d("wheel", " scoring getFromSP from match, wheelRegion : "+ wheelRegion);
        Log.d("wheel", " scoring getFromSP from match,stroke_direction  : "+ stroke_direction);
//        if (totalInnings == 4 && (currentInnings == 3 || currentInnings == 4))
        followon = match.isFollowon();
        SUPER_OVER = match.isSUPER_OVER();
        if (SUPER_OVER) {   // Added on 06/12/2021
            player_count = sharedPreferences.getInt("sp_player_count", 0);
        }
        else {
            if (battingTeamNo == 1)
                player_count = playerA;
            else if (battingTeamNo == 2)
                player_count = playerB;
        }
        sessionID = match.getStatusId();
        innings = match.getInnings();
        totalOver = match.getOver();
        if (currentInnings > 1){

            innings1Runs = match.getInnings1Runs();
            innings2Runs = match.getInnings2Runs();
            innings3Runs = match.getInnings3Runs();
            innings4Runs = match.getInnings4Runs();

            if (currentInnings == 2 && innings.matches("single")) {

                preInningsRuns = innings1Runs;
            }

            if (SUPER_OVER){

                if (currentInnings == 99)
                    so_inninngs1Runs = match.getSuper_over_innings1runs();
                else if (currentInnings == 100) {
                    so_inninngs1Runs = match.getSuper_over_innings1runs();
                    so_inninngs2Runs = match.getSuper_over_innings2runs();
                }
                Log.d("so_inninngs1Runs", "getFromSP()1 : "+so_inninngs1Runs);
            }
        }


        if (interval)
            disableButtons(-1);

        //sharePrefenceRealmSave();

    }




    void initializeVariables(){
        int dismissedPlayerID = 0;

//        Log.d("Scoring", "inside initializeVariables()");
        ++ttt;
        Log.d("Scoring", "initializeVariables(), ttt : "+ttt);
        Log.d("Scoring", "initializeVariables(), status : "+status);
        Log.d("Scoring", "initializeVariables(), matchid : "+matchid);
        Log.d("Scoring", "initializeVariables(), matchID : "+matchID);
        Log.d("sessionID", "initializeVariables(), sessionID : "+sessionID);
        Log.d("status", "initializeVariables(), status : "+status + "App " + AppConstants.GAME_ID);
//        setPlayerRuns();


//        displayProgress();

        if (status.matches("resume")) {

//            displayProgress();

            dismissedList = new ArrayList<Integer>();
            retiredList = new ArrayList<Integer>();
            jsonEventArray = new JSONArray();
            jsonUndoArray = new JSONArray();

           // Log.d(TAG, "initializeVariables: ");
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            Log.d("TAG", "initializeVariables: Match Id " + matchid);
            realm = Realm.getInstance(config);
            Events events = realm.where(Events.class).
                    equalTo("matchid", matchid).findAll().last();

//            Events events = realm.where(Events.class).
//                    equalTo("matchID", matchID).findFirst();
//            Log.d("Scoring", "initializeVariables, lastEvent : " + events);
//            matchid = events.getMatchid();



            if (events != null) {

                if (events.getBallType() > 0) {

                    Log.d("Scoring", "initializeVariables, wheel : " + wheel);

                    if (wheel) {
                        Log.d("wheel", "initializeVariables, wheel : " + wheel);
                        Log.d("wheel", "initializeVariables, eventID : " + eventID);
                        Log.d("wheel", "initializeVariables, wheelRegion : " + wheelRegion);
                        Log.d("wheel", "initializeVariables, stroke_direction : " + stroke_direction);

                        if (events.getEventID() > 0 && events.getExtraType() != 5)//eventID > 0)
                            saveWagonWheelRegion(eventID, wheelRegion, stroke_direction);

                        Log.d("internet", "scoring, initializeVariables, isNetworkAvailable() : " + isNetworkAvailable());

                        if (isNetworkAvailable())
                            post(1);

                    } else if ((substitution && ballType > 0) || power) {

                        Log.d("eventId", "initializeVariables, : " + events.getEventID());
                        Log.d("eventId", "initializeVariables, : " + events);

                        if (power)
                            power = false;

                        if (isNetworkAvailable()) {                     // added on 27/04/20
                            post(2);
                        }

                    }/* else if (power) {//events.getEventID() == 21 ||
                        //events.getEventID() == 22 || events.getEventID() == 23) {//power && ballType > 0) {

                        Log.d("eventId", "initializeVariables, power : " + events.getEventID());
                        Log.d("eventId", "initializeVariables, power : " + events);

                        power = false;

                        post(3);
//                    }
                    }*/


                    Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();

                    Log.e("Scoring", "initializeVariables, match : " + match);

                    currentInnings = events.getInnings();
                    teamA = match.getTeamA();
                    teamB = match.getTeamB();
                    matchtype = match.getMatchType();
                    innings = match.getInnings();
                    max_opb = match.getMax_opb();
                    max_bpb = match.getMax_bpb();
                    limited_over = match.isLimited_overs();
                    Log.e("Scoring", "initializeVariables, innings : " + innings);
                    ballsPerOver = match.getBalls();
//                    player_count = match.getPlayer();
                    playerA = match.getPlayerA();
                    playerB = match.getPlayerB();
                    HUNDRED = match.isHundred();    // Added on 24/07/2021
                    Log.e("Scoring", "initializeVariables, HUNDRED : " + HUNDRED);

                    if (!SUPER_OVER) {
                        totalOver = match.getOver();

                    } else {
                        totalOver = 1f;
                        player_count = 2;//3;
                        subst = 0;
                    }
                    tossWinner = match.getToss_winner();
                    decision = match.getDecision();
                    totalInnings = match.getTotalInnings();
                    noballRun = match.getNoballrun();
                    wideRun = match.getWiderun();
                    penaltyRun = match.getPenaltyrun();
                    revisedTarget = match.getRevisedTarget();
                    sessionID = match.getStatusId();
                    sessionType = match.getStatus();

                    penaltyRun = match.getPenaltyrun();
                    noballRun = match.getNoballrun();
                    wideRun = match.getWiderun();

                    Log.e("sessionID", "resume, sessionID : " + sessionID);

                    if (events.getUndoArray() != null) {
                        try {
                            jsonUndoArray = new JSONArray(events.getUndoArray());
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    } else {
                        jsonUndoArray = new JSONArray();
                    }


                    Log.e("undo", "resume, jsonUndoArray : " + jsonUndoArray);

                    currentRuns = events.getTotalRuns();
                    wicket = events.getWicket();
                    ball = events.getCurrentOverBalls();
                    Log.e("Scoring", "resume, ball : " + ball);
                    totalBalls = events.getBalls();
                    currentOver = events.getOvers();


                    endOfDay = events.isEndOfDay();
                    lastBallType = events.getBallType();
                    pre_out = events.isPre_out();
                    callBowlerAlert = events.isCallBowlerAlert();
                    ball = events.getCurrentOverBalls();

                    displayEventID();      // Added on 24/11/2021

                    // Added on 26/07/2021
                    /*int t1 = (int) currentOver;
                    float t2 = currentOver - t1;
                    if (t2 == 0 && (t1 % 2 == 0)) {*/
                    Log.e("HUNDRED", "resume, totalBalls = " + totalBalls);
                    Log.e("HUNDRED", "resume, totalBalls % 10) = " + (totalBalls % 10));

                   /* Commented on 27/07/2021
                    if (lastBallType == 4 || lastBallType == 5) {
                        if (totalBalls > 0) {
                            if ((totalBalls % 10) == 0) {
                                change_end_flag = true;
//                        displayAlert("Bowling end changed");
                            } else
                                change_end_flag = false;
                        }
                    } else
                        change_end_flag = false;*/
                    // === till here

                    if (currentOver > 1f) {
                        lastBowler = realm.where(Events.class).
                                equalTo("matchid", matchid).
                                equalTo("ballType", 6).
                                findAll().last().getBowlerID();
                    }

                    if (currentInnings == 2)
                        preInningsRuns = events.getPreInningsRuns();

                    if (endOfDay) {

                        // added on 30/04/2020
                        btnInterval.setText("START DAY");
                        btnInterval.setEnabled(true);
                        disableButtons(2);
                    }

                    player1ID = events.getPlayer1ID();
                    player2ID = events.getPlayer2ID();

                    //added on 29/04/2020
                    //===========================================
                    if ((events.getBallType() == 18 || events.getBallType() == 19) && events.getDismissedPlayerID() != 0) {

                        if (events.getStrikerID() == events.getDismissedPlayerID())
                            strID = events.getDisNewBatsmanID();

                        else if (events.getNonStrikerID() == events.getDismissedPlayerID())
                            nstrID = events.getDisNewBatsmanID();

                    } else {
                        //===================================================
                        // A
                        strID = events.getStrikerID();
                        nstrID = events.getNonStrikerID();
                    }

                    // UPDATED ON 01/03/2021
                    wk_id = events.getWkID(); //wk_player.getPlayerID();
                    keeper_position = events.getWk_position();  //wk_player.getWicketkeeping_position();
                    pre_wk_id = events.getPreWkID();
                    pre_wk_position = events.getPreWk_position();

                    Player wk_player = realm.where(Player.class).
                            equalTo("matchid", matchid).
                            equalTo("team", events.getFieldingTeamNo()).
                            equalTo("wicketKeeper", true).
                            equalTo("new_wk", true).
                            equalTo("playerID", wk_id).findFirst();

                    if (wk_player != null) {
                        wicketkeeper = wk_player.getPlayerName();
                    }

                    serverSync();

                    // Added on 28/04/2021
                    lunch_flag = events.getLunch_flag();
                    tea_flag = events.getTea_flag();
                    dinner_flag = events.getDinner_flag();
                    // till here


                    Log.d("new_bowler", "initializeVaribales, new_bowler : " + new_bowler);
                    Log.d("new_bowler", "initializeVaribales, substitution : " + substitution);
                    Log.d("new_bowler", "initializeVaribales, bowlerID : " + bowlerID);
                    Log.d("new_bowler", "initializeVaribales, bowler : " + bowler);
                    Log.d("new_bowler", "initializeVaribales, events.getBowlerID() : " + events.getBowlerID());
                    Log.d("new_bowler", "initializeVaribales, preBowlerID : " + preBowlerID);
                    if (new_bowler && substitution) {

                        substitution = false;

                        ballType = 6;
                        bCount = 0; // Added on 22/09/2021
                        Log.e("Scoring", "selectBowlerAlertDialog, bowlerAlert, RETURN, ballType : " + ballType);
                        Log.d("DISPLAY", "1 modified = " + modified);
                        Log.d("DISPLAY", "1 udisplay = " + udisplay);
                        newEvent(matchid, matchID,
                                currentInnings, currentRuns, currentOver, totalBalls, wicket, ball, 0,
                                preInningsRuns, remainingRuns, remainingBalls, remainingOver, leadingRuns,
                                innings1Runs, innings2Runs, innings3Runs, innings4Runs,
                                battingTeamNo, fieldingTeamNo,
                                player1ID, player2ID,
                                strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID,
                                0, ballType, bCount, -1, 0,
                                -1, 0, null,
                                0, disNewBatsmanBattingOrder,
                                0, 0, 0, false, 0,
                                commentary, bowlerID, mo, maiden, modified, udisplay,
                                tco,
                                0, sessionType, sessionID,
                                endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs,
                                false, freeHit, false, inning_started, 0,
                                0, 0, null, pre_out, callBowlerAlert,
                                wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                                forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                                tea_flag, dinner_flag);



                        newBowler(bowlerID, preBowlerID);
                    } else
                        bowlerID = events.getBowlerID();
                    preBowlerID = events.getPrevBowlerID();
                    if (preBowlerID <= 0) {
                        tvBowler2.setVisibility(View.INVISIBLE);
                        tvBowlerOver2.setVisibility(View.INVISIBLE);
                        tvBowlerRuns2.setVisibility(View.INVISIBLE);
                        tvBowlerMO2.setVisibility(View.INVISIBLE);
                        tvBowlerWicket2.setVisibility(View.INVISIBLE);
                    } else {
                        tvBowler2.setVisibility(View.VISIBLE);
                        tvBowlerOver2.setVisibility(View.VISIBLE);
                        tvBowlerRuns2.setVisibility(View.VISIBLE);
                        tvBowlerMO2.setVisibility(View.VISIBLE);
                        tvBowlerWicket2.setVisibility(View.VISIBLE);
                    }
                    lastPreBowlerID = events.getLastPreBowlerID();
                    dismissedPlayerID = events.getDismissedPlayerID();
                    newBatsID = events.getDisNewBatsmanID();
                    if (newBatsID > 0) {
                        Player player = realm.where(Player.class).
                                equalTo("matchid", matchid).
                                equalTo("playerID", newBatsID).findFirst();
                        if (player != null) {
                            newBatsman = player.getPlayerName();
                        }
                    }
//                pre_out = events.isPre_out();
                    dismissedPlayrID = dismissedPlayerID;
                    fielderPlayerID = events.getFielderID();


                    if (lastBallType == 3 && dismissedPlayerID > 0) {

                        out = true;
                        if (events.getOutType() == 10)
                            newPartnership = true;
                    /*else
                        newPartnership = false;*/
                        dismissedPlayerDetails(dismissedPlayerID);
                    } else {


                        // get partnership details
                        Partnership partnership = realm.where(Partnership.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("wicket", wicket + 1).findFirst();

                        if (partnership != null) {
                            psRuns = partnership.getPartnershipRuns();
                            psBalls = partnership.getPartnershipBalls();
                            psTBalls = partnership.getPartnershipTotalBalls();  // Added on 28/07/2021
                            psOver = partnership.getPartnershipOver();
                            ps1ID = partnership.getPlayer1ID();
                            p1CR = partnership.getPlayer1ContributionRuns();
                            p1CB = partnership.getPlayer1ContributionBalls();
                            ps2ID = partnership.getPlayer2ID();
                            p2CR = partnership.getPlayer2ContributionRuns();
                            p2CB = partnership.getPlayer2ContributionBalls();
                        } else {

                            psRuns = 0;
                            psBalls = 0;
                            psTBalls = 0;   //  Added on 28/07/2021
                            psOver = 0;
//                    ps1ID = 0;
                            p1CR = 0;
                            p1CB = 0;
//                    ps2ID = 0;
                            p2CR = 0;
                            p2CB = 0;
                        }
                    }

                    Log.d("HUNDRED", "initialize 1, totalBalls = " + totalBalls);


                    if (lastBallType == 4 || lastBallType == 5) {
                        callBowlerAlert = true; // Added on 26/11/2021
                        // Added on 26/07/2021
                        if (HUNDRED) {    //Added on 04/08/2021
                            if ((totalBalls > 0) && ((totalBalls % 10) == 0)) { // Added on 27/07/2021

                                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                                builder.setIcon(R.drawable.ball)
                                        .setTitle("Bowling end changed")
                                        .setCancelable(false)
                                        .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                dialog.dismiss();

                                                // Added on 04/08/2021
                                                if (dismissedPlayrID == strID || dismissedPlayrID == nstrID) {
                                                    Log.d("CHANGEBATSMAN", "callEndOfOverAlert, End Over");
                                                    changeBatsman(dismissedPlayrID, null, newPartnership, true);
                                                }
                                                else
                                                    selectBowlerAlertDialog();
                                            }
                                        })
                                        .show();

                            }
                            else {  // Added on 04/08/2021
                                if (dismissedPlayrID == strID || dismissedPlayrID == nstrID) {
                                    Log.d("CHANGEBATSMAN", "callEndOfOverAlert, End Over");
                                    changeBatsman(dismissedPlayrID, null, newPartnership, true);
                                } else
                                    selectBowlerAlertDialog();
                            }
                        }

                    }

                    else if (lastBallType == 12) {
                        if (events.getIntervalId() == 7)
                            interval = false;
                        else
                            interval = true;
                    }

                    if (interval)
                        disableButtons(-1);

                    if (currentInnings == 1 || currentInnings == 99) {
                        ll_remainings.setVisibility(View.GONE);
                        remainingRuns = 0;
                        remainingBalls = 0;
                        remainingOver = 0;
                        leadingRuns = 0;
                    } else {
                        ll_remainings.setVisibility(View.VISIBLE);

                        remainingRuns = events.getRemainingRuns();
                        leadingRuns = events.getLeadingRuns();

                        if (!innings.matches("multi")) {
                            remainingBalls = events.getRemainingBalls();
                            remainingOver = events.getRemainingOvers();
                        }

                    /*if (innings.matches("multi") && leadingRuns > 0 && remainingRuns < 0)
                        leadingRuns = events.getLeadingRuns();*/
                    }
                    Log.e("Scoring", "initializeVariables, resume, leadingRuns : " + leadingRuns);
                    Log.e("Scoring", "initializeVariables, resume, remainingRuns : " + remainingRuns);
                    Log.e("Scoring", "initializeVariables, resume, remainingBalls : " + remainingBalls);
                    Log.e("Scoring", "initializeVariables, resume, remainingOver : " + remainingOver);
                    Log.e("Scoring", "initializeVariables, resume, status : " + status);
                    Log.e("Scoring", "initializeVariables, resume, totalInnings : " + totalInnings);

                    if (concussion) {

                        if (batting) {

                            if (player1ID == sout_id)
                                player1ID = sin_id;

                            else if (player2ID == sout_id)
                                player2ID = sin_id;

                            if (strID == sout_id)
                                strID = sin_id;

                            else if (nstrID == sout_id)
                                nstrID = sin_id;

                            if (ps1ID == sout_id) {
                                ps1ID = sin_id;
                                p1CR = 0;
                                p1CB = 0;
                                p2CR = 0;
                                p2CB = 0;
                                psRuns = 0;
                                psBalls = 0;
                                psTBalls = 0;   // Adde don 28/07/2021
                                psOver = 0;
                            } else if (ps2ID == sout_id) {
                                ps2ID = sin_id;
                                p1CR = 0;
                                p1CB = 0;
                                p2CR = 0;
                                p2CB = 0;
                                psRuns = 0;
                                psBalls = 0;
                                psTBalls = 0;   // Added on 28/07/2021
                                psOver = 0;
                            }

                        } else if (fielding) {

                            if (bowlerID == sout_id)
                                bowlerID = sin_id;

                            if (preBowlerID > 0 && preBowlerID == sout_id)
                                preBowlerID = sin_id;

//                        if (nextBowlerID > 0 && nextBowlerID == sout_id)
//                            nextBowFFlerID = sin_id;
                        }

                    }

                    Player player = realm.where(Player.class).
                            equalTo("matchid", matchid).
                            /*equalTo("team", battingTeamNo).*/
                                    equalTo("playerID", player1ID).findFirst();

                    Log.d("player", "player1ID : " + player1ID + ", player : " + player);

                    if (player != null) {


                        player1 = player.getPlayerName();
                    }

                    player = realm.where(Player.class).
                            equalTo("matchid", matchid).
                            /*equalTo("team", battingTeamNo).*/
                                    equalTo("playerID", player2ID).findFirst();

                    Log.d("player", "player2ID : " + player2ID + ", player : " + player);

                    if (player != null) {


                        player2 = player.getPlayerName();
                    }

                    //commented on 15/05/2020
                /*player1 = realm.where(Player.class).
                            equalTo("matchid", matchid).
                            equalTo("team", battingTeamNo).
                            equalTo("playerID", player1ID).findFirst().getPlayerName();

                player2 = realm.where(Player.class).
                        equalTo("matchid", matchid).
                        equalTo("team", battingTeamNo).
                        equalTo("playerID", player2ID).findFirst().getPlayerName();*/

                    if (strID == player1ID && nstrID == player2ID) {

                        striker = player1;
                        nonStriker = player2;
                    } else if (strID == player2ID && nstrID == player1ID) {

                        striker = player2;
                        nonStriker = player1;
                    }

                    Log.d("BOWLER", "initializeVariables, bowlerID : " + bowlerID);

                    if (bowlerID > 0) {

                    /*bowler = realm.where(Player.class).
                            equalTo("matchid", matchid).
                            equalTo("team", fieldingTeamNo).
                            equalTo("playerID", bowlerID).findFirst().getPlayerName();*/

                        Player bowler_player = realm.where(Player.class).
                                equalTo("matchid", matchid).
                                /* equalTo("team", fieldingTeamNo).*/
                                        equalTo("playerID", bowlerID).findFirst();

                        Log.d("BOWLER", "initializeVariables, bowler_player : " + bowler_player);

                        if (bowler_player != null) {
                            bowler = bowler_player.getPlayerName();
                        }

                        Bowler bowller = realm.where(Bowler.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                /*equalTo("team", fieldingTeamNo).*/
                                        equalTo("playerID", bowlerID).findFirst();

                        Log.d("BOWLER", "initializeVariables, fieldingTeamNo : " + fieldingTeamNo);
//                        Log.d("BOWLER", "initializeVariables, bowller : " + bowller);

                        Log.d("HUNDRED", "initializeVariables 1, bowller = " + bowller);
                        if (bowller != null) {

                            bwRun = bowller.getRuns();
                            bowlerBalls = bowller.getBalls();
                            bt_balls = bowller.getTotalBalls(); // Added on 26/07/2021
                            bowlerOver = bowller.getOver();
                            bowlerWicket = bowller.getWicket();
                            bowlerDots = bowller.getDots();
                            bowlerF4s = bowller.getF4s();
                            bowlerS6s = bowller.getS6s();
                            bowlerNoBall = bowller.getNoBalls();
                            bowlerWide = bowller.getWides();
                            bowlerMO = bowller.getMaidenOver();
                        }
                    }

//                if (nextBowlerID != 0) {
//                    nextBowler = realm.where(Player.class).
//                            equalTo("matchid", matchid).
//                            equalTo("team", fieldingTeamNo).
//                            equalTo("playerID", nextBowlerID).findFirst().getPlayerName();
//
//                    preBowler = "";
//                }

                    if (preBowlerID != 0) {
                    /*preBowler = realm.where(Player.class).
                            equalTo("matchid", matchid).
                            equalTo("team", fieldingTeamNo).
                            equalTo("playerID", preBowlerID).findFirst().getPlayerName();*/

                        Player pre_bowler_player = realm.where(Player.class).
                                equalTo("matchid", matchid).
                                /* equalTo("team", fieldingTeamNo).*/
                                        equalTo("playerID", preBowlerID).findFirst();

                        if (pre_bowler_player != null) {
                            Log.d("BOWLER", "initializeVariables, pre_bowler_player : " + pre_bowler_player);
                            preBowler = pre_bowler_player.getPlayerName();
                        } else
                            Log.d("BOWLER", "initializeVariables, pre_bowler_player = null");

                        Bowler bowller = realm.where(Bowler.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                /* equalTo("team", fieldingTeamNo).*/
                                        equalTo("playerID", preBowlerID).findFirst();

                        Log.d("HUNDRED", "initializeVariables 2, bowller = " + bowller);

                        if (bowller != null) {
                            preBowlerRun = bowller.getRuns();
                            preBowlerBalls = bowller.getBalls();
                            pbt_balls = bowller.getTotalBalls(); // Added on 26/07/2021
                            preBowlerDots = bowller.getDots(); // Added on 28/07/2021
                            preBowlerOver = bowller.getOver();
                            preBowlerWicket = bowller.getWicket();
                            preBowlerMO = bowller.getMaidenOver();
                        }
                    }

                    battingTeamNo = events.getBattingTeamNo();
                    fieldingTeamNo = events.getFieldingTeamNo();
                    modified = events.getCurrentOver();
                    udisplay = events.getUndoDisplay();


                    maiden = events.isMaidenOver();
                    mo = events.getMo();

                    if (battingTeamNo == 1) {
                        battingTeam = teamA;
                        fieldingTeam = teamB;
                    } else if (battingTeamNo == 2) {
                        battingTeam = teamB;
                        fieldingTeam = teamA;
                    }

                    Batsman batsman = realm.where(Batsman.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).
                            equalTo("team", battingTeamNo).
                            equalTo("batsman_pID", player1ID).findFirst();

//                    Log.e("Scoring", "initializeVariables, player1Runs : " + batsman);

                    if (batsman.getRuns() == 0)
                        player1Runs = 0;
                    else
                        player1Runs = batsman.getRuns();
                    if (batsman.getBalls() == 0)
                        player1Balls = 0;
                    else
                        player1Balls = batsman.getBalls();
                    if (batsman.getDots() == 0)
                        player1Dots = 0;
                    else
                        player1Dots = batsman.getDots();
                    if (batsman.getF4s() == 0)
                        player1F4s = 0;
                    else
                        player1F4s = batsman.getF4s();
                    if (batsman.getS6s() == 0)
                        player1S6s = 0;
                    else
                        player1S6s = batsman.getS6s();

//                    RealmResults<Batsman> b_r = realm.where(Batsman.class).
//                            equalTo("matchid", matchid).
//                            equalTo("innings", currentInnings).
//                            equalTo("team", battingTeamNo).findAll();
//
//                    for (Batsman b : b_r) {
//
////                        Log.e("Scroing", "batsman : " + b + "\n\n");
//                    }

                    batsman = realm.where(Batsman.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).
                            equalTo("team", battingTeamNo).
                            equalTo("batsman_pID", player2ID).findFirst();

//                    Log.e("Scoring", "initializeVariables, player2Runs Run : " + batsman);

                    if (batsman.getRuns() == 0)
                        player2Runs = 0;
                    else
                        player2Runs = batsman.getRuns();
                    if (batsman.getBalls() == 0)
                        player2Balls = 0;
                    else
                        player2Balls = batsman.getBalls();
                    if (batsman.getDots() == 0)
                        player2Dots = 0;
                    else
                        player2Dots = batsman.getDots();
                    if (batsman.getF4s() == 0)
                        player2F4s = 0;
                    else
                        player2F4s = batsman.getF4s();
                    if (batsman.getS6s() == 0)
                        player2S6s = 0;
                    else
                        player2S6s = batsman.getS6s();


                    if (strID == player1ID) {

                        striker = player1;
                        strikerRuns = player1Runs;
                        strikerBalls = player1Balls;
                        strikerDots = player1Dots;
                        strikerF4s = player1F4s;
                        strikerS6s = player1S6s;
                        nonStriker = player2;
                        nonStrikerRuns = player2Runs;
                        nonStrikerBalls = player2Balls;
                        nonStrikerDots = player2Dots;
                        nonStrikerF4s = player2F4s;
                        nonStrikerS6s = player2S6s;
                        player1Selected.setVisibility(View.VISIBLE);
                        player2Selected.setVisibility(View.GONE);

                    } else if (nstrID == player1ID) {

                        striker = player2;
                        strikerRuns = player2Runs;
                        strikerBalls = player2Balls;
                        strikerDots = player2Dots;
                        strikerF4s = player2F4s;
                        strikerS6s = player2S6s;
                        nonStriker = player1;
                        nonStrikerRuns = player1Runs;
                        nonStrikerBalls = player1Balls;
                        nonStrikerDots = player1Dots;
                        nonStrikerF4s = player1F4s;
                        nonStrikerS6s = player1S6s;
                        player1Selected.setVisibility(View.GONE);
                        player2Selected.setVisibility(View.VISIBLE);
                    }


                    lastRun = events.getCurrentRun();
                    int erun = events.getExtraRuns();
                    int pt = events.getPenaltyType();
                    int et = events.getExtraType();
//                    if (lastRun == 3 || lastRun == 1)     Commented on 01/12/2021
//                          swap();                         Commented on 01/12/2021
                    if (erun == 0 && et == -1) {    // Updated on 01/12/2021
                        if ((lastRun % 2) != 0)
                            swap();
                    } else {

                        if (pt == 1) {
                            erun = erun - penaltyRun;
                        }

                        if ((et == 0) || (et == 1)) {
                            if ((erun % 2) != 0)
                                swap();
                        } else if ((et == 3) || (et == 6)) {
                            if (((erun - noballRun) % 2) != 0)
                                swap();
                        } else if ((et == 7)) {// || (et == 8)) {
                            if (((lastRun) % 2) != 0)
                                swap();
                        } else if (et == 2) {
                            if (((erun - noballRun) % 2) != 0)
                                swap();
                        } else if (et == 4) {
                            if (((erun - wideRun) % 2) != 0)
                                swap();
                        }
                    }// === till here

                    ExtraCard extraCard = realm.where(ExtraCard.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).findFirst();
                    if (extraCard != null)
                        totalExtras = extraCard.getByes() +
                                extraCard.getLb() +
                                extraCard.getWide() +
                                extraCard.getNoBall() +
                                extraCard.getPenalty();

                    else
                        totalExtras = 0;

                    RealmResults<FOW> f_results = realm.where(FOW.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).findAll();

                    dismissedList.clear();

                    for (FOW fow : f_results) {
                        dismissedList.add(fow.getDismissedPlayerID());
                    }

                    retiredList.clear();

                    RealmResults<Batsman> r_result = realm.where(Batsman.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).
                            equalTo("team", battingTeamNo).
                            equalTo("retired", true).findAll();

                    for (Batsman bats : r_result) {

                        retiredList.add(bats.getBatsman_pID());
                    }

                    if (currentInnings == 1 || currentInnings == 99)
                        ll_remainings.setVisibility(View.GONE);

                    else {
                        ll_remainings.setVisibility(View.VISIBLE);

                    }

                    Log.e("Scoring", "initializeVariables, resume, remainingRuns : " + remainingRuns);
                    Log.e("Scoring", "initializeVariables, resume, leadingRuns : " + leadingRuns);


                    if (innings.matches("multi") || totalOver == 1000) {

                        tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
                        tvRemainingOversBalls.setVisibility(View.INVISIBLE);
                    } else {
                        tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                        tvRemainingOversBalls.setVisibility(View.VISIBLE);

                        if (/*leadingRuns > 0 ||*/ remainingRuns == 0) {
                            tvRemainingOversBalls.setVisibility(View.INVISIBLE);
                            tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
                        } else if (remainingRuns > 0) {
                            tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                            tvRemainingOversBalls.setVisibility(View.VISIBLE);
                        }
                    }

                    if (ball >= ballsPerOver) {
                        endOfOver = true;
                        /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                        if (HUNDRED)
                            callBallsCompleted();
                        else*/
                        callEndOfOverAlert();

                    }

                    if (events.getBallType() == 10 || events.getBallType() == 9) {
                        callEndOfInnings(0);
                    }


                }

                else {
                    if (!realm.isInTransaction()) {
                        realm.beginTransaction();
                    }

                    events.deleteFromRealm();
                    realm.commitTransaction();

                    // calling initialization again
                    initializeVariables();

                }

                // Added on 31/08/2021
                if (dismissedPlayerID == player1ID) {
                    tvPlayer1.setText("");
                    tvPlayer1Runs.setText("0");
                    tvPlayer1Balls.setText("0");
                }
                else if (dismissedPlayerID == player2ID) {
                    tvPlayer2.setText("");
                    tvPlayer2Runs.setText("0");
                    tvPlayer2Balls.setText("0");
                }
                /// till here
            }

            else {

                Log.e("scoring", "Event is null");
            }
//            setDisplay(/*false*/);
        }

        else if (status.matches("start")) {

            Log.d("Scoring", "initialize, status start, player_count : "+player_count);

            if (initialize) {

                initialize = false;

                player1Runs = 0;
                player2Runs = 0;
                player1Balls = 0;
                player2Balls = 0;
                player1Dots = 0;
                player2Dots = 0;
                player1F4s = 0;
                player2F4s = 0;
                player1S6s = 0;
                player2S6s = 0;

                strikerRuns = 0;
                strikerBalls = 0;
                strikerDots = 0;
                strikerF4s = 0;
                strikerS6s = 0;
                nonStrikerRuns = 0;
                nonStrikerBalls = 0;
                nonStrikerDots = 0;
                nonStrikerF4s = 0;
                nonStrikerS6s = 0;

                hashScore = 0;
                ball = 0;
                currentOver = 0f;
                totalBalls = 0;
                builderText = 0;
                totalExtras = 0;

                initializeBowler();

                preBowlerRun = 0;
                pbt_balls = 0; // Added on 26/07/2021
                preBowlerDots = 0; // Added on 28/07/2021
                preBowlerBalls = 0;
                preBowlerOver = 0;
                preBowlerMO = 0;
                preBowlerWicket = 0;
                modified = "";
                udisplay = "";

                psRuns = 0;
                psBalls = 0;
                psTBalls = 0;   // Added on 28/07/2021
                psOver = 0;
                p1CR = 0;
                p1CB = 0;
                p2CB = 0;
                p2CR = 0;
                ballType = 15;
                bCount = 0; // Added on 22/09/2021

                reduced_overs = 0f;
                reduced_balls = 10; // 30/07/2021

                Log.d("scoring", "initializeVariables, currentInnings : " + currentInnings);

                if (currentInnings == 1 || currentInnings == 99) {

                    remainingRuns = 0;
                    remainingBalls = 0;
                    leadingRuns = 0;
//                    totalRuns = 0;
                    currentRuns = 0;
                    strikerRuns = 0;
                    strikerBalls = 0;
                    strikerF4s = 0;
                    strikerS6s = 0;
                    nonStrikerF4s = 0;
                    nonStrikerS6s = 0;
                    nonStrikerRuns = 0;
                    nonStrikerBalls = 0;

                    ll_remainings.setVisibility(View.GONE);

                    syncPartnership(wicket + 1, -1, 0, false, false);

                    Log.d("DISPLAY", " modified = " + modified);
                    Log.d("DISPLAY", "7 udisplay = " + udisplay);
                    newEvent(matchid, matchID,currentInnings, currentRuns, currentOver, totalBalls,
                            wicket, ball, 0, preInningsRuns, remainingRuns, remainingBalls,
                            remainingOver, leadingRuns, innings1Runs, innings2Runs, innings3Runs,
                            innings4Runs, battingTeamNo, fieldingTeamNo, player1ID, player2ID, strID,
                            nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0, ballType, bCount,
                            -1, 0, -1, 0, null,
                            0,disNewBatsmanBattingOrder, 0, 0,
                            0, false, 0, null,
                            -1, 0, false, modified, udisplay, tco,
                            -1, sessionType, sessionID, /*,false*/
                            endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs, false,
                            false, false, inning_started, 0, 0,
                            0, null, pre_out, callBowlerAlert, wk_id,
                            keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                            forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                            tea_flag, dinner_flag);

                    if (innings.matches("single")) {

                        if (sessionID == 6) {
                            sessionID = 12;
                            sessionType = "SS1";
                        } else if (sessionID == 7) {
                            sessionID = 8;
                            sessionType = "SS2";
                        } else if (sessionID == 9) {
                            sessionID = 10;
                            sessionType = "SS3";
                        }
                    }

                    else {

                        if (currentInnings == 1) {
                            if (sessionID == 6) {
                                sessionID = 12;
                                sessionType = "SS1";
                            }
                        }
                    }

                    Log.d("session", " runOnce 1, sessionType : " + sessionType);
                    Log.d("session", " runOnce 1, sessionID : " + sessionID);

                    // Added on 28/04/2021
                    lunch_flag = 0;
                    tea_flag = 0;
                    dinner_flag = 0;
                    // === till here
                    setMatchStatus(sessionType, sessionID);
                }

                else {

                    setSessionFlags();  // Added on 28/04/2021

                    if (SUPER_OVER) {

                        if (currentInnings == 100) {

                            Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
                            so_inninngs1Runs = match.getSuper_over_innings1runs();
                            remainingRuns = so_inninngs1Runs;
                            preInningsRuns = remainingRuns;
                            if (remainingRuns > 0)
                                leadingRuns = remainingRuns * (-1);
                            ++remainingRuns;
                            remainingOver = totalOver;
                            remainingBalls = ballsPerOver;
                            tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                            tvRemainingOversBalls.setVisibility(View.VISIBLE);
                            tvRemainingOversBallsText.setText(", Balls : ");
                            Log.e("Scoring", "initializaVariable, remainingBalls : " + remainingBalls);
                            tvRemainingOversBalls.setText(String.valueOf(remainingBalls));
                            ballType = 15;      // innings started
                            bCount = 0; // Added on 22/09/2021
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 100, remainingRuns : " + remainingRuns);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 100, remainingOver : " + remainingOver);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 100, remainingBalls : " + remainingBalls);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 100, leadingRuns : " + leadingRuns);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 100, totalOver : " + totalOver);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 100, ballsPerOver : " + ballsPerOver);
                            Log.d("so_inninngs1Runs","initializeVariables2 , : "+so_inninngs1Runs);
                            Log.d("sessionID","sessionID 2 , : "+sessionID);

                            // moved here on 31/07/2020
                            RealmResults<Penalty> results = realm.where(Penalty.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", 99).
                                    equalTo("forTeam", fieldingTeamNo).findAll();

                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 4, penalty : " + results);

                            if (results.isLoaded()) {

                                for (Penalty penalty : results) {

                                    if (!penalty.isSync()) {

                                        currentRuns = currentRuns + penaltyRun;
                                        remainingRuns = remainingRuns - penaltyRun;
                                        psRuns = psRuns + penaltyRun;
                                        syncPenalty(penalty.getId(), true);
                                    }
                                }
                            }   //============= till here

                            syncPartnership(wicket + 1, -1, 0, false, false);

                            Log.d("DISPLAY", "3 modified = " + modified);
                            Log.d("DISPLAY", "3 udisplay = " + udisplay);
                            newEvent(matchid, matchID, currentInnings, currentRuns, currentOver,
                                    totalBalls, wicket, ball, 0, preInningsRuns, remainingRuns,
                                    remainingBalls, remainingOver, leadingRuns, innings1Runs, innings2Runs,
                                    innings3Runs, innings4Runs, battingTeamNo, fieldingTeamNo, player1ID,
                                    player2ID, strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID,
                                    0, ballType, bCount, -1, 0, -1,
                                    0, null, 0, disNewBatsmanBattingOrder,
                                    0, 0, 0,
                                    false, 0, null, -1, 0,
                                    false, modified, udisplay, tco,-1,
                                    sessionType, sessionID, /*false,*/ endOfDay, SUPER_OVER,
                                    so_inninngs1Runs, so_inninngs2Runs, false,
                                    false, false, inning_started, 0,
                                    0, 0, null, pre_out, callBowlerAlert,
                                    wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                                    forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                                    tea_flag, dinner_flag);

                            // added on 05/05/2020
                            // need to cross check again due to SUPER_OVER
                            if (innings.matches("single")) {

                                if (sessionID == 6) {
                                    sessionID = 12;
                                    sessionType = "SS1";
                                } else if (sessionID == 7) {
                                    sessionID = 8;
                                    sessionType = "SS2";
                                } else if (sessionID == 9) {
                                    sessionID = 10;
                                    sessionType = "SS3";
                                }

                            }

                            else {

                                if (currentInnings == 1) {

                                    if (sessionID == 6) {
                                        sessionID = 12;
                                        sessionType = "SS1";
                                    }
                                }
                            }

                            Log.d("session", " runOnce 1, sessionType : " + sessionType);
                            Log.d("session", " runOnce 1, sessionID : " + sessionID);
                            setMatchStatus(sessionType, sessionID);

                            updateMatch(matchid, false);
                        }
                    }
                    else {
                        if (currentInnings == 4) {

                            Events lastEvent = realm.where(Events.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", 3).findAll().last();
                            remainingRuns = lastEvent.getLeadingRuns();
                            leadingRuns = remainingRuns * (-1);

                            innings3Runs = lastEvent.getInnings3Runs();
                            innings2Runs = lastEvent.getInnings2Runs();
                            innings1Runs = lastEvent.getInnings1Runs();


                            if (innings.matches("multi") && totalOver == 1000) {
                                tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
                                tvRemainingOversBalls.setVisibility(View.INVISIBLE);
                            } else {
                                tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                                tvRemainingOversBalls.setVisibility(View.VISIBLE);
                            }

                            remainingOver = totalOver;
//                            remainingBalls = totalOver * ballsPerOver;
                            int temp_tot = (int) totalOver;
                            float temp_diff = totalOver - temp_tot;
                            remainingBalls = (temp_tot * ballsPerOver) + (int) (temp_diff * 10);
                            ++remainingRuns;
//                        remainingRuns = temp + 1;

                            ballType = 15;      // innings started
                            bCount = 0; // Added on 22/09/2021

                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 4, remainingRuns : " + remainingRuns);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 4, remainingOver : " + remainingOver);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 4, remainingBalls : " + remainingBalls);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 4, leadingRuns : " + leadingRuns);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 4, totalOver : " + totalOver);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 4, ballsPerOver : " + ballsPerOver);
                            Log.d("so_inninngs1Runs","initializeVariables3 , : "+so_inninngs1Runs);
                            Log.d("sessionID","sessionID 3 , : "+sessionID);

                            // added here on 31/07/2020
                            RealmResults<Penalty> results = realm.where(Penalty.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", 3).
                                    equalTo("forTeam", fieldingTeamNo).findAll();

                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 4, penalty : " + results);

                            if (results.isLoaded()) {

                                for (Penalty penalty : results) {

                                    if (!penalty.isSync()) {

                                        currentRuns = currentRuns + penaltyRun;
                                        remainingRuns = remainingRuns - penaltyRun;
                                        psRuns = psRuns + penaltyRun;
                                        syncPenalty(penalty.getId(), true);
                                    }
                                }
                            }//======= till here

                            syncPartnership(wicket + 1, -1, 0, false, false);

                            Log.d("DISPLAY", "4 modified = " + modified);
                            Log.d("DISPLAY", "4 udisplay = " + udisplay);
                            newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls,
                                    wicket, ball, 0, preInningsRuns, remainingRuns, remainingBalls,
                                    remainingOver, leadingRuns, innings1Runs, innings2Runs, innings3Runs,
                                    innings4Runs, battingTeamNo, fieldingTeamNo, player1ID, player2ID,
                                    strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0,
                                    ballType, bCount, -1, 0, -1, 0,
                                    null, 0, disNewBatsmanBattingOrder,
                                    0, 0, 0, false,
                                    0, null, -1, 0, false,
                                    modified, udisplay, tco, -1, sessionType,
                                    sessionID, /*false,*/ endOfDay, SUPER_OVER, so_inninngs1Runs,
                                    so_inninngs2Runs, false, false,
                                    false, inning_started, 0, 0,
                                    0, null, pre_out, callBowlerAlert, wk_id,
                                    keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                                    forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                                    tea_flag, dinner_flag);

                            updateMatch(matchid, false);


                        } else if (currentInnings == 3) {

                            int fi = realm.where(Events.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", 1).findAll().last().getTotalRuns();

                            innings1Runs = realm.where(Events.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", 1).findAll().last().getInnings1Runs();

                            Events lievnt = realm.where(Events.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", 2).findAll().last();
                            innings2Runs = lievnt.getInnings2Runs();

//                        if (lievnt.getLeadingRuns() > 0 && lievnt.getRemainingRuns() <= 0) {
                            if (!followon) {
                                remainingRuns = lievnt.getLeadingRuns();
                                leadingRuns = remainingRuns * (-1);
                            } else {
                                remainingRuns = lievnt.getRemainingRuns();
                                leadingRuns = lievnt.getLeadingRuns();
                            }
//                        }

                            if (innings.matches("multi") && totalOver == 1000) {

                                tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
                                tvRemainingOversBalls.setVisibility(View.INVISIBLE);
                            } else {

                                tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                                tvRemainingOversBalls.setVisibility(View.VISIBLE);
                            }

                            remainingOver = totalOver;
//                            remainingBalls = totalOver * ballsPerOver;
                            int temp_tot = (int) totalOver;
                            float temp_diff = totalOver - temp_tot;
                            remainingBalls = (temp_tot * ballsPerOver) + (int) (temp_diff * 10);

                            if ((leadingRuns > 0 || remainingRuns < 0) && (totalInnings == 4 || totalInnings == 100)) {
                                tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
                                tvRemainingOversBalls.setVisibility(View.INVISIBLE);
                            } else {
                                tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                                tvRemainingOversBalls.setVisibility(View.VISIBLE);
                            }

                            ballType = 15;      // innings started
                            bCount = 0; // Added on 22/09/2021

                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 3, remainingRuns : " + remainingRuns);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 3, remainingOver : " + remainingOver);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 3, remainingBalls : " + remainingBalls);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 3, leadingRuns : " + leadingRuns);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 3, totalOver : " + totalOver);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 3, ballsPerOver : " + ballsPerOver);
                            Log.d("so_inninngs1Runs","initializeVariables4 , : "+so_inninngs1Runs);

                            Log.d("sessionID","sessionID4 , : "+sessionID);

                            // moved here on 31/07/2020
                            RealmResults<Penalty> results = realm.where(Penalty.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", 2).
                                    equalTo("forTeam", fieldingTeamNo).findAll();

                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 3, penalty : " + results);

                            if (results.isLoaded()) {

                                for (Penalty penalty : results) {

                                    if (!penalty.isSync()) {

                                        currentRuns = currentRuns + penaltyRun;
                                        remainingRuns = remainingRuns - penaltyRun;
                                        psRuns = psRuns + penaltyRun;
                                        syncPenalty(penalty.getId(), true);
                                    }
                                }
                            }   // ======= till here

                            syncPartnership(wicket + 1, -1, 0, false, false);

                            Log.d("DISPLAY", "5 modified = " + modified);
                            Log.d("DISPLAY", "5 udisplay = " + udisplay);
                            newEvent(matchid, matchID, currentInnings, currentRuns, currentOver,
                                    totalBalls, wicket, ball, 0, preInningsRuns, remainingRuns,
                                    remainingBalls, remainingOver, leadingRuns, innings1Runs, innings2Runs,
                                    innings3Runs, innings4Runs, battingTeamNo, fieldingTeamNo, player1ID,
                                    player2ID, strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID,
                                    0, ballType, bCount, -1, 0, -1,
                                    0, null, 0, disNewBatsmanBattingOrder,0, 0, 0,
                                    false, 0, null, -1, 0,
                                    false, modified, udisplay, tco,
                                    -1, sessionType, sessionID, endOfDay, SUPER_OVER,
                                    so_inninngs1Runs, so_inninngs2Runs, false,
                                    false, false, inning_started,
                                    0, 0, 0, null, pre_out,
                                    callBowlerAlert, wk_id, keeper_position, pre_wk_id, pre_wk_position,
                                    FORFEIT, forfeit_team, forfeit_innings, CONCEDE, conceded_team,
                                    forceEndingType, lunch_flag, tea_flag, dinner_flag);

                            // set session

                            updateMatch(matchid, false);

                        } else if (currentInnings == 2) {

                            remainingRuns = realm.where(Events.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", 1).findAll().last().getTotalRuns();
//                            preInningsRuns = remainingRuns;
                            innings1Runs = remainingRuns;
                            if (remainingRuns > 0)
                                leadingRuns = remainingRuns * (-1);
                            remainingOver = totalOver;
//                            remainingBalls = totalOver * ballsPerOver;
                            int temp_tot = (int) totalOver;
                            float temp_diff = totalOver - temp_tot;
                            remainingBalls = (temp_tot * ballsPerOver) + (int) (temp_diff * 10);

                            if (innings.matches("multi") && totalOver == 1000) {
                                tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
                                tvRemainingOversBalls.setVisibility(View.INVISIBLE);
                            } else {
                                tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                                tvRemainingOversBalls.setVisibility(View.VISIBLE);
                            }


                            if (innings.matches("single") || totalInnings == 2)
                                ++remainingRuns;
                            else if (totalInnings == 4) {
                            /*++remainingRuns;
                            ++leadingRuns;*/
//                            if (/*remainingRuns <= 0 && */leadingRuns <= 0)
                                leadingRuns = remainingRuns * (-1);
                            }

                            ballType = 15;      // innings started
                            bCount = 0; // Added on 22/09/2021
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 2, remainingRuns : " + remainingRuns);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 2, remainingOver : " + remainingOver);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 2, remainingBalls : " + remainingBalls);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 2, leadingRuns : " + leadingRuns);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 2, totalOver : " + totalOver);
                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 2, ballsPerOver : " + ballsPerOver);
                            Log.d("so_inninngs1Runs","initializeVariables5 , : "+so_inninngs1Runs);
                            Log.d("sessionID","sessionID 5 , : "+sessionID);

                            // moved here on 31/07/2020
                            RealmResults<Penalty> results = realm.where(Penalty.class).
                                    equalTo("matchid", matchid).
                                    /*equalTo("innings", 1).
                                    equalTo("forTeam", fieldingTeamNo).*/findAll();

                            Log.e("Scoring",
                                    "initializeVariables, start, innings = 2, penalty : " + results);

                            if (results.isLoaded()) {

                                for (Penalty penalty : results) {

                                    if (!penalty.isSync()) {

                                        currentRuns = currentRuns + penaltyRun;
                                        remainingRuns = remainingRuns - penaltyRun;
                                        psRuns = psRuns + penaltyRun;
                                        syncPenalty(penalty.getId(), true);
                                    }
                                }
                            }   //  ===== till here
                            syncPartnership(wicket + 1, -1, 0, false, false);

                            Log.d("DISPLAY", "6 modified = " + modified);
                            Log.d("DISPLAY", "6 udisplay = " + udisplay);
                            newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls,
                                    wicket, ball, 0, preInningsRuns, remainingRuns, remainingBalls,
                                    remainingOver, leadingRuns, innings1Runs, innings2Runs, innings3Runs,
                                    innings4Runs, battingTeamNo, fieldingTeamNo, player1ID, player2ID,
                                    strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0,
                                    ballType, bCount, -1, 0, -1, 0,
                                    null, 0, disNewBatsmanBattingOrder,0,
                                    0, 0, false,
                                    0, null, -1, 0, false,
                                    modified, udisplay, tco,-1, sessionType,
                                    sessionID, endOfDay, SUPER_OVER, so_inninngs1Runs,
                                    so_inninngs2Runs, false, false,
                                    false, inning_started, 0, 0,
                                    0, null, pre_out, callBowlerAlert, wk_id,
                                    keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                                    forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                                    tea_flag, dinner_flag);

                            if (innings.matches("single")) {

                                if (sessionID == 6) {
                                    sessionID = 12;
                                    sessionType = "SS1";
                                } else if (sessionID == 7) {
                                    sessionID = 8;
                                    sessionType = "SS2";
                                } else if (sessionID == 9) {
                                    sessionID = 10;
                                    sessionType = "SS3";
                                }

                            }

                            else {

                                if (currentInnings == 1) {

                                    if (sessionID == 6) {
                                        sessionID = 12;
                                        sessionType = "SS1";
                                    }
                                }
                            }

                            Log.d("session", " runOnce 1, sessionType : " + sessionType);
                            Log.d("session", " runOnce 1, sessionID : " + sessionID);
                            setMatchStatus(sessionType, sessionID);

                            updateMatch(matchid, false);

                        }


                        if (currentInnings == 1 || currentInnings == 99)
                            ll_remainings.setVisibility(View.GONE);

                        else {
                            ll_remainings.setVisibility(View.VISIBLE);
                            tvRemainingRuns.setVisibility(View.VISIBLE);

                            if (remainingRuns > 0)
                                tvRemainingRuns.setText(String.valueOf(remainingRuns));
//                        else if (leadingRuns > 0 && totalInnings == 4) {
                            if (leadingRuns > remainingRuns && totalInnings == 4) {
                                tvRemainingRuns.setText(String.valueOf(leadingRuns));
                                tvRemainingRunsText.setText("Leading Runs : ");
                            }

                            if (innings.matches("multi") && totalOver == 1000) {
                                tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
                                tvRemainingOversBalls.setVisibility(View.INVISIBLE);
                            } else {
                                tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                                tvRemainingOversBalls.setVisibility(View.VISIBLE);
                            }

                            if (totalOver != 1000 || !matchtype.matches("Test")) {

                                if (remainingBalls >= 100) {
                                    tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                                    tvRemainingOversBallsText.setText(", Overs : ");
                                    tvRemainingOversBalls.setVisibility(View.VISIBLE);
                                    tvRemainingOversBalls.setText(String.valueOf(remainingOver));
                                } else {
                                    tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                                    tvRemainingOversBallsText.setText(", Balls : ");
                                    tvRemainingOversBalls.setVisibility(View.VISIBLE);
                                    Log.e("Scoring", "initializaVariable, remainingBalls : " + remainingBalls);
                                    tvRemainingOversBalls.setText(String.valueOf(remainingBalls));
                                }
                            }

                            Log.e("Scoring", "initializeVariables, start, leadingRuns : " + leadingRuns);
                            Log.e("Scoring", "initializeVariables, start, remainingRuns : " + remainingRuns);
                            Log.e("Scoring", "initializeVariables, start, remainingBalls : " + remainingBalls);
                            Log.e("Scoring", "initializeVariables, start, remainingOver : " + remainingOver);
                            Log.e("Scoring", "initializeVariables, start, totalOver : " + totalOver);
                            Log.e("Scoring", "initializeVariables, start, ballsPerOver : " + ballsPerOver);

                            if (innings.matches("single") || currentInnings == 4 || currentInnings == 100) {
                                tvRemainingRunsText.setText("Remaining Runs : ");
                            } else {
                                if (remainingRuns > 0) {
                                    if (currentInnings == 4)
                                        tvRemainingRunsText.setText("Remaining Runs : ");
                                    else
                                        tvRemainingRunsText.setText("Trial Runs : ");
                                } else {
                                    tvRemainingRunsText.setText("Lead Runs : ");
                                }
                            }
                        }

                    }
                }
            }
//            setDisplay(true); Commented
        }

        setDisplay(/*true*/);

        intervalList = new ArrayList<String>();
        sessionList = new ArrayList<String>();
        fieldersList = new ArrayList<String>();

        Log.e("Scoring", "initializeVariable, end & b4 setDisplay, status : "+status);
        Log.e("Scoring", "initializeVariables, end & b4 setDisplay, remainingRuns : "+remainingRuns);
        Log.e("Scoring", "initializeVariables, end & b4 setDisplay, remainingBalls : "+remainingBalls);
        Log.e("Scoring", "initializeVariables, end & b4 setDisplay, remainingOver : "+remainingOver);



    }




    void syncPenalty(int pid, boolean sync) {

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {

                    try {

                        Penalty penalty = bgRealm.where(Penalty.class).
                                equalTo("matchid", matchid).
                                equalTo("id", pid).findFirst();

                        if (penalty != null) {
                            penalty.setSync(sync);
                            bgRealm.copyToRealm(penalty);
                        }


//                        setExtraCard();

                        ExtraCard extraCard = bgRealm.where(ExtraCard.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).findFirst();

                        Log.d("Scoring", "setExtraCard, ExtraCard : "+extraCard);

                        if (extraCard == null) {

                            extraCard = new ExtraCard();
                            extraCard.setInnings(currentInnings);
                            extraCard.setMatchid(matchid);
                            extraCard.setMatchID(matchID);
                            extraCard.setTeam(battingTeamNo);
                        }
                        ecPenlaty = extraCard.getPenalty();
                        Log.d("scoring", "b4 p ; " + ecPenlaty);
//                        if (penaltyType == 1)
                        ++ecPenlaty;
                        Log.d("scoring", " p ; " + ecPenlaty);
                        extraCard.setPenalty(ecPenlaty);
                        bgRealm.insertOrUpdate(extraCard);

//                        remainingRuns = remainingRuns - penaltyRun;

                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        } catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }
    }



    void initializeBowler(){

        bowlerOver = 0;
        bowlerBalls = 0;
        bt_balls = 0; // Added on 26/07/2021
        bwRun = 0;
        bowlerMO = 0;
        bowlerWicket = 0;
        bowlerDots = 0;
        bowlerF4s = 0;
        bowlerS6s = 0;
        bowlerWide = 0;
        bowlerNoBall = 0;

        tvBowlerRuns.setText(String.valueOf(bwRun));
        //Updated on 27/07/2021
        if (HUNDRED) {
            tvBowlerOver.setText(String.valueOf(bt_balls));
            tvBowlerMO.setText(String.valueOf(bowlerDots));
        } else {
            tvBowlerOver.setText(String.valueOf(bowlerOver));
            tvBowlerMO.setText(String.valueOf(bowlerMO));
        }
        tvBowlerWicket.setText(String.valueOf(bowlerWicket));
    }


    private void setInningsRuns(int innings, int totalRuns) {

        if (innings == 1) {
            preInningsRuns = totalRuns;
            innings1Runs = totalRuns;
            innings2Runs = 0;
            innings3Runs = 0;
            innings4Runs = 0;
            so_inninngs1Runs = 0;
            so_inninngs2Runs = 0;
        }

        else
        if (innings == 2) {
            innings2Runs = totalRuns;
            innings3Runs = 0;
            innings4Runs = 0;
            so_inninngs1Runs = 0;
            so_inninngs2Runs = 0;
        }

        else
        if (innings == 3) {
            innings3Runs = totalRuns;
            innings4Runs = 0;
            so_inninngs1Runs = 0;
            so_inninngs2Runs = 0;
        }

        else
        if (innings == 4) {
            innings4Runs = totalRuns;
            so_inninngs1Runs = 0;
            so_inninngs2Runs = 0;
        }

        else
        if (innings == 99) {
            preInningsRuns = totalRuns;
            so_inninngs1Runs = totalRuns;
            so_inninngs2Runs = 0;
        }

        else
        if (innings == 100) {
            so_inninngs2Runs = totalRuns;
        }

        Log.d("so_inninngs1Runs", "setInningsRuns6 : "+so_inninngs1Runs);
    }




    // set the values to display

    void setDisplay(/*boolean first*/){
        Log.d("setDisplay", "method called");

        tvTeamA.setText(teamA);
        tvTeamB.setText(teamB);
        Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
        match_id.setText(String.valueOf(match != null ? match.getD4s_matchid() : 0));
        // Added on 27/07/2021
        if(HUNDRED) {
            tv_bo_head.setText("Balls");
            tv_bmo_head.setText("Dots");
        } else {
            tv_bo_head.setText("O");
            tv_bmo_head.setText("M.O");
        }

        if (SUPER_OVER){
            checkMatchType("SUPER OVER");
        }
        else
            checkMatchType(matchtype);  // to check and set the match type

        tvTotalRuns.setText(String.valueOf(currentRuns));
        tvTotalWicket.setText(String.valueOf(wicket));
        //Updated on 27/07/2021
        if (HUNDRED)
            tvPlayingOver.setText(String.valueOf(totalBalls));
        else
            tvPlayingOver.setText(String.valueOf(new DecimalFormat("##.#").format(currentOver)));

        if (currentInnings == 1)
            tvPlayingInnings.setText("1st innings");

        else if (currentInnings == 2)
            tvPlayingInnings.setText("2nd innings");

        else if (currentInnings == 3)
            tvPlayingInnings.setText("3rd innings");

        else if (currentInnings == 4)
            tvPlayingInnings.setText("4th innings");

        else if (currentInnings == 99)
            tvPlayingInnings.setText("SUPER OVER 1st innings");

        else if (currentInnings == 100)
            tvPlayingInnings.setText("SUPER OVER 2nd innings");

        Log.d("Scoring", "setDisplay, currentInnings : "+currentInnings);
        Log.d("Scoring", "setDisplay, leadingRuns : "+leadingRuns);
        Log.d("Scoring", "setDisplay, remainingRuns : "+remainingRuns);
        Log.d("Scoring", "setDisplay, remainingBalls, 1 : "+remainingBalls);
        Log.d("Scoring", "setDisplay, remainingOver : "+remainingOver);
//        Log.d("Scoring", "setDisplay, first : "+first);




        if (currentInnings == 1 || currentInnings == 99)
            ll_remainings.setVisibility(View.GONE);

        else {
            ll_remainings.setVisibility(View.VISIBLE);

            if (innings.matches("single")) {
                tvRemainingRunsText.setText("Remaining Runs : ");
            } else if (innings.matches("multi")) {

                tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
                tvRemainingOversBalls.setVisibility(View.INVISIBLE);


                if (remainingRuns > 0 && leadingRuns <= 0) {

                    if (currentInnings == 4)
                        tvRemainingRunsText.setText("Remaining Runs : ");
                    else
                        tvRemainingRunsText.setText("Trial Runs : ");
//                    tvRemainingRuns.setText(String.valueOf(remainingRuns));
                } else if (innings.matches("multi") && leadingRuns > remainingRuns) {// && remainingRuns >= 0 && leadingRuns > 0) {
                    tvRemainingRunsText.setText("Leading Runs : ");
//                    if (remainingRuns < 0 && leadingRuns == 0)
//                        leadingRuns = leadingRuns - remainingRuns;
                }

            }


            if (remainingRuns > 0) {
                tvRemainingRuns.setText(String.valueOf(remainingRuns));
                /*if (first) {
                    if (remainingRuns <= 0 && leadingRuns <= 0)
                        leadingRuns = remainingRuns * (-1);
                }*/
            }

            else if (innings.matches("multi") && leadingRuns > remainingRuns) {

                tvRemainingRuns.setText(String.valueOf(leadingRuns));
                tvRemainingRunsText.setText("Leading Runs : ");
            }


            Log.e("Scoring", "setDisplay, remainingBalls, 2 : " + remainingBalls);
            Log.e("Scoring", "setDisplay, leadingRuns, 2 : " + leadingRuns);

            if (remainingBalls > 100) {
                tvRemainingOversBallsText.setText(", Overs : ");
                tvRemainingOversBalls.setText(String.valueOf(new DecimalFormat("##.#").format(remainingOver)));
            } else {
                tvRemainingOversBallsText.setText(", Balls : ");
                Log.e("Scoring", "setDisplay, remainingBalls, 3 : " + remainingBalls);
                Log.e("Scoring", "setDisplay, leadingRuns, 3 : " + leadingRuns);
                tvRemainingOversBalls.setText(String.valueOf(remainingBalls));
            }
        }





        if (innings.matches("multi") && totalOver == 1000) {
            tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
            tvRemainingOversBalls.setVisibility(View.INVISIBLE);
        }

        else if (innings.matches("single")) {
            tvRemainingOversBallsText.setVisibility(View.VISIBLE);
            tvRemainingOversBalls.setVisibility(View.VISIBLE);
        }

        tvBattingTeam.setText(battingTeam);
        tvPlayer1.setText(player1);
        tvPlayer2.setText(player2);
        tvPlayer1Runs.setText(String.valueOf(player1Runs));
        tvPlayer2Runs.setText(String.valueOf(player2Runs));
        tvPlayer1Balls.setText(String.valueOf(player1Balls));
        tvPlayer2Balls.setText(String.valueOf(player2Balls));

        tvFieldingTeam.setText(fieldingTeam);
        tvBowler.setText(bowler);

        /*if (currentInnings != 99) {
            if (nextBowlerID != 0)
                tvBowler2.setText(nextBowler);
            else*/ if (preBowlerID != 0)
            tvBowler2.setText(preBowler);
//        }

        //Updated on 27/07/2021
        if (HUNDRED) {
            tvBowlerOver.setText(String.valueOf(bt_balls));
            tvBowlerMO.setText(String.valueOf(bowlerDots));
        } else {
            tvBowlerOver.setText(String.valueOf(new
                    DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));
            tvBowlerMO.setText(String.valueOf(bowlerMO));
        }
        tvBowlerRuns.setText(String.valueOf(bwRun));
        tvBowlerWicket.setText(String.valueOf(bowlerWicket));


        // for setting previous(& next) bowler details to display

        if (currentInnings != 99 && currentInnings != 100) {

            //Updated on 27/07/2021
            if (HUNDRED) {
                tvBowlerOver2.setText(String.valueOf(pbt_balls));
                tvBowlerMO2.setText(String.valueOf(preBowlerDots));
            } else {
                tvBowlerOver2.setText(String.valueOf(new
                        DecimalFormat("##.#").format(setOverDisplay(preBowlerOver, preBowlerBalls))));
                tvBowlerMO2.setText(String.valueOf(preBowlerMO));
            }
            tvBowlerRuns2.setText(String.valueOf(preBowlerRun));
            tvBowlerWicket2.setText(String.valueOf(preBowlerWicket));
        }

        tvCurrentOver.setText(modified);
        Log.d("modified1", modified);
        Log.d("udisplay1", udisplay);

    }


    void checkMatchType(String matchtype){
        String temp = "";

        if(matchtype != null){

            Log.e("Scoring",  "checkMatchType, matchtype : "+matchtype);

            if (matchtype.matches("Custom")) {

                temp = "" + totalOver + " overs";

                if (innings.matches("multi")) {//&& totalOver != 1000)
                    if (totalOver != 1000)
                        temp = temp + " Multi innings";
                    else
                        temp = "Multi innings";
                }

                else {

                    if (totalOver != 1000)
                        temp = temp + " Single innings";
                    else
                        temp = "Single innings";
                }
            }

            else if (matchtype.matches("100")) {
                temp = "100 Balls";
            }

            else
                temp = matchtype;

            tvMatchType.setText(temp);

            Log.e("Scoring", "checkMatchType, totalOver : "+totalOver);
            Log.e("Scoring", "checkMatchType, matchtype : "+matchtype);

        }
    }


    void undo() {

        Log.d("undo", " method, currentOver : "+currentOver);
        int lo = 0;

        RealmResults<Events> results= realm.where(Events.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).findAll();

        Events lastEvent = new Events();

        if (results.isEmpty()) {
            UNDO_LIMIT = true;
            inningsNotStarted = true;
        }

        else if (UNDO_LIMIT) {
            inningsNotStarted = true;
        }

        else {

            lastEvent = results.last();
            Log.d("lastEvent", "lastEvent, 1 : " + lastEvent);
            if (lastEvent.getBallType() == 15) {
                UNDO_LIMIT = true;
                inningsNotStarted = true;
            }

            else {

                UNDO_LIMIT = false;

               /* COMMENTED ON 07/09/2021
               if (allOUT) {
                   allOUT = false;
                   endOfInnings = false;
               }

               if (endOfInnings)
                   endOfInnings = false;*/
            }
        }

        if (UNDO_LIMIT) {

            Log.d("Scoring", "undo, currentOver : "+currentOver);
            Log.d("Scoring", "undo, lastEvent : "+lastEvent);

            AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
            alertDialog.setIcon(R.drawable.ball);
            alertDialog.setCancelable(false);
            alertDialog.setTitle("Undo has reached limit");
            alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
                    new DialogInterface.OnClickListener() {

                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            btnUndo.setEnabled(false);
                            initializeBowler();
                            syncBowler();
                            inningsNotStarted = true;
                            // Added on 20/12/2021
                            modified = "";
                            udisplay = "";
                            //=== till here

                            setExtraCard(/*UNDO_LIMIT*/);
                        }
                    });

            alertDialog.show();
        }

        else if (lastEvent != null && !UNDO_LIMIT) {

            lastEventID = lastEvent.getEventID();
            if (lastEvent.getSyncstatus() == 1)
                eventSync = true;
            else
                eventSync = false;
            uinngs = lastEvent.getInnings();
            undoLastEventID = lastEventID;

//           Log.d("Scoring", "undo, lastEventId : "+lastEventID);

//           Log.d("Scoring", "undo, uinngs : " + uinngs);

            lo = (int) lastEvent.getOvers();
            ubtype = lastEvent.getBallType();
            maiden = lastEvent.isMaidenOver();
            totalBalls = lastEvent.getBalls();
            currentOver = lastEvent.getOvers();
            remainingOver = lastEvent.getRemainingOvers();
            pre_out = lastEvent.isPre_out();
            // added on 06/05/2020
            resetRemainingOver();
            remainingRuns = lastEvent.getRemainingRuns();
            remainingBalls = lastEvent.getRemainingBalls();
            wk_id = lastEvent.getWkID();
            keeper_position = lastEvent.getWk_position();
            pre_wk_id = lastEvent.getPreWkID();
            pre_wk_position = lastEvent.getPreWk_position();
            dismissedPlayrID = lastEvent.getDismissedPlayerID();
            Log.d("TEST", "undo, ubtype 1 = " + ubtype);
            Log.d("TEST", "undo, lastEvent 1 = " + lastEvent);

            // Added on 24/11/2021
//           Toast.makeText(getApplicationContext(),
//                   "" + lastEvent.getEventID(), Toast.LENGTH_SHORT).show();
            //=== till here

            if (ubtype == 0) {
                Log.d("remainingOver", "ubtype = 0, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 0, 1 : " + remainingBalls);

//               setStrikerNonStriker(lastEvent);
//               setBowler(lastEvent);
                endOver = false;
                callBowlerAlert = false; // Added on 26/11/2021
                resetValues(lastEvent, ubtype);
                Log.d("remainingOver", "ubtype = 0, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 0, 2 : " + remainingBalls);
            }

            if (ubtype == 1) {
                Log.d("Scoring", "undo, ubtype : "+ubtype+", events : "+lastEvent);

                Log.d("remainingOver", "ubtype = 1, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 1, 1 : " + remainingBalls);

                endOver = false;
                callBowlerAlert = false; // Added on 26/11/2021
                urun = lastEvent.getCurrentRun();

                setStrikerNonStriker(lastEvent);
                setBowler(lastEvent);

                ball = lastEvent.getCurrentOverBalls();
                --ball;

                currentRuns = lastEvent.getTotalRuns();
                currentRuns = currentRuns - urun;

                if (totalBalls > 0)
                    --totalBalls;
                else
                    totalBalls = 0;

//               bowlerOver = bowlerOver - 0.1f;
                if (currentOver >= 0.1f)
                    currentOver = currentOver - 0.1f;
                else
                    currentOver = 0f;

                if (currentInnings > 1 && currentInnings != 99){
                    remainingRuns = remainingRuns + urun;
                    leadingRuns = leadingRuns - urun;

                    ++remainingBalls;

                    remainingOver = remainingOver + 0.1f;
                    // added on 06/05/2020
                    resetRemainingOver();

                }

                if (strikerRuns >= urun)
                    strikerRuns = strikerRuns - urun;
                else
                    strikerRuns = 0;

                if (strikerBalls > 0)
                    --strikerBalls;
                else
                    strikerBalls = 0;

                // partnership details
                if (psRuns >= urun)
                    psRuns = psRuns - urun;
                else
                    psRuns = 0;

                if ((psBalls <= ballsPerOver) && (psBalls > 0))
                    --psBalls;
                else if (psBalls > ballsPerOver)
                    psBalls = psBalls - ballsPerOver;
                else if (psBalls == 0) {
                    psBalls = ballsPerOver - 1;
                    if (psOver > 0)
                        --psOver;
                    else
                        psOver = 0;
                }

                --psTBalls;  // Added on 28/07/2021

                if (strID == ps1ID) {
                    if (p1CR >= urun)
                        p1CR = p1CR - urun;
                    else
                        p1CR = 0;
                    if (p1CB > 0)
                        --p1CB;
                    else
                        p1CB = 0;
                } else if (strID == ps2ID) {
                    if (p2CR >= urun)
                        p2CR = p2CR - urun;
                    else
                        p2CR = 0;
                    if (p2CB > 0)
                        --p2CB;
                    else
                        p2CB = 0;
                }

                if (bwRun >= urun)
                    bwRun = bwRun - urun;
                else
                    bwRun = 0;
                // adding 04/05/2020
                if (mo >= urun)
                    mo = mo - urun;
                else
                    mo = 0;

                if (urun == 0) {

                    if (strikerDots > 0)
                        --strikerDots;
                    else
                        strikerDots = 0;

                    if (bowlerDots > 0)
                        --bowlerDots;
                    else
                        bowlerDots = 0;
                }

                // added on 06/05/2020
                undoBowlerOver();

                modified = lastEvent.getUndoDisplay();
                Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                        "Valid ball undone", Toast.LENGTH_SHORT).show();
                resetValues(lastEvent, ubtype);
                Log.d("remainingOver", "ubtype = 1, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 1, 2 : " + remainingBalls);
            }

            else if (ubtype == 2) {

                Log.d("Scoring", "undo 1, ubtype : "+ubtype+", events : "+lastEvent);
                Log.d("remainingOver", "ubtype = 2, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 2, 1 : " + remainingBalls);

                endOver = false;
                callBowlerAlert = false; // Added on 26/11/2021
                urun = lastEvent.getCurrentRun();

                setStrikerNonStriker(lastEvent);
                setBowler(lastEvent);

                ball = lastEvent.getCurrentOverBalls();
                --ball;

                if (currentRuns > 0)
                    currentRuns = currentRuns - urun;
                else
                    currentRuns = 0;

                if (totalBalls > 0)
                    --totalBalls;
                else
                    totalBalls = 0;

                if (strikerRuns >= urun)
                    strikerRuns = strikerRuns - urun;
                else
                    strikerRuns = 0;

                if (strikerBalls > 0)
                    --strikerBalls;
                else
                    strikerBalls = 0;

                if (urun == 4) {

                    if (strikerF4s > 0)
                        --strikerF4s;
                    else
                        strikerF4s = 0;

                    if (bowlerF4s > 0)
                        --bowlerF4s;
                    else
                        bowlerF4s = 0;

                }

                else if (urun == 6) {

                    if (strikerS6s > 0)
                        --strikerS6s;
                    else
                        strikerS6s = 0;

                    if (bowlerS6s > 0)
                        --bowlerS6s;
                    else
                        bowlerS6s = 0;
                }


                // partnership details
                if (psRuns >= urun)
                    psRuns = psRuns - urun;
                else
                    psRuns = 0;

                if ((psBalls <= ballsPerOver) && (psBalls > 0))
                    --psBalls;
                else if (psBalls > ballsPerOver)
                    psBalls = psBalls - ballsPerOver;
                else if (psBalls == 0) {
                    psBalls = ballsPerOver - 1;
                    if (psOver > 0)
                        --psOver;
                    else
                        psOver = 0;
                }

                --psTBalls;  // Added on 28/07/2021

                if (strID == ps1ID) {
                    if (p1CR >= urun)
                        p1CR = p1CR - urun;
                    else
                        p1CR = 0;
                    if (p1CB > 0)
                        --p1CB;
                    else
                        p1CB = 0;
                } else if (strID == ps2ID) {
                    if (p2CR >= urun)
                        p2CR = p2CR - urun;
                    else
                        p2CR = 0;
                    if (p2CB > 0)
                        --p2CB;
                    else
                        p2CB = 0;
                }


                Log.d("undo", "ubtype : "+ubtype+", psRuns : "+psRuns + ", psBalls : " + psBalls
                        + ", psOver : " + psOver + ", ballsPerOver : "+ ballsPerOver);
                Log.d("undo", "strID : "+strID + ", urun: " + urun + ", uerun : " + uerun + ", uetype : " + uetype);
                Log.d("undo", "ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : "+ p1CB);

                Log.d("undo", " ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : "+ p2CB);

//               bowlerOver = bowlerOver - 0.1f;
                if (currentOver >= 0.1f)
                    currentOver = currentOver - 0.1f;
                else
                    currentOver = 0;

                if (currentInnings > 1 && currentInnings < 99){
                    remainingRuns = remainingRuns + urun;
                    leadingRuns = leadingRuns - urun;

                    ++remainingBalls;
                    remainingOver = remainingOver + 0.1f;
                    // added on 06/05/2020
                    resetRemainingOver();
                }

                if (bwRun >= urun)
                    bwRun = bwRun - urun;
                else
                    bwRun = 0;

                // adding 04/05/2020
                if (mo >= urun)
                    mo = mo - urun;
                else
                    mo = 0;

                // added on 06/05/2020
                undoBowlerOver();


                modified = lastEvent.getUndoDisplay();
                Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                        "Boundary undone", Toast.LENGTH_SHORT).show();
                resetValues(lastEvent, ubtype);
                Log.d("remainingOver", "ubtype = 2, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 2, 2 : " + remainingBalls);
            }

            else if (ubtype == 3) {

                Log.d("TEST", "undo, ubtype 2 = " + ubtype);
                resetOUT(lastEvent);
            }

            // Added on 20/004/2021
            else if (ubtype == 4) {

                Log.d("Scoring", "undo, ubtype : "+ubtype+", events : "+lastEvent);

                remainingRuns = lastEvent.getRemainingRuns();
                remainingBalls = lastEvent.getRemainingBalls();
                remainingOver = lastEvent.getRemainingOvers();

                setStrikerNonStriker(lastEvent);
                changeStriker(false);
                setBowler(lastEvent);

                totalBalls = lastEvent.getBalls();
//               ball = lastEvent.getCurrentOverBalls();
                ball = lastEvent.getCurrentOverBalls();
                currentOver = lastEvent.getOvers();
                currentRuns = lastEvent.getTotalRuns();

                Log.d("ball", "balltype 4 & 5, ball : " + ball);
                Log.d("undo", "balltype 4 & 5, bowlerOver : " + bowlerOver);
                Log.d("undo", "balltype 4 & 5, currentOver : " + currentOver);

//               endOfOver = false;  Commented on 20/04/2021
                maiden = lastEvent.isMaidenOver();
                if (maiden) {
                    if (bowlerMO > 0)
                        --bowlerMO;
                    else
                        bowlerMO = 0;
                }
                mo = lastEvent.getMo();
                modified = lastEvent.getCurrentOver();
                Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                        "Force end over undone", Toast.LENGTH_SHORT).show();
                resetValues(lastEvent, ubtype);

                Log.d("remainingOver", "ubtype = 4|5, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 4|5, 2 : " + remainingBalls);
               /*// added on 29/07/2021
               undo();*/
            }

            // ==== till here (20/04/2021)


            else if (/*ubtype == 4 || */ubtype == 5) {   //Updated on 20/04/2021

                Log.d("Scoring", "undo, ubtype : "+ubtype+", events : "+lastEvent);

                Log.d("remainingOver", "ubtype = 4|5, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 4|5, 1 : " + remainingBalls);
                Log.d("WKT", "ubtype = 5, dismissedPlayrID : " + dismissedPlayrID);
                Log.d("WKT", "ubtype = 5, strID : " + strID);
                Log.d("WKT", "ubtype = 5, nstrID : " + nstrID);

                remainingRuns = lastEvent.getRemainingRuns();
                remainingBalls = lastEvent.getRemainingBalls();
                remainingOver = lastEvent.getRemainingOvers();
                // added on 06/05/2020
                resetRemainingOver();

                endOver = true;
                undo = true;

                setStrikerNonStriker(lastEvent);
                changeStriker(false);
                setBowler(lastEvent);

                if (bowlerBalls == 0) {
                    if (bowlerOver > 0)
                        --bowlerOver;
                    else
                        bowlerOver = 0;

                    if (bowlerOver >= 0)
                        bowlerBalls = ballsPerOver;
                }
//               else if (bowlerBalls > 0 && bowlerBalls <= ballsPerOver) {
//                   --bowlerBalls;
//               }
                else if (bowlerBalls > ballsPerOver) {
                    bowlerBalls = bowlerBalls - ballsPerOver;
                    if (bowlerOver > 0)
                        --bowlerOver;
                    else
                        bowlerOver = 0;
                }
//               bowlerOver = lastEvent.getTbo();
//               bowlerOver = lastEvent.getBowlerOver();


                totalBalls = lastEvent.getBalls();
//               ball = lastEvent.getCurrentOverBalls();
                ball = lastEvent.getTemp_balls();
                currentOver = lastEvent.getTco();
                currentRuns = lastEvent.getTotalRuns();

                Log.d("ball", "balltype 4 & 5, ball : " + ball);
                Log.d("undo", "balltype 4 & 5, bowlerOver : " + bowlerOver);
                Log.d("undo", "balltype 4 & 5, currentOver : " + currentOver);

                endOfOver = false;
                callBowlerAlert = true; // Added on 26/11/2021
                maiden = lastEvent.isMaidenOver();
                if (maiden) {
                    if (bowlerMO > 0)
                        --bowlerMO;
                    else
                        bowlerMO = 0;
                }
                mo = lastEvent.getMo();
                modified = lastEvent.getUndoDisplay();

                // Added condition on 29/07/2021
                if (!HUNDRED) {
                    if (ball == ballsPerOver) {
                        efo = true;
                        UNDO = true;
                        callEndOfOverAlert();
                    } else
                        efo = false;
                }

                if (!HUNDRED)
                    Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                            "End over undone", Toast.LENGTH_SHORT).show();
                resetValues(lastEvent, ubtype);

                Log.d("remainingOver", "ubtype = 4|5, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 4|5, 2 : " + remainingBalls);
                // added on 29/07/2021
                if (HUNDRED)
                    undo();
            }


            else if (ubtype == 6) {

                // Added on 30/08/2021
                changeBowlerUndoAlert(lastEvent, "If you are looking for change bowler, \npress CHANGE BOWLER else NO");

                Log.d("remainingOver", "ubtype = 6, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 6, 1 : " + remainingBalls);
/*
                Commented on 30/08/2021

               player_in_id = 0;
               endOver = false;
               Log.d("Scoring", "undo, ubtype : "+ubtype+", events : "+lastEvent);
               int bid = lastEvent.getNewBowlerID();

               Bowler bow = realm.where(Bowler.class).
                       equalTo("matchid", matchid).
                       equalTo("innings", currentInnings).
                       equalTo("team", fieldingTeamNo).
                       equalTo("playerID", bid).findFirst();
//               Log.d("undobow", "bowler bt 6, : " + bow);
               Log.d("HUNDRED", "undo 1, bow = " + bow);
               if (bow != null) {

                   if ((bow.getBalls() == 0) && (bow.getRuns() == 0) &&
                           (bow.getNoBalls() == 0) && (bow.getWides() == 0)) {

                       if (!realm.isInTransaction()) {
                           realm.beginTransaction();
                       }

                       bow.deleteFromRealm();
                       realm.commitTransaction();
                   }
               }


               setStrikerNonStriker(lastEvent);

               currentOver = lastEvent.getOvers();

               Log.e("Scoring", "Undo, ubtype = "+ubtype+", resetBowler : "+resetBowler);
               Log.e("Scoring", "Undo, currentOver : "+currentOver);

//               if (currentOver == 1.0f || currentOver == 0.6f){
//
//                   if (resetBowler){

                       String temp = bowler;
                       int tID = bowlerID;
                       bowler = preBowler;
                       bowlerID = preBowlerID;
//                       ===============================================================================================================








//                       ================================================================================================================
//                       bowlerNoBall = 0;
//                       bowlerWide = 0;

                       Bowler bowler = realm.where(Bowler.class).
                               equalTo("matchid", matchid).
                               equalTo("innings", currentInnings).
                               equalTo("team", fieldingTeamNo).
                               equalTo("playerID", bowlerID).findFirst();
               Log.d("HUNDRED", "undo 2, bow = " + bow);

               Log.d("undo", "bowler bt 6.1, : " + bow);

                       Log.e("Scoring", "Undo, ubtype = "+ubtype+", bowler : "+bowler);



                       if (bowler != null) {

                           bwRun = bowler.getRuns();//lastEvent.getBowlerRuns();
                           bowlerBalls = bowler.getBalls();//lastEvent.getBowlerBalls();
                           bt_balls = bowler.getTotalBalls(); // Added on 26/07/2021
                           bowlerOver = bowler.getOver();//lastEvent.getBowlerOver();
                           bowlerWicket = bowler.getWicket();//lastEvent.getBowlerWicket();
                           bowlerDots = bowler.getDots();
                           bowlerF4s = bowler.getF4s();
                           bowlerS6s = bowler.getS6s();
                           bowlerNoBall = bowler.getNoBalls();
                           bowlerWide = bowler.getWides();
                           bowlerMO = bowler.getMaidenOver();
                       }

                       if (currentOver == 1.0f || currentOver == 0.6f) {
                           preBowlerID = 0;
                           preBowler = null;
                       }

                       else if (lastPreBowlerID > 0){
                           preBowlerID = lastPreBowlerID;
                           preBowler = realm.where(Player.class).
                                   equalTo("matchid", matchid).
                                   equalTo("team", fieldingTeamNo).
                                   equalTo("playerID", preBowlerID).findFirst().getPlayerName();

                           Bowler pbow = realm.where(Bowler.class).
                                   equalTo("matchid", matchid).
                                   equalTo("innings", currentInnings).
                                   equalTo("team", fieldingTeamNo).
                                   equalTo("playerID", bowlerID).findFirst();

                           Log.e("Scoring", "Undo, ubtype = "+ubtype+", bowler : "+bowler);



                           if (bowler != null) {

                               preBowlerRun = pbow.getRuns();//lastEvent.getBowlerRuns();
                               preBowlerBalls = pbow.getBalls();//lastEvent.getBowlerBalls();
                               preBowlerOver = pbow.getOver();//lastEvent.getBowlerOver();
                               preBowlerWicket = pbow.getWicket();//lastEvent.getBowlerWicket();
                               pbt_balls = pbow.getTotalBalls();    // added on 28/07/2021
                               preBowlerDots = pbow.getDots();      // added on 28/07/2021
//                               preBowlerDots = pbow.getDots();
//                               preBowlerF4s = pbow.getF4s();
//                               preBowlerS6s = pbow.getS6s();
//                               preBowlerNoball = pbow.getNoBalls();
//                               preBowlerWide = pbow.getWides();
                               preBowlerMO = pbow.getMaidenOver();
                           }
                       }
//                       nextBowlerID = tID;
//                       nextBowler = temp;
//                   }
//               }

               modified = lastEvent.getCurrentOver();

               resetValues(lastEvent, ubtype);

               Log.d("remainingOver", "ubtype = 2, 6 : " + remainingOver);
               Log.d("remainingBalls", "ubtype = 2, 6 : " + remainingBalls);*/

              /* Commented on 30/08/2021
              // added on 06/05/2020
               undo();*/


            }

            else if (ubtype == 7) {

                changeBatsmanUndoAlert(lastEvent, "If you are looking for change batsman, \npress CHANGE BATSMAN else NO"); // Added on 30/08/2021


/*
               Log.d("Scoring", "undo, ubtype : "+ubtype+", events : "+lastEvent);
               Log.d("remainingOver", "ubtype = 7, 1 : " + remainingOver);
               Log.d("remainingBalls", "ubtype = 7, 1 : " + remainingBalls);
               endOver = false;
               int newBatsmanID = lastEvent.getDisNewBatsmanID();

               Log.d("undo", "ubtype : 7,  newBatsmanID : "+newBatsmanID);
               Log.d("undo", "ubtype : 7,  getDismissedPlayerID : "+lastEvent.getDismissedPlayerID());

               Batsman batsmann = realm.where(Batsman.class).
                       equalTo("matchid", matchid).
                       equalTo("team", battingTeamNo).
                       equalTo("innings", currentInnings).
                       equalTo("batsman_pID", newBatsmanID).findFirst();
*//*
               Realm realm = null;
               try {
                    config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);*//*
                   realm.executeTransaction(new Realm.Transaction() {
                       @Override
                       public void execute(Realm bgRealm) {

                           try {

//                               if (!batsmann.isRetired()) {

                               if (batsmann != null) {

                                   batsmann.setToBeBatted(true);
                                   batsmann.setPlaying(false);
                                   batsmann.setRetired(false);
                                   batsmann.setRuns(0);
                                   batsmann.setBalls(0);
                                   batsmann.setS6s(0);
                                   batsmann.setF4s(0);
                                   batsmann.setOut(false);
                                   batsmann.setBattingOrder(100);
//                                   bgRealm.insertOrUpdate(batsmann);
//                               }

                                   bgRealm.copyToRealm(batsmann);
                               }
                               Log.d("batsmann", "after undo , ubtype = " + ubtype +

                                        ", batsmann : " + batsmann.toString());


                           } catch (RealmPrimaryKeyConstraintException e) {
                               Toast.makeText(getApplicationContext(),
                                       "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                           }
                       }
                   });


                config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
               Batsman batsman = realm.where(Batsman.class).
                       equalTo("matchid", matchid).
                       equalTo("innings", currentInnings).
                       equalTo("team", battingTeamNo).
                       equalTo("batsman_pID", lastEvent.getDismissedPlayerID()).findFirst();

               if (batsman != null) {
                   Log.d("UNDO", " balltype 7, batsman is not null");

                   strID = lastEvent.getStrikerID();
                   nstrID = lastEvent.getNonStrikerID();
                   if (strID == newBatsmanID) {
                       strID = lastEvent.getDismissedPlayerID();
                       striker = realm.where(Player.class).
                               equalTo("matchid", matchid).
                               equalTo("team", battingTeamNo).
                               equalTo("playerID", strID).findFirst().getPlayerName();
                       strikerRuns = batsman.getRuns();
                       strikerBalls = batsman.getBalls();
                       strikerDots = batsman.getDots();
                       strikerF4s = batsman.getF4s();
                       strikerS6s = batsman.getS6s();

                   }

                   else if (nstrID == newBatsmanID) {
                       nstrID = lastEvent.getDismissedPlayerID();
                       nonStriker = realm.where(Player.class).
                               equalTo("matchid", matchid).
                               equalTo("team", battingTeamNo).
                               equalTo("playerID", nstrID).findFirst().getPlayerName();
                       nonStrikerRuns = batsman.getRuns();
                       nonStrikerBalls = batsman.getBalls();
                       nonStrikerDots = batsman.getDots();
                       nonStrikerF4s = batsman.getF4s();
                       nonStrikerS6s = batsman.getS6s();
                   }


                   Log.d("undo", "1 ubtype : " + ubtype + ", newBatsmanID : " + newBatsmanID +
                           ", dismissedID : " + lastEvent.getDismissedPlayerID());
                   Log.d("undo", "1 ubtype : " + ubtype + ", strID : " + strID + ", strikerRuns : " + strikerRuns +
                           ", strikerBalls : " + strikerBalls + ", strikerDots : " + strikerDots + ", strikerF4s : " + strikerF4s +
                           ", strikerS6s : " + strikerS6s);

                   Log.d("undo", "1 ubtype : " + ubtype + ", nstrID : " + nstrID + ", nonStrikerRuns : " + nonStrikerRuns +
                           ", nonStrikerBalls : " + nonStrikerBalls + ", nonStrikerDots : " + nonStrikerDots +
                           ", nonStrikerF4s : " + nonStrikerF4s + ", nonStrikerS6s : " + nonStrikerS6s);

                   Log.d("undo", "1 ubtype : " + ubtype + ", player1ID : " + player1ID + ", player1Runs : " + player1Runs +
                           ", player1Balls : " + player1Balls + ", player1Dots : " + player1Dots +
                           ", player1F4s : " + player1F4s + ", player1S6s : " + player1S6s);

                   Log.d("undo", "1 ubtype : " + ubtype + ", player2ID : " + player2ID + ", player2Runs : " + player2Runs +
                           ", player2Balls : " + player2Balls + ", player2Dots : " + player2Dots +
                           ", player2F4s : " + player2F4s + ", player2S6s : " + player2S6s);

                   if (player1ID == newBatsmanID)
                       player1ID = lastEvent.getDismissedPlayerID();
                   else if (player2ID == newBatsmanID)
                       player2ID = lastEvent.getDismissedPlayerID();

                   if (player1ID == strID && player2ID == nstrID) {
                       Log.d("undo", "3 player1ID : " + player1ID + ", newBatsmanID : " + newBatsmanID +
                               ", dismissedID : " + lastEvent.getDismissedPlayerID());

                       player1Runs = strikerRuns;
                       player1Balls = strikerBalls;
                       player1Dots = strikerDots;
                       player1F4s = strikerF4s;
                       player1S6s = strikerS6s;

                       player2Runs = nonStrikerRuns;
                       player2Balls = nonStrikerBalls;
                       player2Dots = nonStrikerDots;
                       player2F4s = nonStrikerF4s;
                       player2S6s = nonStrikerS6s;
                   }

                  else if (player2ID == strID && player1ID == nstrID) {
                       Log.d("undo", "4 player2ID : " + player2ID + ", newBatsmanID : " + newBatsmanID +
                               ", dismissedID : " + lastEvent.getDismissedPlayerID());
                       player2Runs = strikerRuns;
                       player2Balls = strikerBalls;
                       player2Dots = strikerDots;
                       player2F4s = strikerF4s;
                       player2S6s = strikerS6s;

                       player1Runs = nonStrikerRuns;
                       player1Balls = nonStrikerBalls;
                       player1Dots = nonStrikerDots;
                       player1F4s = nonStrikerF4s;
                       player1S6s = nonStrikerS6s;
                   }

                   Log.d("undo", "2 ubtype : " + ubtype + ", newBatsmanID : " + newBatsmanID +
                           ", dismissedID : " + lastEvent.getDismissedPlayerID());
                   Log.d("undo", "2 strID : " + strID + ", strikerRuns : " + strikerRuns +
                           ", strikerBalls : " + strikerBalls + ", strikerDots : " + strikerDots + ", strikerF4s : " + strikerF4s +
                           ", strikerS6s : " + strikerS6s);

                   Log.d("undo", "2 nstrID : " + nstrID + ", nonStrikerRuns : " + nonStrikerRuns +
                           ", nonStrikerBalls : " + nonStrikerBalls + ", nonStrikerDots : " + nonStrikerDots +
                           ", nonStrikerF4s : " + nonStrikerF4s + ", nonStrikerS6s : " + nonStrikerS6s);

                   Log.d("undo", "2 player1ID : " + player1ID + ", player1Runs : " + player1Runs +
                           ", player1Balls : " + player1Balls + ", player1Dots : " + player1Dots +
                           ", player1F4s : " + player1F4s + ", player1S6s : " + player1S6s);

                   Log.d("undo", "2 player2ID : " + player2ID + ", player2Runs : " + player2Runs +
                           ", player2Balls : " + player2Balls + ", player2Dots : " + player2Dots +
                           ", player2F4s : " + player2F4s + ", player2S6s : " + player2S6s);
               }

               else
                   Log.d("UNDO", " balltype 7, batsman is null");





               //resetting partnership

               if (ps1ID == newBatsmanID)
                   ps1ID = lastEvent.getDismissedPlayerID();
               else if (ps2ID == newBatsmanID)
                   ps2ID = lastEvent.getDismissedPlayerID();

               RealmResults<Partnership> results1 = realm.where(Partnership.class).
                       equalTo("matchid", matchid).
                       equalTo("innings", currentInnings).
                       equalTo("wicket", (wicket + 1)).findAll();

               if (results1.isEmpty())
                   Log.d("Partnership", "undo ubtype 7, results1 : " + results1);
               else {
                   Partnership partnership1 = results1.last();
                   Log.d("Partnership", "undo ubtype 7, partnership1 : " + partnership1);

                   if (partnership1 != null) {
                       if (!realm.isInTransaction()) {
                           realm.beginTransaction();
                       }
                       partnership1.deleteFromRealm();
                       realm.commitTransaction();
                   }
               }

               RealmResults<Partnership> results2 = realm.where(Partnership.class).
                       equalTo("matchid", matchid).
                       equalTo("innings", currentInnings).findAll();

               if (results2.isEmpty())
                   Log.d("Partnership", "undo ubtype 7, results2 : " + results2);
               else {
                   Partnership partnership = results2.last();
                   Log.d("Partnership", "undo ubtype 7, results2 : " + results2);
                   if (partnership.getDismissedPlayerID() == lastEvent.getDismissedPlayerID()) {

                       psRuns = partnership.getPartnershipRuns();
                       psBalls = partnership.getPartnershipBalls();
                       psTBalls = partnership.getPartnershipTotalBalls();   // Added on 28/07/2021
                       psOver = partnership.getPartnershipOver();

                       if (ps1ID == partnership.getPlayer1ID()) {
                           p1CB = partnership.getPlayer1ContributionBalls();
                           p1CR = partnership.getPlayer1ContributionRuns();
                       }
                       else if (ps2ID == partnership.getPlayer1ID()) {
                           p2CB = partnership.getPlayer1ContributionBalls();
                           p2CR = partnership.getPlayer1ContributionRuns();
                       }

                       if (ps1ID == partnership.getPlayer2ID()) {
                           p1CB = partnership.getPlayer2ContributionBalls();
                           p1CR = partnership.getPlayer2ContributionRuns();
                       }
                       else if (ps2ID == partnership.getPlayer2ID()) {
                           p2CB = partnership.getPlayer2ContributionBalls();
                           p2CR = partnership.getPlayer2ContributionRuns();
                       }
                   }
               }






//               modified = lastEvent.getCurrentOver();
//               udisplay = lastEvent.getUndoDisplay();
//               modified = lastEvent.getUndoDisplay();

               // commented on 11/05/2020
               *//*resetOUT(lastEvent);*//*
               Log.d("event", "undo ubtype = 7, lastEvent : " + lastEvent);

               // commented on 11/05/2020
               *//*if (pre_interval)
                   resetValues(lastEvent, ubtype);*//*

               pre_interval = false;

               Log.d("remainingOver", "ubtype = 7, 2 : " + remainingOver);
               Log.d("remainingBalls", "ubtype = 7, 2 : " + remainingBalls);
//               resetOUT(lastEvent);

               resetValues(lastEvent, ubtype);
//               undo();    commented on 30/08/2021*/

            }

            else if (ubtype == 8) {

                Log.d("Scoring", "undo, ubtype : "+ubtype+", events : "+lastEvent);

                Log.d("remainingOver", "ubtype = 8, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 8, 1 : " + remainingBalls);

                endOver = false;
                setStrikerNonStriker(lastEvent);
                setBowler(lastEvent);

                uetype = lastEvent.getExtraType();       // extra type
                uerun = lastEvent.getExtraRuns();        // extra run
                urun = lastEvent.getCurrentRun();        // run or runs off bat
                // Added on 01/12/2021
                upt = lastEvent.getPenaltyType();        // penalty type
                Log.d("PENALTY", "modified = " + lastEvent.getCurrentOver());
                Log.d("PENALTY", "undoDisplay = " + lastEvent.getUndoDisplay());
                Log.d("PENALTY", "undoDisplay = " + lastEvent.getPenaltyType());
                // === till here

                Log.d("PENALTY", "strID = " + strID + ", strRuns = " + strikerRuns +
                        ", StrBalls = " + strikerBalls + ", strDots = " + strikerDots);

                Log.d("PENALTY", "nstrID = " + nstrID + ", nstrRuns = " + nonStrikerRuns +
                        ", nstrBalls = " + nonStrikerBalls + ", nsstrDots = " + nonStrikerDots);

                Log.d("PENALTY", "bowID = " + bowlerID + ", bwRuns = " + bwRun +
                        ", bwBalls = " + bowlerBalls + ", bwDots = " + bowlerDots);

                Log.d("undo", "ubtype : " + ubtype + ", uetype : " + uetype
                        + ", uerun : " + uerun + ", urun : " + urun + ", upt : " + upt);

                if (uetype == 0 || uetype == 1) {

                    // Added on 01/12/2021
                    if (upt == 1) {
                        if (((uerun - penaltyRun) % 2) != 0)
                            swap();
                    }
                    else {   // === till here
                        if ((uerun % 2) != 0)
                            swap();
                    }

                    // added on 06/05/2020
                    undoBowlerOver();

//                   bowlerOver = bowlerOver - 0.1f;

                    if ((ball <= ballsPerOver) && (ball > 0))
                        --ball;
                    else if (ball > ballsPerOver)
                        ball = ball - ballsPerOver;
//                   else if (ball == 0)
//                       ball = ballsPerOver;


                    if (strikerBalls > 0)
                        --strikerBalls;
                    else
                        strikerBalls = 0;

                    if (totalBalls > 0)
                        --totalBalls;
                    else
                        totalBalls = 0;

                    if (currentOver >= 0.1f)
                        currentOver = currentOver - 0.1f;
                    else
                        currentOver = 0f;

                    if (currentRuns >= uerun)
                        currentRuns = currentRuns - uerun;
                    else
                        currentRuns = 0;

                    // partnership undo
                    if ((psBalls <= ballsPerOver) && (psBalls > 0))
                        --psBalls;
                    else if (psBalls > ballsPerOver)
                        psBalls = psBalls - ballsPerOver;
                    else if (psBalls == 0) {
                        psBalls = ballsPerOver - 1;
                        if (psOver > 0)
                            --psOver;
                        else
                            psOver = 0;
                    }

                    --psTBalls;  // Added on 28/07/2021

                    if (psRuns >= uerun)
                        psRuns = psRuns - uerun;
                    else
                        psRuns = 0;

                    if (ps1ID == strID){
                        if (p1CB > 0)
                            --p1CB;
                        else
                            p1CB = 0;
                    }
                    else if (ps2ID == strID){
                        if (p2CB > 0)
                            --p2CB;
                        else
                            p2CB = 0;
                    }

                  /* Log.d("undo", "b4 swap, ubtype : "+ubtype+", uetype : "+uetype + ", strID : " + strID
                           + ", ps1ID : " + ps1ID + ", ps2ID : "+ ps2ID);*/


                    Log.d("undo", "after swap, ubtype : "+ubtype+", uetype : "+uetype + ", strID : " + strID
                            + ", ps1ID : " + ps1ID + ", ps2ID : "+ ps2ID + ", currentRuns : " + currentRuns +
                            ", currentOver : " + currentOver);

                    if (currentInnings > 1 && currentInnings < 99){

                        remainingRuns = remainingRuns + uerun;
                        ++remainingBalls;
                        remainingOver = remainingOver + 0.1f;
                        // added on 06/05/2020
                        resetRemainingOver();
                    }

                    modified = lastEvent.getUndoDisplay();

                    Log.d("undo", "ubtype : "+ubtype+", psRuns : "+psRuns + ", psBalls : " + psBalls
                            + ", psOver : " + psOver + ", ballsPerOver : " + ballsPerOver +
                            ", currentRuns : " + currentRuns + ", currentOver : " + currentOver);
                    Log.d("undo", "strID : "+strID + ", urun: " + urun + ", uerun : " + uerun +
                            ", uetype : " + uetype + ", uout : " + uout);
                    Log.d("undo", "ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : "+ p1CB);

                    Log.d("undo", " ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : "+ p2CB);
//                   tvCurrentOver.setText(modified);

                }

                // Added on 01/12/2021
                else if (uetype == 2) {

                    Log.d("undo", " uetype : " + uetype + ", upt : " + upt +
                            ", uerun : "+ uerun);

                    if (upt == 1) {

                        Log.d("undo", "upt == 1");

                        if (bwRun >= (uerun - penaltyRun))
                            bwRun = bwRun - (uerun - penaltyRun);
                        else
                            bwRun = 0;

                    } else {

                        if (bwRun >= uerun)//noballRun)
                            bwRun = bwRun - uerun;//noballRun;
                        else
                            bwRun = 0;
                    }

                   /*if (bwRun >= noballRun)
                       bwRun = bwRun - noballRun;
                   else
                       bwRun = 0;*/

                    if (mo >= uerun)//noballRun)
                        mo = mo - uerun;//noballRun;
                    else
                        mo = 0;

                    if (currentRuns >= uerun)//noballRun)
                        currentRuns = currentRuns - uerun;//noballRun;
                    else
                        currentRuns = 0;

                    if (psRuns >= uerun)//noballRun)
                        psRuns = psRuns - uerun;//noballRun;
                    else
                        psRuns = 0;

                    if (currentInnings > 1 && currentInnings < 99){
                        remainingRuns = remainingRuns + uerun;//noballRun;
                    }

                    if (bowlerNoBall > 0)
                        --bowlerNoBall;
                    else
                        bowlerNoBall = 0;

                    modified = lastEvent.getUndoDisplay();
                }
                // === till here


                else if (/*uetype == 2 || */uetype == 7 || uetype == 8) {


                    if ((urun % 2) != 0)
                        swap();

                    if (bwRun >= (noballRun + urun))
                        bwRun = bwRun - noballRun - urun;
                    else
                        bwRun = 0;

                    // adding 04/05/2020
                    if (mo >= (/*noballRun*/uerun + urun))
                        mo = mo - /*noballRun*/uerun - urun;
                    else
                        mo = 0;

                    if (bowlerNoBall > 0)
                        --bowlerNoBall;
                    else
                        bowlerNoBall = 0;

//                       if (urun > 0) {
                    if (strikerBalls > 0)
                        --strikerBalls;
                    else
                        strikerBalls = 0;

                    if (strikerRuns >= urun)
                        strikerRuns = strikerRuns - urun;
                    else
                        strikerRuns = 0;

                    if (ps1ID == strID) {
                        if (p1CR >= urun)
                            p1CR = p1CR - urun;
                        else
                            p1CR = 0;

                        if (p1CB > 0)
                            --p1CB;
                        else
                            p1CB = 0;
                    } else if (ps2ID == strID) {
                        if (p2CR >= urun)
                            p2CR = p2CR - urun;
                        else
                            p2CR = 0;

                        if (p2CB > 0)
                            --p2CB;
                        else
                            p2CB = 0;

                    }

//                       }

                    if (currentRuns >= (/*noballRun*/uerun + urun))
                        currentRuns = currentRuns - /*noballRun*/uerun - urun;
                    else
                        currentRuns = 0;

                    if (psRuns >= (/*noballRun*/uerun + urun))
                        psRuns = psRuns - (/*noballRun*/uerun + urun);
                    else
                        psRuns = 0;


                    if (urun == 0) {

                        if (strikerDots > 0)
                            --strikerDots;
                        else
                            strikerDots = 0;

                        if (bowlerDots > 0)
                            --bowlerDots;
                        else
                            bowlerDots = 0;
                    }


                    else if (urun == 4) {

                        if (bowlerF4s > 0)
                            --bowlerF4s;
                        else
                            bowlerF4s = 0;

                        if (strikerF4s > 0)
                            --strikerF4s;
                        else
                            strikerF4s = 0;
                    }

                    else if (urun == 6) {

                        if (bowlerS6s > 0)
                            --bowlerS6s;
                        else
                            bowlerS6s = 0;

                        if (strikerS6s > 0)
                            --strikerS6s;
                        else
                            strikerS6s = 0;
                    }

                    if (currentInnings > 1 && currentInnings < 99){
                        remainingRuns = remainingRuns + urun + uerun/*noballRun*/;
                    }

                    modified = lastEvent.getUndoDisplay();


                    Log.d("undo", "ubtype : "+ubtype+", psRuns : "+psRuns + ", psBalls : " + psBalls
                            + ", psOver : " + psOver + ", ballsPerOver : "+ ballsPerOver);
                    Log.d("undo", "strID : "+strID + ", urun: " + urun + ", uerun : " + uerun +
                            ", uetype : " + uetype + ", uout : " + uout);

                    Log.d("undo", " player1ID : " + player1ID + ", player1Runs : " +
                            player1Runs + ", player1Balls : "+ player1Balls);

                    Log.d("undo", " player2ID : " + player2ID + ", player2Runs : " +
                            player2Runs + ", player2Balls : "+ player2Balls);

                    Log.d("undo", "ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : "+ p1CB);

                    Log.d("undo", " ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : "+ p2CB);

                }

                else if (uetype == 3 || uetype == 6) {

                    // Added on 01/12/2021
                    if (upt == 1) {
                        if (((uerun - penaltyRun - noballRun) % 2) != 0)
                            swap();
                    } else {
                        if (((uerun - noballRun) % 2) != 0)
                            swap();
                    }

                    if (bowlerNoBall > 0)
                        --bowlerNoBall;
                    else
                        bowlerNoBall = 0;

                    if (strikerBalls > 0)
                        --strikerBalls;
                    else
                        strikerBalls = 0;

                    if (ps1ID == strID){
                        if (p1CB > 0)
                            --p1CB;
                        else
                            p1CB = 0;
                    }
                    else if (ps2ID == strID){
                        if (p2CB > 0)
                            --p2CB;
                        else
                            p2CB = 0;
                    }

                    if (upt == 1) {

                        if (bwRun >= (uerun - penaltyRun))//noballRun)
                            bwRun = bwRun - (uerun - penaltyRun);//noballRun;
                        else
                            bwRun = 0;
                    } else {

                        if (bwRun >= uerun)//noballRun)
                            bwRun = bwRun - uerun;//noballRun;
                        else
                            bwRun = 0;
                    }


                    // adding 04/05/2020
                    if (mo >= uerun)//noballRun)
                        mo = mo - uerun;//noballRun;
                    else
                        mo = 0;

                    if (currentRuns >= uerun)
                        currentRuns = currentRuns - uerun;
                    else
                        currentRuns = 0;

                    if (psRuns >= uerun)
                        psRuns = psRuns - uerun;
                    else
                        psRuns = 0;

                    if (currentInnings > 1 && currentInnings < 99){
                        remainingRuns = remainingRuns + uerun;
                    }

                    modified = lastEvent.getUndoDisplay();

                    Log.d("undo", "ubtype : "+ubtype+", psRuns : "+psRuns + ", psBalls : " + psBalls
                            + ", psOver : " + psOver + ", ballsPerOver : "+ ballsPerOver);
                    Log.d("undo", "strID : "+strID + ", urun: " + urun + ", uerun : " + uerun + ", uetype : " + uetype + ", uout : " + uout);
                    Log.d("undo", "ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : "+ p1CB);

                    Log.d("undo", " ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : "+ p2CB);

                }

                else if (uetype == 4) {

                    // Added on 01/12/2021
                    if (upt == 1) {
                        if (bowlerWide >= (uerun - penaltyRun))
                            bowlerWide = bowlerWide - (uerun - penaltyRun);
                        else
                            bowlerWide = 0;

                        if (bwRun >= (uerun - penaltyRun))
                            bwRun = bwRun - (uerun - penaltyRun);
                        else
                            bwRun = 0;

                        if (((uerun - penaltyRun - wideRun) % 2) != 0)
                            swap();
                    }
                    else  {  // === till here
                        if (bowlerWide >= uerun)
                            bowlerWide = bowlerWide - uerun;
                        else
                            bowlerWide = 0;

                        if (bwRun >= uerun)
                            bwRun = bwRun - uerun;
                        else
                            bwRun = 0;

                        if (((uerun - wideRun) % 2) != 0)
                            swap();
                    }

                    if (currentRuns >= uerun)
                        currentRuns = currentRuns - uerun;
                    else
                        currentRuns = 0;

                    if (psRuns >= uerun)
                        psRuns = psRuns - uerun;
                    else
                        psRuns = 0;

                    // added on 04/05/2020
                    if (mo >= uerun)
                        mo = mo - uerun;
                    else
                        mo = 0;

                    if (currentInnings > 1 && currentInnings < 99){
                        remainingRuns = remainingRuns + uerun;
                    }

                    modified = lastEvent.getUndoDisplay();

                    Log.d("undo", "ubtype : "+ubtype+", psRuns : "+psRuns + ", psBalls : " + psBalls + ", psOver : " + psOver + ", ballsPerOver : "+ ballsPerOver);
                    Log.d("undo", "strID : "+strID + ", urun: " + urun + ", uerun : " + uerun + ", uetype : " + uetype + ", uout : " + uout);
                    Log.d("undo", "ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : "+ p1CB);

                    Log.d("undo", " ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : "+ p2CB);
                }

                else if (uetype == 5) {

                    Log.d("Penalty", "lastEvent : " + lastEvent);

//                 uptype = lastEvent.getPenaltyType();
//                 upteam = lastEvent.getPenaltyRunTeam();

                    RealmResults<Penalty> result= realm.where(Penalty.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).findAll();

                    Log.d("undo", " Penalty : " + result);

                    if (results.isEmpty()) {

                    }

                    else {
                        Penalty penaltylast = result.last();

                        if (penaltylast != null) {

                            uptype = penaltylast.getType();
                            boolean ballcount = penaltylast.isBallCount();
                            boolean ubowball = penaltylast.isBowball();
                            boolean ubatsball = penaltylast.isBatsball();
//                           setExtras();

//======================================================================================================================================

                            if (uptype == 1) {

//                savePenalty(penaltyType, penaltyRunTeam, true, battingTeamNo);
                                // didn't removed it when both undo & cancel
                                if (totalExtras >= penaltyRun)
                                    totalExtras = totalExtras - penaltyRun;
                                else
                                    totalExtras = 0;

                                if (currentRuns >= penaltyRun)
                                    currentRuns = currentRuns - penaltyRun;
                                else
                                    currentRuns = 0;

                                if (psRuns >= penaltyRun)
                                    psRuns = psRuns - penaltyRun;
                                else
                                    psRuns = 0;

                                setInningsRuns(currentInnings, currentRuns);

                                if (currentInnings > 1 && currentInnings != 99){
                                    remainingRuns = remainingRuns + penaltyRun;
//                               if (leadingRuns < 0)
                                    leadingRuns = leadingRuns - penaltyRun;

                                }

                                modified = lastEvent.getUndoDisplay();   // Added on 21/12/2021
                            }

                            else if (uptype == 2) {

                            }

//                           penalty;

                            if (ballcount) {

                                Log.d("P8", "1 strikerBalls = " + strikerBalls);
                                Log.d("P8", "1 strikerDots = " + strikerDots);
                                Log.d("P8", "1 p1CB = " + p1CB);
                                Log.d("P8", "1 p2CB = " + p2CB);
                                Log.d("P8", "1 bowlerBalls = " + bowlerBalls);
                                Log.d("P8", "1 bowlerOver = " + bowlerOver);
                                Log.d("P8", "1 bowlerDots = " + bowlerDots);
                                Log.d("P8", "1 totalBalls = " + totalBalls);
                                Log.d("P8", "1 currentOver = " + currentOver);
                                Log.d("P8", "1 psBalls = " + psBalls);
                                Log.d("P8", "1 remainingBalls = " + remainingBalls);

                                if (strikerBalls > 0)
                                    strikerBalls--;
                                else
                                    strikerBalls = 0;

                                if (strikerDots > 0)
                                    --strikerDots;
                                else
                                    strikerDots = 0;

                                if (ps1ID == strID){
                                    if (p1CB > 0)
                                        --p1CB;
                                    else
                                        p1CB = 0;
                                }
                                else if (ps2ID == strID){
                                    if (p2CB > 0)
                                        --p2CB;
                                    else
                                        p2CB = 0;
                                }

//                                   if (ubowball) {

                                // added on 06/05/2020
                                undoBowlerOver();

                                if (bowlerDots > 0)
                                    -- bowlerDots;
                                else
                                    bowlerDots = 0;
//                               bowlerOver = bowlerOver - 0.1f;

                                if (totalBalls > 0)
                                    --totalBalls;
                                else
                                    totalBalls = 0;

                                if (currentOver >= 0.1f)
                                    currentOver = currentOver - 0.1f;
                                else
                                    currentOver = 0;

                                if ((psBalls <= ballsPerOver) && (psBalls > 0))
                                    --psBalls;
                                else if (psBalls > ballsPerOver)
                                    psBalls = psBalls - ballsPerOver;
                                else if (psBalls == 0) {
                                    psBalls = ballsPerOver - 1;
                                    if (psOver > 0)
                                        --psOver;
                                    else
                                        psOver = 0;
                                }

                                --psTBalls;  // Added on 28/07/2021

                                if (currentInnings > 1 && currentInnings < 99){
                                    ++remainingBalls;
                                    remainingOver = remainingOver + 0.1f;
                                    // added on 06/05/2020
                                    resetRemainingOver();


                                    Log.d("P8", "2 strikerBalls = " + strikerBalls);
                                    Log.d("P8", "2 strikerDots = " + strikerDots);
                                    Log.d("P8", "2 p1CB = " + p1CB);
                                    Log.d("P8", "2 p2CB = " + p2CB);
                                    Log.d("P8", "2 bowlerBalls = " + bowlerBalls);
                                    Log.d("P8", "2 bowlerOver = " + bowlerOver);
                                    Log.d("P8", "2 bowlerDots = " + bowlerDots);
                                    Log.d("P8", "2 totalBalls = " + totalBalls);
                                    Log.d("P8", "2 currentOver = " + currentOver);
                                    Log.d("P8", "2 psBalls = " + psBalls);
                                    Log.d("P8", "2 remainingBalls = " + remainingBalls);
                                }
//                                   }
                            }

                            removeFromPenalty();
                        }
                    }

//                       modified = lastEvent.getUndoDisplay();

                    Log.d("undo", "ubtype : "+ubtype+", psRuns : "+psRuns + ", psBalls : " + psBalls
                            + ", psOver : " + psOver + ", ballsPerOver : "+ ballsPerOver);
                    Log.d("undo", "strID : "+strID + ", urun: " + urun + ", uerun : " + uerun + ", uetype : " + uetype + ", uout : " + uout);
                    Log.d("undo", "ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : "+ p1CB);

                    Log.d("undo", " ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : "+ p2CB);
                }

                // Added on 01/12/2021
                if (((lastEvent.getPenaltyType() == 1) || (lastEvent.getPenaltyType() == 2))
                        && (uetype != 5)) {
                    removeFromPenalty();
                }
                // === till here

                setUndoExtraCard(uetype, uerun, upt, 1);

//                   modified = lastEvent.getUndoDisplay();

                Log.d("currentRuns", "undo, : " + currentRuns);

                Log.d("undo", "ubtype : "+ubtype+", psRuns : "+psRuns + ", psBalls : " + psBalls
                        + ", psOver : " + psOver + ", ballsPerOver : "+ ballsPerOver);
                Log.d("undo", "strID : "+strID + ", urun: " + urun + ", uerun : " + uerun + ", uetype : " + uetype + ", uout : " + uout);
                Log.d("undo", "ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : "+ p1CB);

                Log.d("undo", " ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : "+ p2CB);

                Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                        "Extra undone", Toast.LENGTH_SHORT).show();

                resetValues(lastEvent, ubtype);
                Log.d("remainingOver", "ubtype = 8, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 8, 2 : " + remainingBalls);
            }
/*

           else if (ubtype == 9 || ubtype == 10) {

               Log.d("remainingOver", "ubtype = 9|10, 1 : " + remainingOver);
               Log.d("remainingBalls", "ubtype = 9|10, 1 : " + remainingBalls);
//               endOver = false;
               if (endOfInnings)
                   endOfInnings = false;
               resetValues(lastEvent, ubtype);
               undo();
               Log.d("remainingOver", "ubtype = 9|10, 2 : " + remainingOver);
               Log.d("remainingBalls", "ubtype = 9|10, 2 : " + remainingBalls);
           }*/


            else if (ubtype == 12) {

//               changeIntervalUndoAlert(lastEvent, "If you are looking for change interval, \npress CHANGE INTERVAL else NO"); // Added on 30/08/2021

                Log.d("remainingOver", "ubtype = 12, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 12, 1 : " + remainingBalls);

                Log.d("Scoring", "undo 1, ubtype : "+ubtype+", events : "+lastEvent);

                endOver = false;
                setStrikerNonStriker(lastEvent);
                Log.d("Scoring", "undo 2, ubtype : "+ubtype+", events : "+lastEvent);
                setBowler(lastEvent);
                Log.d("Scoring", "undo 3, ubtype : "+ubtype+", events : "+lastEvent);

                modified = lastEvent.getUndoDisplay();
                int intervalId = lastEvent.getIntervalId();  // Added on 07/07/2021
                if (intervalId != 7)  // Added on 07/07/2021
                    enableButtons(3);  // Added on 07/07/2021

                Log.d("Scoring", "undo 4, ubtype : "+ubtype+", events : "+lastEvent);
                Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                        "Interval undone", Toast.LENGTH_SHORT).show();
                resetValues(lastEvent, ubtype);
                Log.d("remainingOver", "ubtype = 12, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 12, 2 : " + remainingBalls);

                undo(); //Commented on 30/08/2021
            }

            else if (ubtype == 13) {

                // added on 20/01/21
                Events secondLastEvent = realm.where(Events.class).
                        equalTo("matchid", matchid).
                        equalTo("innings", currentInnings).
                        equalTo("eventID", (lastEvent.getEventID() - 1)).
                        findFirst();

                if (secondLastEvent != null) {

                    Log.d("remainingBalls", "ubtype = 13, 3 secondLastEvent : " + secondLastEvent);
                    if (secondLastEvent.getBallType() == 15) {
                        UNDO_LIMIT = true;

                        // added on 21/01/21
                        AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
                        alertDialog.setIcon(R.drawable.ball);
                        alertDialog.setCancelable(false);
                        alertDialog.setTitle("Undo has reached limit");
                        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
                                new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int which) {
                                        dialog.dismiss();
                                        btnUndo.setEnabled(false);
                                        initializeBowler();
                                        syncBowler();
                                        inningsNotStarted = true;
                                        // Added on 20/12/2021
                                        modified = "";
                                        udisplay = "";
                                        //=== till here

                                        setExtraCard(/*UNDO_LIMIT*/);
                                    }
                                });

                        alertDialog.show();
                        // ============== till here-

                    }

                    // added here on 22/11/2021
                    else {
                        // ======== till here

                        Log.d("remainingOver", "ubtype = 13, 1 : " + remainingOver);
                        Log.d("remainingBalls", "ubtype = 13, 1 : " + remainingBalls);

                        endOver = false;
                        Log.d("Scoring", "undo 1, ubtype : " + ubtype + ", events : " + lastEvent);

                        setStrikerNonStriker(lastEvent);
                        Log.d("Scoring", "undo 2, ubtype : " + ubtype + ", events : " + lastEvent);
                        setBowler(lastEvent);
                        Log.d("Scoring", "undo 3, ubtype : " + ubtype + ", events : " + lastEvent);

                        sessionID = lastEvent.getSessionId();
                        String ss = lastEvent.getSession();
//                   setSession();
                        if (sessionID == 7 || sessionID == 9 || sessionID == 11) {

                            btnUndo.setEnabled(true);
                            btnSwap.setEnabled(true);
                            btnScore.setEnabled(true);
                            btnOut.setEnabled(true);
                            btnExtras.setEnabled(true);
                            btnHash.setEnabled(true);
                            btnCom.setEnabled(true);
                            btn0.setEnabled(true);
                            btn1.setEnabled(true);
                            btn2.setEnabled(true);
                            btn3.setEnabled(true);
                            btn4.setEnabled(true);
                            btn6.setEnabled(true);
                            btnInterval.setEnabled(true);
                            btnChangeBatsman.setEnabled(true);
                            btnChangeBowler.setEnabled(true);
                        } else if (sessionID == 8 || sessionID == 10) {

//                       btnUndo.setEnabled(false);
                            btnSwap.setEnabled(false);
                            btnScore.setEnabled(false);
                            btnOut.setEnabled(false);
                            btnExtras.setEnabled(false);
                            btnHash.setEnabled(false);
//                           btnCom.setEnabled(false);
                            btn0.setEnabled(false);
                            btn1.setEnabled(false);
                            btn2.setEnabled(false);
                            btn3.setEnabled(false);
                            btn4.setEnabled(false);
                            btn6.setEnabled(false);
                            btnInterval.setEnabled(false);
                            btnChangeBatsman.setEnabled(false);
                            btnChangeBowler.setEnabled(false);
                        }

//               if (sid > 6)
//                   --sid;

                        if (sessionID == 6) {
                            ss = "MS";
//                   btnSession.setText("END SESSION1");
                            session_click = 0;
                        } else if (sessionID == 7) {
                            ss = "SE1";
//                       btnSession.setText("START SESSION2");
                            session_click = 1;
                        } else if (sessionID == 8) {
                            ss = "SS2";
//                           btnSession.setText("END SESSION2");
                            session_click = 2;
                        } else if (sessionID == 9) {
                            ss = "SE2";
//                            btnSession.setText("START SESSION3");
                            session_click = 3;
                        } else if (sessionID == 10) {

                            ss = "SS3";
//                                btnSession.setText("END SESSION3");
                            session_click = 4;
                        } else if (sessionID == 11) {
                            ss = "SE3";
//                                btnSession.setText("END OF INNINGS");
                            session_click = 5;
                        }

                        Log.d("Scoring", "undo 4, ubtype : " + ubtype + ", events : " + lastEvent);
//               setMatchStatus(ss, sid);


                        resetValues(lastEvent, ubtype);
                        Log.d("remainingOver", "ubtype = 13, 2 : " + remainingOver);
                        Log.d("remainingBalls", "ubtype = 13, 2 : " + remainingBalls);

                        Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                                "Session undone", Toast.LENGTH_SHORT).show();
                        undo();  // added on 22/11/2021
                        // === till here (22/11/2021)

                       /* Commented on 22/11/2021
                       // Added on 28/04/2021
                       Events preEvents = realm.where(Events.class).
                               equalTo("matchid", matchid).
                               lessThan("eventID", lastEvent.getEventID()).
                               findAll().last();

                       if (preEvents != null) {
                       *//* Commented on 30/08/2021
                       if (preEvents.getBallType() != 15)
                           undo();*//*
                           if (preEvents.getBallType() == 15)   // Updated on 30/08/2021
                               UNDO_LIMIT = true;
                       }

                       // === till here*/
                    }
                }

               /* Commented on 22/11/2021
               else {
                   // ======== till here

                   Log.d("remainingOver", "ubtype = 13, 1 : " + remainingOver);
                   Log.d("remainingBalls", "ubtype = 13, 1 : " + remainingBalls);

                   endOver = false;
                   Log.d("Scoring", "undo 1, ubtype : " + ubtype + ", events : " + lastEvent);

                   setStrikerNonStriker(lastEvent);
                   Log.d("Scoring", "undo 2, ubtype : " + ubtype + ", events : " + lastEvent);
                   setBowler(lastEvent);
                   Log.d("Scoring", "undo 3, ubtype : " + ubtype + ", events : " + lastEvent);

                   sessionID = lastEvent.getSessionId();
                   String ss = lastEvent.getSession();
//                   setSession();
                   if (sessionID == 7 || sessionID == 9 || sessionID == 11) {

                       btnUndo.setEnabled(true);
                       btnSwap.setEnabled(true);
                       btnScore.setEnabled(true);
                       btnOut.setEnabled(true);
                       btnExtras.setEnabled(true);
                       btnHash.setEnabled(true);
                       btnCom.setEnabled(true);
                       btn0.setEnabled(true);
                       btn1.setEnabled(true);
                       btn2.setEnabled(true);
                       btn3.setEnabled(true);
                       btn4.setEnabled(true);
                       btn6.setEnabled(true);
                       btnInterval.setEnabled(true);
                       btnChangeBatsman.setEnabled(true);
                       btnChangeBowler.setEnabled(true);
                   } else if (sessionID == 8 || sessionID == 10) {

//                       btnUndo.setEnabled(false);
                       btnSwap.setEnabled(false);
                       btnScore.setEnabled(false);
                       btnOut.setEnabled(false);
                       btnExtras.setEnabled(false);
                       btnHash.setEnabled(false);
//                           btnCom.setEnabled(false);
                       btn0.setEnabled(false);
                       btn1.setEnabled(false);
                       btn2.setEnabled(false);
                       btn3.setEnabled(false);
                       btn4.setEnabled(false);
                       btn6.setEnabled(false);
                       btnInterval.setEnabled(false);
                       btnChangeBatsman.setEnabled(false);
                       btnChangeBowler.setEnabled(false);
                   }

//               if (sid > 6)
//                   --sid;

                   if (sessionID == 6) {
                       ss = "MS";
//                   btnSession.setText("END SESSION1");
                       session_click = 0;
                   } else if (sessionID == 7) {
                       ss = "SE1";
//                       btnSession.setText("START SESSION2");
                       session_click = 1;
                   } else if (sessionID == 8) {
                       ss = "SS2";
//                           btnSession.setText("END SESSION2");
                       session_click = 2;
                   } else if (sessionID == 9) {
                       ss = "SE2";
//                            btnSession.setText("START SESSION3");
                       session_click = 3;
                   } else if (sessionID == 10) {

                       ss = "SS3";
//                                btnSession.setText("END SESSION3");
                       session_click = 4;
                   } else if (sessionID == 11) {
                       ss = "SE3";
//                                btnSession.setText("END OF INNINGS");
                       session_click = 5;
                   }

                   Log.d("Scoring", "undo 4, ubtype : " + ubtype + ", events : " + lastEvent);
//               setMatchStatus(ss, sid);


                   resetValues(lastEvent, ubtype);
                   Log.d("remainingOver", "ubtype = 13, 2 : " + remainingOver);
                   Log.d("remainingBalls", "ubtype = 13, 2 : " + remainingBalls);

                   // Added on 28/04/2021
                   Events preEvents = realm.where(Events.class).
                           equalTo("matchid", matchid).
                           lessThan("eventID", lastEvent.getEventID()).
                           findAll().last();

                   if (preEvents != null) {
                       *//* Commented on 30/08/2021
                       if (preEvents.getBallType() != 15)
                           undo();*//*
                       if (preEvents.getBallType() == 15)   // Updated on 30/08/2021
                           UNDO_LIMIT = true;
                   }

                   // === till here
               }

               Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                       "Session undone", Toast.LENGTH_SHORT).show();
               undo();  // added on 22/11/2021*/
            }

            else if (ubtype == 16) {

                Log.d("remainingOver", "ubtype = 16, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 16, 1 : " + remainingBalls);

                endOver = false;
                if (endOfDay)
                    endOfDay = false;
                Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                        "End of day undone", Toast.LENGTH_SHORT).show();
                // added on 04/05/2020
                resetValues(lastEvent, ubtype);
                enableButtons(2);  // Added on 07/07/2021
                Log.d("remainingOver", "ubtype = 16, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 16, 2 : " + remainingBalls);
//               undo();    // Commented on 30/08/2021
            }

            else if (ubtype == 17) {

                Log.d("remainingOver", "ubtype = 17, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 17, 1 : " + remainingBalls);
                endOver = false;
                Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                        "Starting of day undone", Toast.LENGTH_SHORT).show();
                resetValues(lastEvent, ubtype);
                Log.d("remainingOver", "ubtype = 17, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 17, 2 : " + remainingBalls);
//               undo();    Commented on 30/08/2021
            }

            else if (ubtype == 18) {     //substitution

                // updation on 05/09/2020

                Log.d("remainingOver", "ubtype = 18, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 18, 1 : " + remainingBalls);

                endOver = false;
                setStrikerNonStriker(lastEvent);
                setBowler(lastEvent);

                int newbowlerid = lastEvent.getNewBowlerID();


                // added new code to delete record from Substitution table record

               /*Substitution substitution = realm.where(Substitution.class).
                       equalTo("matchid", matchid).
                       equalTo("team", fieldingTeamNo).
                       equalTo("innings", currentInnings).
                       equalTo("player_OUT_ID", bowlerID).
//                      equalTo("concussion", true).
                       findFirst();*/

                Substitution substitution = realm.where(Substitution.class).
                        equalTo("matchid", matchid).
                        equalTo("innings", currentInnings).
                        findAll().last();

                if (substitution != null) {


                    player_in_id = substitution.getPlayer_IN_ID();
                    temp_team = substitution.getTeam();

                    sub_new_bowler_id = substitution.getNew_bowler_id();
                    Log.d("sub", "ubtype = 19, player_in_id 2 : " + player_in_id);
                    Log.d("sub", "ubtype = 19, bowlerID 2 : " + bowlerID);
                    Log.d("sub", "ubtype = 19, temp_team 2 : " + temp_team);
                    Log.d("sub", "ubtype = 19, sub_new_bowler_id 2 : " + sub_new_bowler_id);

                    if (!realm.isInTransaction()) {
                        realm.beginTransaction();
                    }

                    substitution.deleteFromRealm();

                    realm.commitTransaction();
                }

                Realm realm = null;
                try {
                    config = new RealmConfiguration.Builder()
                            .name(AppConstants.GAME_ID + ".realm")
                            .deleteRealmIfMigrationNeeded()
                            .build();
                    realm = Realm.getInstance(config);
                    realm.executeTransaction(new Realm.Transaction() {
                        @Override
                        public void execute(Realm bgrealm) {

                            try {

                                if (player_in_id > 0) {
                                    Player player = bgrealm.where(Player.class).
                                            equalTo("matchid", matchid).
//                                           equalTo("team", fieldingTeamNo).
        equalTo("playerID", player_in_id).findFirst();

                                    if (player != null) {
                                        player.setSubstitute(true);
                                        player.setPlaying(false);
                                        player.setRetired_concussion(false);    // added on 27/02/2021
                                        bgrealm.copyToRealmOrUpdate(player);
                                    }
                                }

                                if (player_out_id > 0) {
                                    Player player = bgrealm.where(Player.class).
                                            equalTo("matchid", matchid).
                                            equalTo("playerID", player_out_id).findFirst();

                                    if (player != null) {

                                        player.setSubstitute(false);
                                        player.setRetired(false);
                                        player.setPlaying(true);
                                        player.setRetired_concussion(false);    // added on 27/02/2021
                                        player.setRetired_innings(0);
                                        bgrealm.copyToRealmOrUpdate(player);
                                    }
                                }

                            } catch (RealmPrimaryKeyConstraintException e) {
                                Toast.makeText(getApplicationContext(),
                                        "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                            }
                        }
                    });
                } catch (RealmException e) {
                    Log.d("scoring", "onclick, Exception : " + e);
                } finally {
                    if (realm != null) {
                        realm.close();
                    }
                }

                if (bowlerID == sub_new_bowler_id) {



                    Bowler bow = realm.where(Bowler.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).
                            equalTo("team", fieldingTeamNo).
                            equalTo("playerID", sub_new_bowler_id).findFirst();
                    Log.d("HUNDRED", "undo 3, bow = " + bow);
                    Log.d("undobow", "bowler bt 6, : " + bow);
                    if (bow != null) {

                        if ((bow.getBalls() == 0) && (bow.getRuns() == 0) &&
                                (bow.getNoBalls() == 0) && (bow.getWides() == 0)) {

                            if (!realm.isInTransaction()) {
                                realm.beginTransaction();
                            }

                            bow.deleteFromRealm();
                            realm.commitTransaction();
                        }
                    }
                }

                Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                        "Substitution undone", Toast.LENGTH_SHORT).show();
                resetValues(lastEvent, ubtype);
                Log.d("remainingOver", "ubtype = 18, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 18, 2 : " + remainingBalls);
            }

            else if (ubtype == 19) {     //concussion

                Log.d("remainingOver", "ubtype = 19, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 19, 1 : " + remainingBalls);

                temp_team = 0;
                endOver = false;
                setStrikerNonStriker(lastEvent);
                setBowler(lastEvent);

                Substitution substitution = realm.where(Substitution.class).
                        equalTo("matchid", matchid).
//                       equalTo("team", battingTeamNo).
        equalTo("innings", currentInnings).
                        equalTo("subID", lastEvent.getSubstitutionID()).
//                equalTo("concussion", true).
        findFirst();

                if (substitution != null) {

                    player_in_id = substitution.getPlayer_IN_ID();
                    player_out_id = substitution.getPlayer_OUT_ID();
                    temp_team = substitution.getTeam();
                    sub_new_bowler_id = substitution.getNew_bowler_id();
                    Log.d("sub", "ubtype = 19, player_in_id 1 : " + player_in_id);
                    Log.d("sub", "ubtype = 19, player_out_id 1 : " + player_out_id);
                    Log.d("sub", "ubtype = 19, temp_team 1 : " + temp_team);
                    Log.d("sub", "ubtype = 19, sub_new_bowler_id 1 : " + sub_new_bowler_id);
                    Log.d("sub", "ubtype = 19, bowlerID 1 : " + bowlerID);

                    if (!realm.isInTransaction()) {
                        realm.beginTransaction();
                    }

                    substitution.deleteFromRealm();
                    realm.commitTransaction();
                }

                Realm realm = null;
                try {
                    config = new RealmConfiguration.Builder()
                            .name(AppConstants.GAME_ID + ".realm")
                            .deleteRealmIfMigrationNeeded()
                            .build();
                    realm = Realm.getInstance(config);
                    realm.executeTransaction(new Realm.Transaction() {
                        @Override
                        public void execute(Realm bgrealm) {

                            try {

                                if (player_in_id > 0) {
                                    Player player = bgrealm.where(Player.class).
                                            equalTo("matchid", matchid).
//                                           equalTo("team", fieldingTeamNo).
        equalTo("playerID", player_in_id).findFirst();

                                    if (player != null) {

                                        player.setSubstitute(true);
                                        player.setPlaying(false);
                                        player.setRetired_concussion(false);    // added on 27/02/2021
                                        bgrealm.copyToRealmOrUpdate(player);
                                    }
                                }

                                if (player_out_id > 0) {
                                    Player player = bgrealm.where(Player.class).
                                            equalTo("matchid", matchid).
                                            equalTo("playerID", player_out_id).findFirst();

                                    if (player != null) {

                                        player.setSubstitute(false);
                                        player.setRetired(false);
                                        player.setPlaying(true);
                                        player.setRetired_concussion(false);    // added on 27/02/2021
                                        player.setRetired_innings(0);
                                        bgrealm.copyToRealmOrUpdate(player);
                                    }
                                }

                            } catch (RealmPrimaryKeyConstraintException e) {
                                Toast.makeText(getApplicationContext(),
                                        "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                            }
                        }
                    });

                    resetValues(lastEvent, ubtype);
                }

                catch (RealmException e) {
                    Log.d("scoring", "onclick, Exception : " + e);
                }

                finally {
                    if (realm != null) {
                        realm.close();
                    }
                }


                Log.d("sub", "ubtype = 19, player_in_id 2 : " + player_in_id);
                Log.d("sub", "ubtype = 19, bowlerID 2 : " + bowlerID);
                Log.d("sub", "ubtype = 19, temp_team 2 : " + temp_team);
                Log.d("sub", "ubtype = 19, fieldingTeamNo 2 : " + fieldingTeamNo);
                Log.d("sub", "ubtype = 19, sub_new_bowler_id 2 : " + sub_new_bowler_id);
                if (temp_team == fieldingTeamNo) {//
//                   if (sub_new_bowler_id == bowlerID) {


                    Bowler bow = realm.where(Bowler.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).
                            equalTo("team", fieldingTeamNo).
                            equalTo("playerID", sub_new_bowler_id).findFirst();
                    Log.d("HUNDRED", "undo 4, bow = " + bow);

                    Log.d("sub", "ubtype = 19, bow 1 : " + bow);

                    if (bow != null) {

                        if ((bow.getOver() == 0 && bow.getBalls() == 0 && bow.getRuns() == 0 &&
                                bow.getWides() == 0 && bow.getNoBalls() == 0 && bow.getWicket() == 0 &&
                                bow.getDots() == 0 && bow.getMaidenOver() == 0)) {

                            if (!realm.isInTransaction()) {
                                realm.beginTransaction();
                            }

                            bow.deleteFromRealm();
                            realm.commitTransaction();
                        }
                    }
//                   }
                }

                else if (temp_team == battingTeamNo) {//player_in_id == strID || player_in_id == nstrID) {

                    Batsman bats = realm.where(Batsman.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).
                            equalTo("batsman_pID", player_in_id).findFirst();

                    if (bats != null) {
                        if (bats.getBalls() == 0 && bats.getRuns() == 0 && bats.getDots() == 0
                                && bats.getOutType() == -1) {

                            if (!realm.isInTransaction()) {
                                realm.beginTransaction();
                            }

                            bats.deleteFromRealm();
                            realm.commitTransaction();
                        }

                    }

                }

                Log.d("remainingOver", "ubtype = 19, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 19, 2 : " + remainingBalls);
//               final int player_in

                Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                        "Concussion undone", Toast.LENGTH_SHORT).show();
                resetValues(lastEvent, ubtype);  // Added on 30/08/2021
            }

            else if (ubtype == 20) {

                Log.d("remainingOver", "ubtype = 20, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 20, 1 : " + remainingBalls);
                Log.d("ball", "ubtype = 20, 1 : " + ball);


                endOver = false;
                int t_innings = lastEvent.getInnings();
                remainingRuns = lastEvent.getRemainingRuns();
                remainingBalls = lastEvent.getRemainingBalls();
//               remainingOver = lastEvent.getReducedOver();



                Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
                if (match != null) {

                    remainingOver = match.getActual_over();
                    // added on 06/05/2020
                    resetRemainingOver();

                    if (match.isReducedOver()) {
                        totalOver = match.getActual_over();

                        Realm realm = null;
                        try {
                            config = new RealmConfiguration.Builder()
                                    .name(AppConstants.GAME_ID + ".realm")
                                    .deleteRealmIfMigrationNeeded()
                                    .build();
                            realm = Realm.getInstance(config);
                            realm.executeTransaction(new Realm.Transaction() {
                                @Override
                                public void execute(Realm bgrealm) {

                                    try {

                                        if (totalOver > 0) {
                                            match.setOver(totalOver);
                                            match.setReducedOver(false);
                                            match.setAppliedRainRule(null);
                                            if (t_innings == 2)
                                                match.setReducedRuns(false);

                                            bgrealm.copyToRealmOrUpdate(match);
                                        }

                                    } catch (RealmPrimaryKeyConstraintException e) {
                                        Toast.makeText(getApplicationContext(),
                                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                                    }
                                }
                            });

                            // commneted on 05/05/2020
                           /*resetValues(lastEvent);
                           undo();*/
                        } catch (RealmException e) {
                            Log.d("scoring", "onclick, Exception : " + e);
                        } finally {
                            if (realm != null) {
                                realm.close();
                            }
                        }
                    }
                }

                Toast.makeText(getApplicationContext(),
                        "Over reduced undone", Toast.LENGTH_SHORT).show();   // Added on 30/08/2021
                resetValues(lastEvent, ubtype);// added on 05/05/2020

                Log.d("remainingOver", "ubtype = 20, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = 20, 2 : " + remainingBalls);

//               undo();    commented on 30/08/2021


            }

            else if (/*ubtype == -1 || */ubtype == 21 || ubtype == 22 || ubtype == 23) {

                Log.d("remainingOver", "ubtype = -1|21|22|23, 1 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = -1|21|22|23, 1 : " + remainingBalls);

                endOver = false;
                // Added on 30/08/2021
                String mgs = "";
                if (ubtype == 21) {
                    Toast.makeText(getApplicationContext(),
                            "Powerplay added undone", Toast.LENGTH_SHORT).show();
//                   resetPowerPlay(ubtype, lastEvent);    // Added on 26/11/2021
                } else if (ubtype == 22)
                    Toast.makeText(getApplicationContext(),
                            "Powerplay updated undone", Toast.LENGTH_SHORT).show();
                else if (ubtype == 23)
                    Toast.makeText(getApplicationContext(),
                            "Powerplay deleted undone", Toast.LENGTH_SHORT).show();   // Added on 30/08/2021
                resetPowerPlay(ubtype, lastEvent);    // Added on 15/12/2021
                resetValues(lastEvent, ubtype);

                Log.d("remainingOver", "ubtype = -1|23|22|23, 2 : " + remainingOver);
                Log.d("remainingBalls", "ubtype = -1|21|22|23, 2 : " + remainingBalls);

//               undo();    // Commented on 30/08/2021
            }


            // ADDED ON 27/02/2021
            else if (ubtype == 24 || ubtype == 25) {

                wk_id = lastEvent.getWkID();
                keeper_position = lastEvent.getWk_position();

                Realm realm = null;
                try {
                    config = new RealmConfiguration.Builder()
                            .name(AppConstants.GAME_ID + ".realm")
                            .deleteRealmIfMigrationNeeded()
                            .build();
                    realm = Realm.getInstance(config);
                    realm.executeTransaction(new Realm.Transaction() {
                        @Override
                        public void execute(Realm bgrealm) {

                            try {

                                Player player1 = bgrealm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", fieldingTeamNo).
                                        equalTo("playerID", wk_id).findFirst();

                                if (player1 != null) {
                                    if (player1.isNew_wk()) {

                                        player1.setWicketKeeper(false);
                                        player1.setNew_wk(false);
                                        wk_position = player1.getWicketkeeping_position();
                                        player1.setWicketkeeping_position(0);

                                        bgrealm.copyToRealmOrUpdate(player1);
                                        Log.d("Undo24", "player1 = " + player1);
                                    }
                                }

                                Player player2 = bgrealm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", fieldingTeamNo).
                                        equalTo("playerID", pre_wk_id).findFirst();

                                if (player2 != null) {

                                    if (player2.getWicketkeeping_position() == pre_wk_position &&
                                            !player2.isNew_wk()) {

                                        wicketkeeper = player2.getPlayerName();
                                        wk_id = player2.getPlayerID();
                                        player2.setNew_wk(true);
                                        player2.setOld_wk(false);
                                        keeper_position = player2.getWicketkeeping_position();

                                        bgrealm.copyToRealmOrUpdate(player2);
                                        Log.d("Undo24", "player2 = " + player2);
                                    }
                                }

                            } catch (RealmPrimaryKeyConstraintException e) {
                                Toast.makeText(getApplicationContext(),
                                        "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                            }
                        }
                    });
                } catch (RealmException e) {
                    Log.d("scoring", "onclick, Exception : " + e);
                } finally {
                    if (realm != null) {
                        realm.close();
                    }
                }

                Events preEvent = realm.where(Events.class).
                        equalTo("matchid", matchid).
                        equalTo("innings", currentInnings).
                        equalTo("eventID", lastEvent.getEventID()).findFirst();

                if (preEvent != null) {

                    pre_wk_id = preEvent.getPreWkID();
                    pre_wk_position = preEvent.getPreWk_position();
                }

                // Added on 30/08/2021
                if (ubtype == 24)
                    Toast.makeText(getApplicationContext(),
                            "Change wicketkeeper undone", Toast.LENGTH_SHORT).show();
                else if (ubtype == 25)
                    Toast.makeText(getApplicationContext(),
                            "Substitute player as wicketkeeper undone", Toast.LENGTH_SHORT).show();

                resetValues(lastEvent, ubtype);

//               undo();    // Commented on 30/08/2021

            }
        }
    }

    // added on 06/05/2020
    void undoBowlerOver() {

        if ((bowlerBalls <= ballsPerOver) && (bowlerBalls > 0)) {
            --bowlerBalls;
            --bt_balls; // Added on 26/07/2021
        }
        else if (bowlerBalls > ballsPerOver)
            bowlerBalls = bowlerBalls - ballsPerOver;
        else if (bowlerBalls == 0) {
            if (bowlerOver >= 1) {
//               bowlerBalls = ballsPerOver;  // commented on 11/05/2020
                --bowlerOver;
            }
            else {
                bowlerOver = 0;
            }

            // added on 11/05/2020
            if (bowlerOver >= 0)
                bowlerBalls = ballsPerOver;
        }
    }



    // addded on 27/06/2020
    public JSONObject setUndo(Undo undoObject) {

/*        {
            JSONObject jsonUndo = new JSONObject();
            try {
                jsonUndo.put("matchID", undoObject.getMatchID());
                jsonUndo.put("eventid", undoObject.getEventID());
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return jsonUndo;
        }*/

        Match match =  realm.where(Match.class).
                equalTo("matchid", matchid).findFirst();

        int ub = 0, ulb = 0, uwd = 0, unb = 0, up = 0, uwk = 0;
        int preBowId = 0;

        //for bowler
        JSONObject jsoncurrentbowler = new JSONObject();
        try {
            // commented on  16/07/2020
//                jsoncurrentbowler.put("id", undoObject.getBowler_pID());
            // added on 16/07/2020
            jsoncurrentbowler.put("playerid", undoObject.getBowler_pID());
            jsoncurrentbowler.put("d4splayerid", undoObject.getBowler_D4SID());
            jsoncurrentbowler.put("run", undoObject.getBowlerRuns());
            // commented on  16/07/2020
            jsoncurrentbowler.put("over", undoObject.getBowlerOver());
            jsoncurrentbowler.put("balls", undoObject.getBowlerBalls());
            jsoncurrentbowler.put("wicket", undoObject.getBowlerWicket());

            jsoncurrentbowler.put("fours", undoObject.getBowlerF4s());
            jsoncurrentbowler.put("sixes", undoObject.getBowlerS6s());  // --- till here
            jsoncurrentbowler.put("dots", undoObject.getBowlerDots());//bow.getDots());
            jsoncurrentbowler.put("maiden", undoObject.getBowlerMO());//bow.getMaidenOver());
            jsoncurrentbowler.put("wide", undoObject.getBowlerWides());//bow.getWides());
            jsoncurrentbowler.put("noball", undoObject.getBowlerNoball());//bow.getNoBalls());

        } catch (JSONException e) {
            e.printStackTrace();
        }



        JSONObject jsonotherendbowler = new JSONObject();
        preBowId = undoObject.getPreBowler_pID();

        if (undoObject.getPreBowler_pID() != 0) {

            try {
                // commented on  16/07/2020
//                    jsonotherendbowler.put("id", undoObject.getPreBowler_pID());
                // added on  16/07/2020
                jsonotherendbowler.put("playerid", undoObject.getPreBowler_pID());
                jsonotherendbowler.put("d4splayerid", undoObject.getPreBowler_D4SID());
                jsonotherendbowler.put("run", undoObject.getPreBowlerRuns());
                // commented on  16/07/2020
                jsonotherendbowler.put("over", undoObject.getPreBowlerOver());
                jsonotherendbowler.put("balls", undoObject.getPreBowlerBalls());
                jsonotherendbowler.put("wicket", undoObject.getPreBowlerWicket());

                jsonotherendbowler.put("fours", undoObject.getPreBowlerF4s());
                jsonotherendbowler.put("sixes", undoObject.getPreBowlerS6s());//------ till here
                jsonotherendbowler.put("dots", undoObject.getPreBowlerDots());//bow.getDots());
                jsonotherendbowler.put("maiden", undoObject.getPreBowlerMO());//bow.getMaidenOver());
                jsonotherendbowler.put("wide", undoObject.getPreBowlerWides());//bow.getWides());
                jsonotherendbowler.put("noball", undoObject.getPreBowlerNoball());//bow.getNoBalls());


            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        else {
            try {
                // commented on  16/07/2020
//                    jsonotherendbowler.put("id", 0);
                // added on  16/07/2020
                jsonotherendbowler.put("playerid", 0);
                jsonotherendbowler.put("d4splayerid", 0);
                jsonotherendbowler.put("run", 0);
                // commented on  16/07/2020
                jsonotherendbowler.put("over", 0);
                jsonotherendbowler.put("balls", 0);
                jsonotherendbowler.put("wicket", 0);
                // added on  16/07/2020
                jsonotherendbowler.put("over", 0.0);
                jsonotherendbowler.put("fours", 0);
                jsonotherendbowler.put("sixes", 0); //------ till here
                jsonotherendbowler.put("dots", 0);
                jsonotherendbowler.put("maiden", 0);
                jsonotherendbowler.put("wide", 0);
                jsonotherendbowler.put("noball", 0);

            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        // Added on 13/11/2021
        JSONArray bowlerarray = new JSONArray();
        RealmResults<Bowler> result_bowler = realm.where(Bowler.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).
//                    notEqualTo("over", 0).
//                    notEqualTo("balls", 0).
//                    notEqualTo("runs", 0).
//                    notEqualTo("wicket", 0).
//                    notEqualTo("maidenOver", 0).
//                    notEqualTo("dots", 0).
//                    notEqualTo("wides", 0).
//                    notEqualTo("noBalls", 0).
        findAll();
        if (result_bowler.size() > 0) {
            Log.d("UB", "result_bowler = " + result_bowler);
            for (Bowler bowler : result_bowler) {
                Log.d("UB", "result_bowler, bowler = " + bowler);
                JSONObject b = new JSONObject();
                Player p = realm.where(Player.class).
                        equalTo("matchid", matchid).
                        equalTo("team", fieldingTeamNo).
                        equalTo("playerID", (bowler.getPlayerID())).
                        findFirst();
                Log.d("UB", "result_bowler, p = " + p);
                if (p != null) {
                    try {
                        b.put("d4splayerid", p.getD4s_playerid());
                        bowlerarray.put(b);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        // === till here


        JSONObject jsonbowler = new JSONObject();
        try {
            // commented on  16/07/2020
//                jsonbowler.put("current", jsoncurrentbowler);
            // added on  16/07/2020
            jsonbowler.put("firstend", jsoncurrentbowler);
            Log.d("TEST", "setUndo, jsonotherendbowler : " + jsonotherendbowler);
            Log.d("TEST", "setUndo, preBowId : " + preBowId);
//                if (preBowId > 0)
            jsonbowler.put("otherend", jsonotherendbowler);
            jsonbowler.put("bowlingeventid", undoObject.getUndo_last_event_id());  // Added on 04/08/2021

            // Added on 13/11/2021
            if ((undoObject.getBowlerRuns() == 0) &&
                    (undoObject.getBowlerOver() == 0) &&
                    (undoObject.getBowlerBalls() == 0) &&
                    (undoObject.getBowlerWicket() == 0) &&
                    (undoObject.getBowlerDots() == 0) &&
                    (undoObject.getBowlerMO() == 0) &&
                    (undoObject.getBowlerWides() == 0) &&
                    (undoObject.getBowlerNoball() == 0))
                jsonbowler.put("bowlerdeleteid", undoObject.getBowler_D4SID());
            else
                jsonbowler.put("bowlerdeleteid", 0);

            jsonbowler.put("previousbowlerlist", bowlerarray);

            // == till here
        } catch (JSONException e) {
            e.printStackTrace();
        }


        // for batsman

        JSONObject jsonstriker = new JSONObject();
        try {
            jsonstriker.put("playerid", undoObject.getStriker_pID());
            jsonstriker.put("d4splayerid", undoObject.getStriker_D4SID());
            jsonstriker.put("score", undoObject.getStrikerRuns());
            jsonstriker.put("ball", undoObject.getStrikerBalls());

            if (undoObject.getStrikerBattingOrder() == 100)//bats.getBattingOrder() == 100)
                jsonstriker.put("battingorder", 0);
            else
                jsonstriker.put("battingorder", undoObject.getStrikerBattingOrder());//bats.getBattingOrder());
            jsonstriker.put("dots", undoObject.getStrikerDots());//bats.getDots());
            jsonstriker.put("fours", undoObject.getStrikerF4s());//bats.getF4s());
            jsonstriker.put("sixes", undoObject.getStrikerS6s());//bats.getS6s());
            // added on 11/07/2020 & updated 16/07/2020
            if (undoObject.getStrikerOutType() == -1)
                jsonstriker.put("outtype", "no");
            else {
                if ((undoObject.getBalltype() == 7) || (undoObject.getBalltype() == 3))
                    jsonstriker.put("outtype", "no");
                else
                    jsonstriker.put("outtype",
                            setUndoOutType(undoObject.getStrikerOutType()));
            }


        } catch (JSONException e) {
            e.printStackTrace();
        }

        JSONObject jsonnonstriker = new JSONObject();
        try {

            jsonnonstriker.put("playerid", undoObject.getNonStriker_pID());
            jsonnonstriker.put("d4splayerid", undoObject.getNonStriker_D4SID());
            jsonnonstriker.put("score", undoObject.getNonStrikerRuns());
            jsonnonstriker.put("ball", undoObject.getNonStrikerBalls());

            if (undoObject.getNonStrikerBattingOrder() == 100)//bats.getBattingOrder() == 100)
                jsonnonstriker.put("battingorder", 0);
            else
                jsonnonstriker.put("battingorder", undoObject.getNonStrikerBattingOrder());//bats.getBattingOrder());
            jsonnonstriker.put("dots", undoObject.getNonStrikerDots());//bats.getDots());
            jsonnonstriker.put("fours", undoObject.getNonStrikerF4s());//bats.getF4s());
            jsonnonstriker.put("sixes", undoObject.getNonStrikerS6s());//bats.getS6s());
            // added on 11/07/2020 & updated 16/07/2020
            if (undoObject.getNonStrikerOutType() == -1)
                jsonnonstriker.put("outtype", "no");
            else {
                if ((undoObject.getBalltype() == 7) || (undoObject.getBalltype() == 3))
                    jsonstriker.put("outtype", "no");
                else
                    jsonnonstriker.put("outtype",
                            setUndoOutType(undoObject.getNonStrikerOutType()));
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }


        JSONObject jsonbatsman = new JSONObject();
        try {
            jsonbatsman.put("striker", jsonstriker);
            jsonbatsman.put("nonstriker", jsonnonstriker);
            jsonbatsman.put("battingeventid", undoObject.getUndo_last_event_id());  // Added on 04/08/2021

        } catch (JSONException e) {
            e.printStackTrace();
        }



        // for adding total extras on events

        ub = undoObject.getExtraBye();//extraCard.getByes();
        ulb = undoObject.getExtraLb();//extraCard.getLb();
        uwd = undoObject.getExtraWd();//extraCard.getWide();// * wideRun;
        unb = undoObject.getExtraNb();//extraCard.getNoBall();// * noballRun;
        up = undoObject.getExtraP();//extraCard.getPenalty();// * penaltyRun;

        JSONObject jsonExtra = new JSONObject();
        try {
            jsonExtra.put("inningsextras",
                    (ub +
                            ulb +
                            (uwd * match.getWiderun()) +
                            (unb * match.getNoballrun()) +
                            (up * match.getPenaltyrun())));
            jsonExtra.put("byes", ub);
            jsonExtra.put("legbyes", ulb);
            jsonExtra.put("wide", uwd);
            jsonExtra.put("noball", unb);
            jsonExtra.put("penalty", up);

        } catch (JSONException e) {
            e.printStackTrace();
        }


        // adding inningssummary

        JSONObject jsonSummery = new JSONObject();
        try {

            if (undoObject.isSUPER_OVER()) {
                if (undoObject.getInnings() == 99)
                    jsonSummery.put("innings", 1);
                else if (undoObject.getInnings() == 100)
                    jsonSummery.put("innings", 2);
            }

            else
                jsonSummery.put("innings", undoObject.getInnings());
            jsonSummery.put("totalovers", Double.parseDouble(
                    new DecimalFormat("###.#").format(undoObject.getTotalovers())));
            jsonSummery.put("totalscore", undoObject.getTotalscore());
            jsonSummery.put("totalwicket", undoObject.getTotalwicket());
            jsonSummery.put("extras", jsonExtra);
        } catch (JSONException e) {
            e.printStackTrace();
        }


        // adding over summary
        JSONObject jsonOverSummary = new JSONObject();
        try {
            jsonOverSummary.put("runs", undoObject.getOverScore());
        }
        catch (JSONException e) {
            e.printStackTrace();
        }



        // getting fielderIDs
        JSONArray arrayFielder = new JSONArray();
        if (undoObject.getOuttype() == 1 || undoObject.getOuttype() == 3)
            arrayFielder.put( Integer.parseInt(undoObject.getFielderids()));
        else
        if (undoObject.getOuttype() == 2) {

            String[] arrSplit = undoObject.getFielderids().split(", ");
            for (int i = 0; i < arrSplit.length; i++) {

                arrayFielder.put(arrSplit[i]);
            }
        }
        Log.d("fielderids", "setEventJSON, arrayFielder : " + arrayFielder);


        if ((undoObject.getBalltype() == 3) && (undoObject.getOuttype() != 10))//ballType == 3 && outType != 10)
            uwk = undoObject.getTotalwicket();//wicket;
        else
            uwk = undoObject.getTotalwicket() + 1;//wicket + 1;

        Log.d("Partnership", "setEventJSON : newPartnership : " + newPartnership);
        Log.d("Partnership", "setEventJSON : wicket : " + wicket);
        Log.d("Partnership", "setEventJSON : uwk : " + uwk);


        JSONObject jsonFOW = new JSONObject();

        try {

            jsonFOW.put("wicketno", undoObject.getP_wicket_no());//partnership.getWicket());
            jsonFOW.put("partnershipsequence", undoObject.getP_sequence_no());//partnership.getPartnershipSequence());
            jsonFOW.put("partnershipruns", undoObject.getP_run());//partnership.getPartnershipRuns());
            jsonFOW.put("partnershipballs", undoObject.getP_ball());//partnership.getPartnershipBalls());
            jsonFOW.put("partnershipover", undoObject.getP_over());//partnership.getPartnershipOver())));
            jsonFOW.put("player1id", undoObject.getP_p1Id());//partnership.getPlayer1ID());
            jsonFOW.put("player2id", undoObject.getP_p2Id());//partnership.getPlayer2ID());
            jsonFOW.put("dismissedplayerid", undoObject.getP_disId());//partnership.getDismissedPlayerID());
            jsonFOW.put("player1contributedruns", undoObject.getP_p1cr());//partnership.getPlayer1ContributionRuns());
            jsonFOW.put("player1contributedballs", undoObject.getP_p1cb());//partnership.getPlayer1ContributionBalls());
            jsonFOW.put("player2contributedruns", undoObject.getP_p2cr());//partnership.getPlayer2ContributionRuns());
            jsonFOW.put("player2contributedballs", undoObject.getP_p2cb());//partnership.getPlayer2ContributionBalls());

            if (undoObject.getBalltype() != 3) {
                jsonFOW.put("partnershipbroken", "no");
            } else {
                if (undoObject.getOuttype() == 10)
                    jsonFOW.put("partnershipbroken", "no");
                else if (undoObject.getOuttype() != 10)
                    jsonFOW.put("partnershipbroken", "yes");
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }



        //adding session details
        JSONObject jsonSession = new JSONObject();
        try {
//            if (events.getBallType() == 13) {
            if (undoObject.getSessionId() == 7 || undoObject.getSessionId() == 9 || undoObject.getSessionId() == 11)
                jsonSession.put("type", "end");

            else if (undoObject.getSessionId() == 8 || undoObject.getSessionId() == 10 ||
                    undoObject.getSessionId() == 12 || undoObject.getSessionId() == 6)
                jsonSession.put("type", "start");

            if (undoObject.getSessionId() == 7 || undoObject.getSessionId() == 12 || undoObject.getSessionId() == 6)
                jsonSession.put("number", 1);
            else if (undoObject.getSessionId() == 8 || undoObject.getSessionId() == 9)
                jsonSession.put("number", 2);
            else if (undoObject.getSessionId() == 10 || undoObject.getSessionId() == 11)
                jsonSession.put("number", 3);

        } catch (JSONException e) {
            e.printStackTrace();
        }



        //adding interval details
        JSONObject jsonInterval = new JSONObject();
        try {
            if (undoObject.getBalltype() == 12)
                jsonInterval.put("id", undoObject.getIntervalId());
            else
                jsonInterval.put("id", 0);
        }
        catch (JSONException e) {
            e.printStackTrace();
        }

        // for substitution and concussion
        JSONObject jsonSubstitution = new JSONObject();
        if (undoObject.getBalltype() == 18 || undoObject.getBalltype() == 19) {

            try {

                jsonSubstitution.put("team", undoObject.getSub_team());//substitution.getTeam());
                jsonSubstitution.put("playerout_id", undoObject.getSub_playerout_id());//substitution.getPlayer_OUT_ID());
                jsonSubstitution.put("playerin_id", undoObject.getSub_playerin_id());//substitution.getPlayer_IN_ID());

            } catch (JSONException e) {
                e.printStackTrace();
            }
//            }
        }


        JSONObject jsonPowerplay = new JSONObject();

        try {
            jsonPowerplay.put("start_over", undoObject.getPower_start_over());//power.getStart());
            jsonPowerplay.put("end_over", undoObject.getPower_end_over());//power.getEnd());
            jsonPowerplay.put("type", null);//power.getType());
            jsonPowerplay.put("sequence", undoObject.getPower_sequence());//power.getCount());

        }  catch (JSONException e) {
            e.printStackTrace();
        }


        JSONObject jsonInnings = new JSONObject();

        ub = undoObject.getExtraBye();
        ulb = undoObject.getExtraLb();
        uwd = undoObject.getExtraWd();
        unb = undoObject.getExtraNb();
        up = undoObject.getExtraP();



        try {
            jsonInnings.put("eventid", undoObject.getEventID());    // Added on 31/07/2021
            // Added on 02/08/2021
            if (undoObject.isSUPER_OVER()) {
                if (undoObject.getInnings() == 99)
                    jsonInnings.put("inningsnumber", 1);
                else if (undoObject.getInnings() == 100)
                    jsonInnings.put("inningsnumber", 2);
            }

            else
                jsonInnings.put("inningsnumber", undoObject.getInnings());
            // === till here
            jsonInnings.put("bye", undoObject.getExtraBye());
            jsonInnings.put("legbyes", undoObject.getExtraLb());
            jsonInnings.put("wide", undoObject.getExtraWd());
            jsonInnings.put("noball", undoObject.getExtraNb());
            jsonInnings.put("penalty", undoObject.getExtraP());
            jsonInnings.put("totalextras",
                    (ub +
                            ulb +
                            (uwd * match.getWiderun()) +
                            (unb * match.getNoballrun()) +
                            (up * match.getPenaltyrun())));
            jsonInnings.put("runs", undoObject.getRuns());
            jsonInnings.put("wicket", undoObject.getTotalwicket());
//                jsonInnings.put("teamid", undoObject.getBatting_team()); 03/08/2021
            if (undoObject.getBatting_team() == 1)
                jsonInnings.put("teamid", match.getTeamAId());
            else
                jsonInnings.put("teamid", match.getTeamBId());
            jsonInnings.put("over", Double.parseDouble(
                    new DecimalFormat("###.#").format(undoObject.getTotalovers())));
            jsonInnings.put("totalscore", undoObject.getTotalscore());
            jsonInnings.put("totalwicket", undoObject.getTotalwicket());

        }  catch (JSONException e) {
            e.printStackTrace();
        }

        // Added on 28/08/2021
        JSONObject jsonDismissedDetails = new JSONObject();
        try {
            jsonDismissedDetails.put("dismissedbatsmanid", undoObject.getDismissedbatsmanid());
            if (undoObject.getDismissedbatsmanid() > 0) {
                Player player = realm.where(Player.class)
                        .equalTo("matchid", matchid)
//                        .equalTo("team", battingTeamNo)
                        .equalTo("playerID", undoObject.getDismissedbatsmanid())
                        .findFirst();
                jsonDismissedDetails.put("dismissedbatsmand4sid", player.getD4s_playerid());
            } else
                jsonDismissedDetails.put("dismissedbatsmand4sid", 0);
            jsonDismissedDetails.put("dismissedbatsmanbattingorder", undoObject.getDismissedPlayerBattingOrder());
            jsonDismissedDetails.put("disnewbatsmanid", undoObject.getDisnewbatsmanid());
            if (undoObject.getDisnewbatsmanid() > 0) {
                Player player = realm.where(Player.class)
                        .equalTo("matchid", matchid)
//                        .equalTo("team", battingTeamNo)
                        .equalTo("playerID", undoObject.getDisnewbatsmanid())
                        .findFirst();
                jsonDismissedDetails.put("disnewbatsmand4sid", player.getD4s_playerid());
            } else
                jsonDismissedDetails.put("disnewbatsmand4sid", 0);
            // Added on 25/11/2021
            Batsman batsman = realm.where(Batsman.class)
                    .equalTo("matchid", matchid)
                    .equalTo("innings", currentInnings)
                    .equalTo("batsman_pID", (undoObject.getDisnewbatsmanid()))
                    .findFirst();
            if (batsman != null) {
                if (batsman.getBattingOrder() == 100)
                    jsonDismissedDetails.put("disnewbatsmandnb", "yes");
                else
                    jsonDismissedDetails.put("disnewbatsmandnb", "no");
            }
            // === till here

            jsonDismissedDetails.put("disnewbatsmanbattingorder", undoObject.getDisNewBatsmanBattingOrder());
        } catch (JSONException e) {
            e.printStackTrace();
        }
        //=========== till here

        JSONObject jsonUndo = new JSONObject();
        try {
            jsonUndo.put("matchID", undoObject.getMatchID());
            jsonUndo.put("eventid", undoObject.getEventID());
            jsonUndo.put("superover", undoObject.isSUPER_OVER());
            if (undoObject.isSUPER_OVER()) {
                if (undoObject.getInnings() == 99)
                    jsonUndo.put("inningsnumber", 1);
                else if (undoObject.getInnings() == 100)
                    jsonUndo.put("inningsnumber", 2);
            }

            else
                jsonUndo.put("inningsnumber", undoObject.getInnings());
            jsonUndo.put("battingteam", undoObject.getBatting_team());
            jsonUndo.put("over", undoObject.getOver());
            jsonUndo.put("ball", undoObject.getBall());
            jsonUndo.put("strikerid", undoObject.getStriker_pID());
            jsonUndo.put("nonstrikerid", undoObject.getNonStriker_pID());
            jsonUndo.put("bowlerid", undoObject.getBowler_pID());
            jsonUndo.put("balltype", undoObject.getBalltype());
            jsonUndo.put("innings", jsonInnings);


            if (undoObject.getDismissedbatsmanid() <= 0)
                jsonUndo.put("dismissedbatsmanid", 0);
            else
                jsonUndo.put("dismissedbatsmanid", undoObject.getDismissedbatsmanid());
            jsonUndo.put("disnewbatsmanid", undoObject.getDisnewbatsmanid());
            jsonUndo.put("outtype", undoObject.getOuttype());

            if (arrayFielder.length() == 0) {
                Log.d("fielderids", "setEventJSON 2, arrayFielder : " + arrayFielder);
                Log.d("fielderids", "setEventJSON 2, arrayFielder.length() : " + arrayFielder.length());
                jsonUndo.put("fielderids", 0);
            }
            else
            if (arrayFielder.length() > 0) {
                jsonUndo.put("fielderids", arrayFielder);
            }


            jsonUndo.put("extratype", undoObject.getExtraType());
            jsonUndo.put("freehit", undoObject.isFreehit());
            if (undoObject.getPenaltytype() == 1 || undoObject.getPenaltytype() == 2)
                jsonUndo.put("penaltybool", 1);
            else
                jsonUndo.put("penaltybool", 0);

            jsonUndo.put("penaltytype", undoObject.getPenaltytype());
            jsonUndo.put("runs", undoObject.getRuns());
            // commented on 08/07/2020
//                jsonUndo.put("extras", undoObject.getExtras());

            if (undoObject.getPenaltytype() > 0)
                jsonUndo.put("penaltyrun", undoObject.getPenalty()); // updated (penalty as penaltyrun) on 0/07/2020
            else
                jsonUndo.put("penaltyrun", 0);// updated (penalty as penaltyrun) on 0/07/202


            if (undoObject.getCommentary() != null )//|| !undoObject.getCommentary().matches(""))
                jsonUndo.put("commentary", undoObject.getCommentary());
            else
                jsonUndo.put("commentary", 0);


            jsonUndo.put("strokedirection", undoObject.getStrokedirection());

            // commented on 11/08/2020
//                jsonUndo.put("bowler", jsonbowler);
//                jsonUndo.put("batsman", jsonbatsman);
            // added on 11/08/2020
            jsonUndo.put("bowling", jsonbowler);
            jsonUndo.put("batting", jsonbatsman);

//                jsonUndo.put("inningssummary", jsonSummery);  // commented on 08/07/2020
            // added on 08/07/2020
            jsonUndo.put("extras", jsonExtra);

            if (undoObject.getBalltype() == 4 || undoObject.getBalltype() == 5)
                jsonUndo.put("oversummary", jsonOverSummary);

            // Added on 28/08/2021
            if ((undoObject.getBalltype() == 7) || (undoObject.getBalltype() == 3))
                jsonUndo.put("dismisseddetails", jsonDismissedDetails);
            // ==== till here

            jsonUndo.put("fallofwickets", jsonFOW);
            jsonUndo.put("session", jsonSession);
            jsonUndo.put("interval", jsonInterval);

            if (undoObject.getBalltype() == 18)
                jsonUndo.put("substitution", jsonSubstitution);
            else if (undoObject.getBalltype() == 19)
                jsonUndo.put("concussion", jsonSubstitution);

            else if (undoObject.getBalltype() == 21 || undoObject.getBalltype() == 22 || undoObject.getBalltype() == 23)
                jsonUndo.put("powerplay", jsonPowerplay);

            else if (undoObject.getBalltype() == 20) {
                jsonUndo.put("reducedover", match.getOver());
                if (undoObject.getInnings() == 2) {
                    jsonUndo.put("revisedtarget", undoObject.getRevisedTarget());
                    jsonUndo.put("appliedrainrule", undoObject.getAppliedRainRule());
                }

            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        // ---- till here  (A)

        Log.d("undo", "setUndo() 1, jsonUndoArray : " + jsonUndoArray);
        Log.d("undo", "setUndo() 2, jsonUndo : " + jsonUndo);
        return jsonUndo;
    }


    void setStrikerNonStriker(Events lastEvent){

//        Events lastEvent = realm.where(Events.class).equalTo("matchid", matchid).
//                equalTo("innings", currentInnings).findAll().last();


        Log.d("Scoring", "setStrikerNonStriker, lastEvent : "+lastEvent);

        strID = lastEvent.getStrikerID();
        if (strID != 0) {

            striker = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", battingTeamNo).
                    equalTo("playerID", strID).findFirst().getPlayerName();
//        }
            strikerBalls = lastEvent.getStrikerBalls();
            strikerRuns = lastEvent.getStrikerRuns();
//        if (!striker.matches("")) {
            Batsman batsman = realm.where(Batsman.class).
                    equalTo("matchid", matchid).
                    equalTo("innings", currentInnings).
                    equalTo("team", battingTeamNo).
                    equalTo("batsman_pID", strID).findFirst();
            strikerDots = batsman.getDots();
            strikerF4s = batsman.getF4s();
            strikerS6s = batsman.getS6s();

            Log.d("Scoring", "setStrikerNonStriker, striker : " + batsman);
        }

        nstrID = lastEvent.getNonStrikerID();
        if (nstrID != 0) {

            nonStriker = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", battingTeamNo).
                    equalTo("playerID", nstrID).findFirst().getPlayerName();
            nonStrikerRuns = lastEvent.getNonStrikerRuns();
            nonStrikerBalls = lastEvent.getNonStrikerBalls();
//        if (!nonStriker.matches("")) {
            Batsman batsman = realm.where(Batsman.class).
                    equalTo("matchid", matchid).
                    equalTo("innings", currentInnings).
                    equalTo("team", battingTeamNo).
                    equalTo("batsman_pID", nstrID).findFirst();
            nonStrikerDots = batsman.getDots();
            nonStrikerF4s = batsman.getF4s();
            nonStrikerS6s = batsman.getS6s();
            Log.d("Scoring", "setStrikerNonStriker, nonStriker : " + batsman);

        }


        player1ID = lastEvent.getPlayer1ID();
        player2ID = lastEvent.getPlayer2ID();

        if (player1ID == strID && player2ID == nstrID){

            player1 = striker;
            player2 = nonStriker;
        }

        else if (player1ID == nstrID && player2ID == strID){

            player1 = nonStriker;
            player2 = striker;
        }


    }




    void setBowler(Events lastEvent){

        bowlerID = lastEvent.getBowlerID();
//        bowlerID = lastEvent.getPrevBowlerID();
        if (bowlerID != 0) {
            bowler = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", fieldingTeamNo).
                    equalTo("playerID", bowlerID).findFirst().getPlayerName();
            Bowler bow = realm.where(Bowler.class).
                    equalTo("matchid", matchid).
                    equalTo("innings", currentInnings).
                    equalTo("team", fieldingTeamNo).
                    equalTo("playerID", bowlerID).findFirst();
            Log.d("HUNDRED", "setBowler 1, bow = " + bow);
            Log.d("undobow", "bowler bt, lastEvent : " + lastEvent);
            Log.d("undobow", "bowler bt, : " + bow);

//            bwRun = lastEvent.getBowlerRuns();
//            bowlerBalls = lastEvent.getBowlerBalls();
//            bowlerOver = lastEvent.getBowlerOver();
//            bowlerWicket = lastEvent.getBowlerWicket();
//              bwRun = lastEvent.getPreBowlerRuns();
//              bowlerBalls = lastEvent.getPreBowlerBalls();
//              bowlerOver = lastEvent.getPreBowlerOver();
//              bowlerWicket = lastEvent.getPreBowlerWicket();

            if (bow != null) {

                Log.d("undo", "bowler, : " + bow);

                bwRun = bow.getRuns();//lastEvent.getBowlerRuns();
                bowlerBalls = bow.getBalls();//lastEvent.getBowlerBalls();
                bt_balls = bow.getTotalBalls(); // Added on 26/07/2021
                bowlerOver = bow.getOver();//lastEvent.getBowlerOver();
                bowlerWicket = bow.getWicket();//lastEvent.getBowlerWicket();
                bowlerDots = bow.getDots();
                bowlerF4s = bow.getF4s();
                bowlerS6s = bow.getS6s();
                bowlerNoBall = bow.getNoBalls();
                bowlerWide = bow.getWides();
                bowlerMO = bow.getMaidenOver();

                if (bowlerBalls == 0) {
                    bowlerBalls = ballsPerOver;
                    if (bowlerOver > 0)
                        --bowlerOver;
                    else
                        bowlerOver = 0;
                }
            } else {

//                if (bowlerBalls == 0 && bwRun == 0) {
//
                resetBowler = true;
//                    bowlerWide = 0;
//                    bowlerMO = 0;
//                }
            }
            Log.d("undo", "setBowler, bowler : " + bow);
        }

//        tvBowler.setText(bowler);


//        Log.d("Scoring", "setBowler, bwRun : "+bwRun);
//        Log.d("Scoring", "setBowler, bowlerBalls : "+bowlerBalls);
//        Log.d("Scoring", "setBowler, bowlerOver : "+bowlerOver);
//        Log.d("Scoring", "setBowler, bowlerWicket : "+bowlerWicket);
//        Log.d("Scoring", "setBowler, bowlerF4s : "+bowlerF4s);
//        Log.d("Scoring", "setBowler, bowlerS6s : "+bowlerS6s);
//        Log.d("Scoring", "setBowler, bowlerMO : "+bowlerMO);
//
//        Log.d("Scoring", "setBowler, bowlerNoBall : "+bowlerNoBall);
//        Log.d("Scoring", "setBowler, bowlerWide : "+bowlerWide);

//
//        Events seclastEvent = realm.where(Events.class).
//                equalTo("matchid", matchid).
//                equalTo("eventID", (lastEventID - 1)).findFirst();
        lastPreBowlerID = lastEvent.getLastPreBowlerID();
        preBowlerID = lastEvent.getPrevBowlerID();

        if (preBowlerID != 0) {

            preBowler = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", fieldingTeamNo).
                    equalTo("playerID", preBowlerID).findFirst().getPlayerName();

            preBowlerRun = lastEvent.getPreBowlerRuns();
            preBowlerBalls = lastEvent.getPreBowlerBalls();
            pbt_balls = lastEvent.getPreBowlerTotalBalls(); // Added on 26/07/2021
            preBowlerOver = lastEvent.getPreBowlerOver();
            preBowlerWicket = lastEvent.getPreBowlerWicket();

        }

//        else {
////            nextBowlerID = lastEvent.getNextBowlerID();
////            if (nextBowlerID != 0){
////
////                nextBowler = realm.where(Player.class).
////                        equalTo("matchid", matchid).
////                        equalTo("team", fieldingTeamNo).
////                        equalTo("playerID", nextBowlerID).findFirst().getPlayerName();
////            }
//
//        }
    }



    private void setPreBowlerVisibility(boolean visible) {

        if (visible) {

            tvBowler2.setVisibility(View.VISIBLE);
            tvBowlerOver2.setVisibility(View.VISIBLE);
            tvBowlerRuns2.setVisibility(View.VISIBLE);
            tvBowlerWicket2.setVisibility(View.VISIBLE);
            tvBowlerMO2.setVisibility(View.VISIBLE);

            tvBowler2.setText(preBowler);
            //Updated on 27/07/2021
            if (HUNDRED) {
                tvBowlerOver2.setText(String.valueOf(pbt_balls));
                tvBowlerMO2.setText(String.valueOf(preBowlerDots));
            } else {

                tvBowlerOver2.setText(String.valueOf(new DecimalFormat("##.#").
                        format(setOverDisplay(preBowlerOver, preBowlerBalls))));
                tvBowlerMO2.setText(String.valueOf(preBowlerMO));
            }
            tvBowlerRuns2.setText(String.valueOf(preBowlerRun));
            tvBowlerWicket2.setText(String.valueOf(preBowlerWicket));
        }

        else {

            tvBowler2.setVisibility(View.INVISIBLE);
            tvBowlerOver2.setVisibility(View.INVISIBLE);
            tvBowlerRuns2.setVisibility(View.INVISIBLE);
            tvBowlerWicket2.setVisibility(View.INVISIBLE);
            tvBowlerMO2.setVisibility(View.INVISIBLE);
        }
    }




    void undoExtra(int upt){  // resetting extras in out



        Events lastEvent = realm.where(Events.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).findAll().last();

        Log.d("undo", "undoExtra 1, lastEventID : " + lastEvent.getEventID() + ",psRuns : " + psRuns +
                ", psBalls : " + psBalls + ", psOver : " + psOver);
        Log.d("undo", "undoExtra 1, strID : " + strID + ", nstrID : " + nstrID);
        Log.d("undo", "undoExtra 1, ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
        Log.d("undo", "undoExtra 1, ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);


        uout = lastEvent.getOutType();
        uetype = lastEvent.getExtraType();
//        urun = lastEvent.getCurrentRun();

        if (uetype  > -1){

            if (uetype == 0 || uetype == 1){

//                uerun = lastEvent.getExtraRuns(); Commented on 01/12/2021

//                if ((uerun % 2) != 0)
//                    swap();

                if (currentRuns >= uerun)
                    currentRuns = currentRuns - uerun;
                else
                    currentRuns = 0;

                if (psRuns >= uerun)
                    psRuns = psRuns - uerun;
                else
                    psRuns = 0;

               /* if ((uerun % 2) != 0)
                    swap();*/

                if (currentInnings > 1 && currentInnings < 99){

                    remainingRuns = remainingRuns + uerun;
                    leadingRuns = leadingRuns - uerun;
//                    ++remainingBalls;
//                    remainingOver = remainingOver + 0.1f;
                }
            }

            else  if (uetype == 2){

//                uerun = noballRun;    Commented on 01/12/2021

                // Added on 01/12/2021
                if (upt == 1) {
                    if (bwRun >= (uerun - penaltyRun))
                        bwRun = bwRun - (uerun - penaltyRun);
                    else
                        bwRun = 0;
                }
                else {  // === till here
                    if (bwRun >= uerun)
                        bwRun = bwRun - uerun;
                    else
                        bwRun = 0;
                }

                // added on 04/05/2020
                if (mo >= uerun)
                    mo = mo - uerun;
                else
                    mo = 0;

                if (bowlerNoBall > 0)
                    --bowlerNoBall;
                else
                    bowlerNoBall = 0;

                if ((uout != 2) && (uout != 7) && (uout != 6) && (uout != 5)) {
                    if (bowlerDots > 0)
                        --bowlerDots;
                    else
                        bowlerDots = 0;
                }

                if (currentRuns >= uerun)
                    currentRuns = currentRuns - uerun;
                else
                    currentRuns = 0;

                if (psRuns >= uerun)
                    psRuns = psRuns - uerun;
                else
                    psRuns = 0;

                if (currentInnings > 1 && currentInnings < 99){
                    remainingRuns = remainingRuns + uerun;
                }

            }

            else if (uetype == 3 || uetype == 6){

//                uerun = lastEvent.getExtraRuns(); Commented on 01/12/2021

//                if (((uerun - noballRun) % 2) != 0)
//                    swap();

                if (bowlerNoBall > 0)
                    --bowlerNoBall;
                else
                    bowlerNoBall = 0;

                if (bwRun >= noballRun)
                    bwRun = bwRun - noballRun;
                else
                    bwRun = 0;

                // added on 04/05/2020
                if (mo >= noballRun)
                    mo = mo - noballRun;
                else
                    mo = 0;

                if (currentRuns >= uerun)
                    currentRuns = currentRuns - uerun;
                else
                    currentRuns = 0;

                if (psRuns >= uerun)
                    psRuns = psRuns - uerun;
                else
                    psRuns = 0;



                if (currentInnings > 1 && currentInnings < 99){
                    remainingRuns = remainingRuns + uerun;
                }
            }

            else if (uetype == 4){

//                uerun = lastEvent.getExtraRuns();     Commented on 01/12/2021
//                if (((uerun - wideRun) % 2) != 0)
//                    swap();

                // Added on 01/12/2021
                if (upt == 1) {
                    if (bowlerWide >= (uerun - penaltyRun))
                        bowlerWide = bowlerWide - (uerun - penaltyRun);
                    else
                        bowlerWide = 0;

                    if (bwRun >= (uerun - penaltyRun))
                        bwRun = bwRun - (uerun - penaltyRun);
                    else
                        bwRun = 0;
                }
                else {  // === till here
                    if (bowlerWide >= uerun)
                        bowlerWide = bowlerWide - uerun;
                    else
                        bowlerWide = 0;

                    if (bwRun >= uerun)
                        bwRun = bwRun - uerun;
                    else
                        bwRun = 0;
                }

                // added on 04/05/2020
                if (mo >= uerun)
                    mo = mo - uerun;
                else
                    mo = 0;

                if (currentRuns >= uerun)
                    currentRuns = currentRuns - uerun;
                else
                    currentRuns = 0;
                Log.d("currentRuns", "undoExtra() : "+ currentRuns);

                if (psRuns >= uerun)
                    psRuns = psRuns - uerun;
                else
                    psRuns = 0;



                if (currentInnings > 1 && currentInnings != 99){
                    remainingRuns = remainingRuns + uerun;
                }

/*                ++bowlerBalls;
                if (bowlerBalls >= ballsPerOver) {
                    ++bowlerOver;
//                    if (bowlerBalls == ballsPerOver)
//                        bowlerBalls = 0;
//                    else if (bowlerBalls > ballsPerOver)
                        bowlerBalls = bowlerBalls - ballsPerOver;
                }*/

                ++totalBalls;
                currentOver = currentOver + 0.1f;
//                ++strikerBalls;
                ++ball;

                /*++psBalls;
                if (psBalls >= ballsPerOver) {
                    ++psOver;
                    if (psBalls == ballsPerOver)
                        psBalls = 0;
                    else if (psBalls == (ballsPerOver + 1))
                        psBalls = 1;
                }

                if (ps1ID == strID)
                    ++p1CB;
                else if (ps2ID == strID)
                    ++p2CB;*/
            }

            else if (uetype == 5) {

                uptype = lastEvent.getPenaltyType();

//                upteam = lastEvent.getPenaltyRunTeam();

                Log.d("undo", "undoExtra 1, uptype : " + uptype);
                Log.d("undo", "undoExtra 1, upteam : " + upteam);

                if (uptype == 1) {//upteam == battingTeamNo) {          // runs goes to batting team

                    if (currentRuns >= penaltyRun)
                        currentRuns = currentRuns - penaltyRun;
                    else
                        currentRuns = 0;
                    if (psRuns >= penaltyRun)
                        psRuns = psRuns - penaltyRun;
                    else
                        psRuns = 0;
                    uerun = penaltyRun;

//                    also need to delete the record
                } else if (uptype == 2) {          // runs goes to fielding team
                    uerun = 0;


                }
                boolean ballcount = lastEvent.isPenaltyBallCount();
                int penaltyBallCount = lastEvent.getPenaltyBallCounted();

              /* Commented on 17/12/2021
                // Added on 17/12/2021
                if (ballcount) {

                    undoBowlerOver();

                    if ((ball <= ballsPerOver) && (ball > 0))
                        --ball;
                    else if (ball > ballsPerOver)
                        ball = ball - ballsPerOver;

                    if (strikerBalls > 0)
                        --strikerBalls;
                    else
                        strikerBalls = 0;

                    if (totalBalls > 0)
                        --totalBalls;
                    else
                        totalBalls = 0;

                    if (currentOver >= 0.1f)
                        currentOver = currentOver - 0.1f;
                    else
                        currentOver = 0f;

                    // partnership undo
                    if ((psBalls <= ballsPerOver) && (psBalls > 0))
                        --psBalls;
                    else if (psBalls > ballsPerOver)
                        psBalls = psBalls - ballsPerOver;
                    else if (psBalls == 0) {
                        psBalls = ballsPerOver - 1;
                        if (psOver > 0)
                            --psOver;
                        else
                            psOver = 0;
                    }

                    --psTBalls;  // Added on 28/07/2021

                    if (ps1ID == strID){
                        if (p1CB > 0)
                            --p1CB;
                        else
                            p1CB = 0;
                    }
                    else if (ps2ID == strID){
                        if (p2CB > 0)
                            --p2CB;
                        else
                            p2CB = 0;
                    }

                    if (currentInnings > 1 && currentInnings < 99){

                        ++remainingBalls;
                        remainingOver = remainingOver + 0.1f;
                        resetRemainingOver();
                    }

                    modified = lastEvent.getUndoDisplay();
                }
                // === till here*/

                removeFromPenalty();
                /*RealmResults<Penalty> results = realm.where(Penalty.class).
                        equalTo("matchid", matchid).equalTo("innings", currentInnings).findAll();

                if (results.isEmpty()) {

                }

                else {
                    Penalty penalty = results.last();
                    if (penalty != null) {
                        if (!realm.isInTransaction()) {
                            realm.beginTransaction();
                        }

                        penalty.deleteFromRealm();
                        realm.commitTransaction();
                    }
                }*/


//                if (ballcount){
//                    strikerBalls--;
//                    if (penaltyBallCount == 1){
//                        bowlerBalls-- ;
//                        bowlerOver = - 0.1f;
//                        totalBalls--;
//                        currentOver = - 0.1f;
//                    }
//
//                }


//            }

//            cur

                if (currentInnings > 1 && currentInnings < 99) {

                    /*if (remainingRuns < 0) {

                        if (leadingRuns > 0)
                            leadingRuns = leadingRuns - uerun;

                        else if (leadingRuns < uerun)
                            remainingRuns = uerun - leadingRuns;
                    } else //if (remainingRuns > 0)*/
                    remainingRuns = remainingRuns + uerun;
                    leadingRuns = leadingRuns - urun;


                    /*++remainingBalls;
                    remainingOver = remainingOver + 0.1f;*/

                }
            }

            // Added on 02/12/2021
            else if (uetype == 7 || uetype == 8){

                if (bowlerNoBall > 0)
                    --bowlerNoBall;
                else
                    bowlerNoBall = 0;

                if (bwRun >= noballRun)
                    bwRun = bwRun - noballRun;
                else
                    bwRun = 0;

                // added on 04/05/2020
                if (mo >= noballRun)
                    mo = mo - noballRun;
                else
                    mo = 0;

                if (currentRuns >= uerun)
                    currentRuns = currentRuns - uerun;
                else
                    currentRuns = 0;

                if (psRuns >= uerun)
                    psRuns = psRuns - uerun;
                else
                    psRuns = 0;

                if (currentInnings > 1 && currentInnings < 99){
                    remainingRuns = remainingRuns + uerun;
                }
            }

            // === till here

            Log.d("undo", "undoExtra 2, lastEventID : " + lastEvent.getEventID() + ",psRuns : " + psRuns +
                    ", psBalls : " + psBalls + ", psOver : " + psOver);
            Log.d("undo", "undoExtra 2, strID : " + strID + ", nstrID : " + nstrID);
            Log.d("undo", "undoExtra 2, ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
            Log.d("undo", "undoExtra 2, ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);


            setUndoExtraCard(uetype, uerun, upt, 1);

        }

        Log.d("undo", "undoExtra 3, lastEventID : " + lastEvent.getEventID() + ",psRuns : " + psRuns +
                ", psBalls : " + psBalls + ", psOver : " + psOver);
        Log.d("undo", "undoExtra 3, strID : " + strID + ", nstrID : " + nstrID);
        Log.d("undo", "undoExtra 3, ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
        Log.d("undo", "undoExtra 3, ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);

    }






    public void setUndoExtraCard(int uetype, int uerun, int upt, int i) {
//        setExtraCard();

        Realm realm = null;
        try {

            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgrealm) {

                    try {

                        ExtraCard extraCard = bgrealm.where(ExtraCard.class).equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).findFirst();


                        ecByes = extraCard.getByes();
                        ecLB = extraCard.getLb();
                        ecNoball = extraCard.getNoBall();
                        ecWide = extraCard.getWide();
                        ecPenlaty = extraCard.getPenalty();
                        Log.d("scoring", "undo, b4 object ; " + extraCard);
                        Log.d("scoring", "undo, b4 b ; " + ecByes);
                        Log.d("scoring", "undo, b4 lb ; " + ecLB);
                        Log.d("scoring", "undo, b4 nb ; " + ecNoball);
                        Log.d("scoring", "undo, b4 wd ; " + ecWide);
                        Log.d("scoring", "undo, b4 p ; " + ecPenlaty);
                        Log.d("scoring", "undo, b4 uetype ; " + uetype);
                        Log.d("scoring", "undo, b4 uerun ; " + uerun);
                        Log.d("scoring", "undo, b4 upt ; " + upt);
                        Log.d("scoring", "undo, b4 i ; " + i);


                        if (uetype == 0) {
                            if (ecByes > 0) {
                                // Added on 01/12/2021
                                if (upt == 1) {
                                    ecByes = ecByes - (uerun - penaltyRun);
//                                        --ecPenlaty;
                                } else    // === till here
                                    ecByes = ecByes - uerun;
                            }
                        }

                        else if (uetype == 1) {
                            if (ecLB > 0) {
                                // Added on 01/12/2021
                                if (upt == 1) {
                                    ecLB = ecLB - (uerun - penaltyRun);
//                                        --ecPenlaty;
                                } else    // === till here
                                    ecLB = ecLB - uerun;
                            }
                        }

                        else if (uetype == 4) {
//                                int t = uerun;// - wideRun;
                            // Added on 01/12/2021
                            if (upt == 1) {
                                if ((ecWide >= (uerun - penaltyRun)) && ecWide > 0) {
                                    ecWide = ecWide - (uerun - penaltyRun);
                                }
                                else
                                    ecWide = 0;
//                                    --ecPenlaty;
                            }
                            else {  // === till here
                                if (ecWide >= uerun && ecWide > 0) {
                                    ecWide = ecWide - uerun;
                                }
                                else
                                    ecWide = 0;
                            }
                        }

                        else if (uetype == 2){
                            --ecNoball;
                            // Added on 02/12/2021
//                                if (upt == 1)
//                                    --ecPenlaty;
                            // === till here
                        }

                        else if (uetype == 3) {
                            --ecNoball;

                            if (ecByes > 0) {
                                // Added on 01/12/2021
                                if (upt == 1) {
                                    ecByes = ecByes - (uerun - penaltyRun - noballRun);
//                                        --ecPenlaty;
                                } else    // === till here
                                    ecByes = ecByes - (uerun - noballRun);
                            }
//                                else
//                                    ecByes = ecByes - noballRun
                        }

                        else if (uetype == 6) {
                            --ecNoball;

                            if (ecLB > 0)
                                // Added on 01/12/2021
                                if (upt == 1) {
                                    ecLB = ecLB - (uerun - penaltyRun - noballRun);
//                                        --ecPenlaty;
                                } else
                                    ecLB = ecLB - (uerun - noballRun);
//                                else
//                                    extraRun = ecLB - noballRun;

                        }

                        else if (uetype == 5){
                            --ecPenlaty;
                        }

                        // Added on 02/12/2021
                        else if (uetype == 7 || uetype == 8){
                            --ecNoball;
                        }
                        // ===  till  here

                        // Added on 01/12/2021
                        if ((uetype > -1) && (uetype != 5) &&( upt == 1)) {
                            --ecPenlaty;
                        }
                        //  ===  till here
                        extraCard.setByes(ecByes);
                        extraCard.setLb(ecLB);
                        extraCard.setWide(ecWide);
                        extraCard.setNoBall(ecNoball);
                        extraCard.setPenalty(ecPenlaty);

                        Log.d("scoring", "undo, af object ; " + extraCard);
                        Log.d("scoring", "undo, af b ; " + ecByes);
                        Log.d("scoring", "undo, af lb ; " + ecLB);
                        Log.d("scoring", "undo, af nb ; " + ecNoball);
                        Log.d("scoring", "undo, af wd ; " + ecWide);
                        Log.d("scoring", "undo, af p ; " + ecPenlaty);


                        bgrealm.insertOrUpdate(extraCard);
                        Log.d("scoring", "undo, extraCard ; " + extraCard);


//                    }catch(RealmPrimaryKeyConstraintException e){
//                        Toast.makeText(getApplicationContext(), "Primary Key exists, Press Update instead",
//                                Toast.LENGTH_SHORT).show();
//                    }
//                }
//            });

                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });

        } catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }


    }



    void resetPartnership(int dismissedPlayerID) {

        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
        RealmResults<Partnership> results = realm.where(Partnership.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).
                findAll();

        if (results.isEmpty())
            Log.d("Partnership", "results : " + results);
        else {

            Partnership partnership = results.last();
            Log.d("Partnership", "partnership.getDismissedPlayerID() : " + partnership.getDismissedPlayerID());
            Log.d("Partnership", "dismissedPlayerID : " + dismissedPlayerID);
            if (partnership.getDismissedPlayerID() == dismissedPlayerID) {

//                syncBowler();

                config = new RealmConfiguration.Builder()
                        .name(AppConstants.GAME_ID + ".realm")
                        .deleteRealmIfMigrationNeeded()
                        .build();
                realm = Realm.getInstance(config);
                realm.executeTransaction(new Realm.Transaction() {
                    @Override
                    public void execute(Realm realm) {

                        try {

                            partnership.setDismissedPlayerID(-1);
                            partnership.setSync(0);


                            realm.insertOrUpdate(partnership);
//                        }

                        } catch (RealmException e){
                            Log.d("SynchBowler", "Exception  : "+e);
                        }
                    }

                });

            }
        }
    }




    void removeFromFOW(int dismissedPlayerID){

        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);

        FOW fowLast = realm.where(FOW.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).
                equalTo("team", battingTeamNo).
                equalTo( "dismissedPlayerID", dismissedPlayerID).findFirst();


        if(fowLast != null){

            if (!realm.isInTransaction())
            {
                realm.beginTransaction();
            }

            fowLast.deleteFromRealm();

            realm.commitTransaction();
        }
    }



    void removeFromPenalty() {


        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);

        RealmResults<Penalty> results= realm.where(Penalty.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).findAll();

        if (results.isLoaded()) {
            Penalty penaltylast = results.last();


            if (penaltylast != null) {

                if (!realm.isInTransaction()) {
                    realm.beginTransaction();
                }

                penaltylast.deleteFromRealm();

                realm.commitTransaction();
            }
        }
    }




    void resetRetire(int retiredPlayerID){



        Log.e ("Scoring", "resetRetire st beginning, retiredList : "+retiredList);
        Log.e ("Scoring", "resetRetire st beginning, dismissedList : "+dismissedList);

        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);

       /* Realm realms = null;
        try {
            realms = Realm.getDefaultInstance();
            realms.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgrealm) {

                    try {

                        Batsman batsman = bgrealm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("team", battingTeamNo).
                                equalTo("batsman_pID", retiredPlayerID).findFirst();

                        batsman.setRetired(false);
                        bgrealm.copyToRealmOrUpdate(batsman);
                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("scoring", "onclick, Exception : " + e);
        }

        finally {
            if (realms != null) {
                realms.close();
            }
        }


        if (retiredList.size() > 0) {
            for (int i = 0; i < retiredList.size(); i++) {

                if (retiredList.get(i) == retiredPlayerID) {

                    retiredList.remove(i);
                }
            }
        }*/

//        Log.e ("Scoring", "resetRetire at last, retiredList : "+retiredList);
//        Log.e("Scoring", "resetRetire at last, dismissedList : "+dismissedList);



        Realm realms = null;
        try {
            realms = Realm.getDefaultInstance();
            realms.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgrealm) {

                    try {

                        Batsman batsman = bgrealm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("team", battingTeamNo).
                                equalTo("batsman_pID", retiredPlayerID).findFirst();

                        batsman.setRetired(false);
                        bgrealm.copyToRealmOrUpdate(batsman);

                        /*if (player_in_id > 0) {
                            Player player = bgrealm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", battingTeamNo).
                                    equalTo("playerID", player_in_id).findFirst();

                            if (player != null) {

                                player.setSubstitute(true);
                                bgrealm.copyToRealmOrUpdate(player);
                            }
                        }*/



                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("scoring", "onclick, Exception : " + e);
        }

        finally {
            if (realms != null) {
                realms.close();
            }
        }


        if (retiredList.size() > 0) {
            for (int i = 0; i < retiredList.size(); i++) {

                if (retiredList.get(i) == retiredPlayerID) {

                    retiredList.remove(i);
                }
            }
        }

        Log.e ("Scoring", "resetRetire at last, retiredList : "+retiredList);
        Log.e("Scoring", "resetRetire at last, dismissedList : "+dismissedList);


    }




    void resetOUT(Events lastEvent) {//event) {

        boolean setBatsman = false;


        Log.d("TEST", "resetOUT, lastEvent 1 = " + lastEvent);

        /*Events lastEvent = realm.where(Events.class).
               equalTo("matchid", matchid).
                equalTo("innings", currentInnings).findAll().last();*/
//                equalTo("innings", currentInnings).max("eventID");
//                equalTo("eventID",  (event.getEventID() - 1)).findFirst();
        if (lastEvent != null) {

            Log.d("TEST", "resetOUT, lastEvent 1 = " + lastEvent);
            Log.d("TEST", "resetOUT, lastEvent.getBallType 1 = " + lastEvent.getBallType());
            if (lastEvent.getBallType() == 3) {



                if (lastEvent.getSyncstatus() == 1)
                    eventSync = true;
                else
                    eventSync = false;

                lastEventID = lastEvent.getEventID();

                undo_balltype_7 = true;
                out = false;
                uout = lastEvent.getOutType();
                uetype = lastEvent.getExtraType();
                urun = lastEvent.getCurrentRun();
                uerun = lastEvent.getExtraRuns();
                int upt = lastEvent.getPenaltyType();
                bowler = ubowler;
                Log.d("undo2", "resetOUT ubtype : " + ubtype + ", events : " + lastEvent + ", uout : " + uout
                        + ", currentRuns : " + currentRuns + ", currentOver : " + currentOver);
                setStrikerNonStriker(lastEvent);
                setBowler(lastEvent);

                if ((uout != (player_count - 1)) && (wicket > 0)) {

                    if (wicket > 0)
                        --wicket;
                    else
                        wicket = 0;
                }

                if (allOUT) {
                    allOUT = false;
                    tvTotalWicket.setVisibility(View.VISIBLE);
                    tvdiv.setVisibility(View.VISIBLE);
                    endOfInnings = false;

                    // disabling all buttons in Scoring
//                    btnUndo.setEnabled(false);
                    btnSwap.setEnabled(true);
                    btnScore.setEnabled(true);
                    btnOut.setEnabled(true);
                    btnExtras.setEnabled(true);
                    btnHash.setEnabled(true);
//                    btnCom.setEnabled(false);
                    btn0.setEnabled(true);
                    btn1.setEnabled(true);
                    btn2.setEnabled(true);
                    btn3.setEnabled(true);
                    btn4.setEnabled(true);
                    btn6.setEnabled(true);
                    btnInterval.setEnabled(true);
                    btnChangeBatsman.setEnabled(true);
                    btnChangeBowler.setEnabled(true);
                }

                Log.d("undo2", "resetOUT wicket : " + wicket + ", allOUT : " + allOUT + ", currentRuns : " + currentRuns +
                        ", currentOver : " + currentOver);

                if (urun > 0) {

                    Log.d("undo2", "resetOUT urun > 0, urun : " + urun);

                    if ((urun % 2) != 0)
                        swap();
                }



                if (uetype > -1) {
                    Log.d("undo2", "resetOUT, uetype : " + uetype + ", uerun : " + uerun);

                    if (uetype == 0 || uetype == 1) {
                        // Added on 02/12/2021
                        if (upt == 1) {
                            if (((uerun - penaltyRun) % 2) != 0) {
                                swap();
                            }
                        }
                        else {  //== till here
                            if ((uerun % 2) != 0) {
                                swap();
                            }
                        }
                    }

                    else if (uetype == 3 || uetype == 6) {
                        // Added on 02/12/2021
                        if (upt == 1) {
                            if (((uerun - noballRun - penaltyRun) % 2) != 0) {
                                swap();
                            }
                        }
                        else {  // ===  till here
                            if (((uerun - noballRun) % 2) != 0)
                                swap();
                        }
                    }

                    else if (uetype == 4) {
                        // Added on 02/12/2021
                        if (upt == 1) {
                            if (((uerun - wideRun - penaltyRun) % 2) != 0) {
                                swap();
                            }
                        }
                        else {  // === till here
                            if (((uerun - wideRun) % 2) != 0)
                                swap();
                        }
                    }
                }

                if (urun == 0) {

                    Log.d("undo2", "resetOUT urun = 0, b4, strikerDots : " + strikerDots
                            + ", player1Dots : " + player1Dots + ", player2Dots : " + player2Dots + ", bowlerDots : " + bowlerDots);

                    if (strID == player1ID) {
                        --player1Dots;
                        strikerDots = player1Dots;
                    }
                    if (strID == player2ID) {
                        --player2Dots;
                        strikerDots = player2Dots;
                    }

                    if (uout != 10 && uout != 12)
                        --bowlerDots;

                    Log.d("undo2", "resetOUT urun = 0, after, strikerDots : " + strikerDots
                            + ", player1Dots : " + player1Dots + ", player2Dots : " + player2Dots + ", bowlerDots : " + bowlerDots);
                }


                if (uout >= 0 && uout <= 5 && uout != 2) {
                    removeFromFOW(lastEvent.getDismissedPlayerID());

                    if (bowlerWicket > 0)
                        --bowlerWicket;
                    else
                        bowlerWicket = 0;

                    if (uetype != 4) {
                        if (strikerBalls > 0)
                            --strikerBalls;
                        else
                            strikerBalls = 0;

                        if (ps1ID == strID) {
                            if (p1CB > 0)
                                --p1CB;
                            else
                                p1CB = 0;
                        } else if (ps2ID == strID) {
                            if (p2CB > 0)
                                --p2CB;
                            else
                                p2CB = 0;
                        }
                    }

                    if (uetype != 2) {

                        if (uetype != 4) {
                            if ((bowlerBalls <= ballsPerOver) && (bowlerBalls > 0)) {
                                --bowlerBalls;
                                --bt_balls; // Added on 26/07/2021
                            }
                            else if (bowlerBalls > ballsPerOver)
                                bowlerBalls = bowlerBalls - ballsPerOver;
                            else if (bowlerBalls == 0)
                                bowlerBalls = ballsPerOver;
                        }

                        if (totalBalls > 0)
                            --totalBalls;
                        else
                            totalBalls = 0;


                        ball = lastEvent.getCurrentOverBalls();

                        if ((ball <= ballsPerOver) && (ball > 0))
                            --ball;
                        else if (ball > ballsPerOver)
                            ball = ball - ballsPerOver;
//                        else if (ball == 0)
//                            ball = ballsPerOver;

                        if (currentOver >= 0.1f)
                            currentOver = currentOver - 0.1f;
                        else
                            currentOver = 0f;

                    }

                    if (currentRuns >= urun)
                        currentRuns = currentRuns - urun;

                    else
                        currentRuns = 0;

                    if (uout == 5) {
                        /*if (urun == 0) {

                            if (strikerDots > 0)
                                --strikerDots;
                            else
                                strikerDots = 0;

                            if (bowlerDots > 0)
                                --bowlerDots;
                            else
                                bowlerDots = 0;

                        }*/

                        if (urun > 0) {

                            if (strikerRuns >= urun)
                                strikerRuns = strikerRuns - urun;
                            else
                                strikerRuns = 0;

                            if (psRuns >= urun)
                                psRuns = psRuns - urun;
                            else
                                psRuns = 0;

                            if (strID == ps1ID) {
                                if (p1CR >= urun)
                                    p1CR = p1CR - urun;
                                else
                                    p1CR = 0;
                            } else if (strID == ps2ID) {
                                if (p2CR >= urun)
                                    p2CR = p2CR - urun;
                                else
                                    p2CR = 0;
                            }

//                            if (currentRuns >= urun)
//                                currentRuns = currentRuns - urun;
//                            else
//                                currentRuns = 0;
//
//                            remainingRuns = remainingRuns + urun;
//                            leadingRuns = leadingRuns - urun;

                            if (bwRun >= urun)
                                bwRun = bwRun - urun;
                            else
                                bwRun = 0;

                            // added on 04/05/2020
                            if (mo >= urun)
                                mo = mo - urun;
                            else
                                mo = 0;

                        }
                    }

                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    if (uetype > -1) {

                        if (uetype != 4 && uetype != 2) {

                            if ((psBalls <= ballsPerOver) && (psBalls > 0))
                                --psBalls;
                            else if (psBalls > ballsPerOver)
                                psBalls = psBalls - ballsPerOver;
                            else if (psBalls == 0) {
                                psBalls = ballsPerOver - 1;
                                if (psOver > 0)
                                    --psOver;
                                else
                                    psOver = 0;
                            }

                            --psTBalls;     // Added on 28/07/2021
                        }
//
                        undoExtra(lastEvent.getPenaltyType());
                    }

                    else {
                        if ((psBalls <= ballsPerOver) && (psBalls > 0))
                            --psBalls;
                        else if (psBalls > ballsPerOver)
                            psBalls = psBalls - ballsPerOver;
                        else if (psBalls == 0) {
                            psBalls = ballsPerOver - 1;
                            if (psOver > 0)
                                --psOver;
                            else
                                psOver = 0;
                        }

                        --psTBalls;     // Adde don 28/07/2021
                    }


                    if (currentInnings > 1 && currentInnings < 99) {

                        remainingRuns = remainingRuns + urun;
                        leadingRuns = leadingRuns - urun;

                        ++remainingBalls;
                        remainingOver = remainingOver + 0.1f;
                        // added on 06/05/2020
                        resetRemainingOver();
                    }


                    Log.d("undo", "resetOUT 2, lastEventID : " + lastEvent.getEventID() + ", outType : " + lastEvent.getOutType() +
                            ", psRuns : " + psRuns + ", psBalls : " + psBalls + ", psOver : " + psOver + ", currentRuns : " + currentRuns +
                            ", currentOver : " + currentOver);
                    Log.d("undo", "resetOUT 2, strID : " + strID + ", nstrID : " + nstrID);
                    Log.d("undo", "resetOUT 2, ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
                    Log.d("undo", "resetOUT 2, ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);


                } else if (uout == 2 || uout == 7) {

                    removeFromFOW(lastEvent.getDismissedPlayerID());

                    Log.d("undo", "resetOUT 3, lastEventID : " + lastEvent.getEventID() + ", outType : " + lastEvent.getOutType() +
                            ", psRuns : " + psRuns + ", psBalls : " + psBalls + ", psOver : " + psOver + ", currentRuns : " + currentRuns +
                            ", currentOver : " + currentOver + ", bowlerBalls : " + bowlerBalls);
                    Log.d("undo", "resetOUT 3, strID : " + strID + ", nstrID : " + nstrID);
                    Log.d("undo", "resetOUT 3, ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
                    Log.d("undo", "resetOUT 3, ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);

                    ball = lastEvent.getCurrentOverBalls();

                    if (uetype != 2 && uetype != 3 /*&& uetype != 4*/ && uetype != 6) {

                        if (uetype != 4) {
                            if ((psBalls <= ballsPerOver) && (psBalls > 0))
                                --psBalls;
                            else if (psBalls > ballsPerOver)
                                psBalls = psBalls - ballsPerOver;
                            else if (psBalls == 0) {
                                psBalls = ballsPerOver - 1;
                                if (psOver > 0)
                                    --psOver;
                                else
                                    psOver = 0;
                            }

                            --psTBalls;     // Added on 28/07/2021
                        }

                        if (uetype != 4) {
                            if ((bowlerBalls <= ballsPerOver) && (bowlerBalls > 0)) {
                                --bowlerBalls;
                                --bt_balls; // Added on 26/07/2021
                            }
                            else if (bowlerBalls > ballsPerOver)
                                bowlerBalls = bowlerBalls - ballsPerOver;
                            else if (bowlerBalls == 0) {
                                bowlerBalls = ballsPerOver;
                                --bowlerOver;
                            }
                        }

                        if (totalBalls > 0)
                            --totalBalls;
                        else
                            totalBalls = 0;

                        if ((ball <= ballsPerOver) && (ball > 0))
                            --ball;
                        else if (ball > ballsPerOver)
                            ball = ball - ballsPerOver;
//                    else if (ball == 0)
//                        ball = ballsPerOver;
                        /*--ball;*/

                        if (currentOver >= 0.1f)
                            currentOver = currentOver - 0.1f;
                        else
                            currentOver = 0f;
                    }

                    if (uetype != 4) {
                        if (strikerBalls > 0)
                            --strikerBalls;
//                else
//                    strikerBalls = 0;
                    }

                    urun = lastEvent.getCurrentRun();
                    Log.d("undo2", "resetOUT 4, uout " + uout + ", urun : " + urun + ", currentRuns : " + currentRuns +
                            ", currentOver : " + currentOver + ", bowlerBalls : " + bowlerBalls);
                    Log.d("undo2", "resetOUT 4, strID : " + strID + ", ps1ID " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
                    Log.d("undo2", "resetOUT 4, strID : " + strID + ", ps2ID " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p1CB);

                    /*if (urun == 0) {

                        if (strikerDots > 0)
                            --strikerDots;
                        else
                            strikerDots = 0;

                        if (bowlerDots > 0)
                            --bowlerDots;
                        else
                            bowlerDots = 0;

                    }*/

//                    if (urun > 0) {

                    if (strikerRuns >= urun)
                        strikerRuns = strikerRuns - urun;
                    else
                        strikerRuns = 0;

                    if (currentRuns >= urun)
                        currentRuns = currentRuns - urun;
                    else
                        currentRuns = 0;

                    remainingRuns = remainingRuns + urun;
                    leadingRuns = leadingRuns - urun;

                    if (bwRun >= urun)
                        bwRun = bwRun - urun;
                    else
                        bwRun = 0;

                    // added on 04/05/2020
                    if (mo >= urun)
                        mo = mo - urun;
                    else
                        mo = 0;


                    // partnership details
                    if (psRuns >= urun)
                        psRuns = psRuns - urun;
                    else
                        psRuns = 0;



                    if (strID == ps1ID) {
                        if (p1CR >= urun)
                            p1CR = p1CR - urun;
                        else
                            p1CR = 0;

                        if (uetype != 4) {
                            if (p1CB > 0)
                                --p1CB;
                            else
                                p1CB = 0;
                        }
                    } else if (strID == ps2ID) {
                        if (p2CR >= urun)
                            p2CR = p2CR - urun;
                        else
                            p2CR = 0;

                        if (uetype != 4) {
                            if (p2CB > 0)
                                --p2CB;
                            else
                                p2CB = 0;
                        }
                    }

                    if (urun == 4) {
                        if (strikerF4s > 0)
                            --strikerF4s;
                        else
                            strikerF4s = 0;

                        if (bowlerF4s > 0)
                            --bowlerF4s;
                        else
                            bowlerF4s = 0;
                    }

                    if (urun == 6) {
                        if (strikerS6s > 0)
                            --strikerS6s;
                        else
                            strikerS6s = 0;

                        if (bowlerS6s > 0)
                            --bowlerS6s;
                        else
                            bowlerS6s = 0;
                    }

                    /*if ((urun % 2) != 0)
                        swap();*/
//                    }

                    if (uetype > -1) {

                       /* if (currentRuns >= (uerun))
                            currentRuns = currentRuns - uerun;
                        else
                            currentRuns = 0;

                        remainingRuns = remainingRuns + uerun;
                        leadingRuns = leadingRuns - uerun;*/

                        undoExtra(lastEvent.getPenaltyType());
                    }


                    if (currentInnings > 1 && currentInnings != 99) {

                        ++remainingBalls;
                        remainingOver = remainingOver + 0.1f;
                        // added on 06/05/2020
                        resetRemainingOver();
                    }


                    Log.d("undo", "resetOUT 5, lastEventID : " + lastEvent.getEventID() +
                            ", outType : " + lastEvent.getOutType() +
                            ", psRuns : " + psRuns + ", psBalls : " + psBalls + ", psOver : " + psOver + ", currentRuns : " + currentRuns +
                            ", currentOver : " + currentOver + ", bowlerBalls : " + bowlerBalls);
                    Log.d("undo", "resetOUT 5, strID : " + strID + ", nstrID : " + nstrID);
                    Log.d("undo", "resetOUT 5, ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
                    Log.d("undo", "resetOUT 5, ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);


                } else if (uout >= 6 && uout < 9) {

                    removeFromFOW(lastEvent.getDismissedPlayerID());
                    ball = lastEvent.getCurrentOverBalls();

                    if (totalBalls > 0)
                        --totalBalls;
                    else
                        totalBalls = 0;

                    if (uetype == 2 || uetype == 3 /*|| uetype == 4 */|| uetype == 6) {
                        Log.d("undo", "do nothing uetype = " + uetype);
                    }

                    else {

//                        if ((uetype != 4)) {  commented on 02/12/2021
                        if ((uetype == 0) || (uetype == 1) || (uetype == 5)) {  // updated on 02/12/2021
                            if ((psBalls <= ballsPerOver) && (psBalls > 0))
                                --psBalls;
                            else if (psBalls > ballsPerOver)
                                psBalls = psBalls - ballsPerOver;
                            else if (psBalls == 0) {
                                psBalls = ballsPerOver - 1;
                                if (psOver > 0)
                                    --psOver;
                                else
                                    psOver = 0;
                            }

                            --psTBalls;     // Added on 28/07/2021
                        }

//                        if (uetype != 4) {  commented on 02/12/2021
                        if ((uetype == 0) || (uetype == 1) || (uetype == 5)) {  // updated on 02/12/2021
                            if ((bowlerBalls <= ballsPerOver) && (bowlerBalls > 0)) {
                                --bowlerBalls;
                                --bt_balls; // Added on 26/07/2021
                            }
                            else if (bowlerBalls > ballsPerOver)
                                bowlerBalls = bowlerBalls - ballsPerOver;
                            else if (bowlerBalls == 0) {
                                bowlerBalls = ballsPerOver;
                                --bowlerOver;
                            }
                        }

                        if ((uetype != 2) && (uetype != 4) && (uetype != 7) && (uetype != 8)) {   // added condition on 02/12/2021

                            if (currentOver >= 0.1f)
                                currentOver = currentOver - 0.1f;
                            else
                                currentOver = 0f;

                            if ((ball <= ballsPerOver) && (ball > 0))
                                --ball;
                            else if (ball > ballsPerOver)
                                ball = ball - ballsPerOver;
//                            else if (ball == 0)
//                                ball = ballsPerOver;
                        }
                    }



                    if (uetype != 4) {
                        if (strikerBalls > 0)
                            --strikerBalls;
                        else
                            strikerBalls = 0;

                        if (ps1ID == strID) {
                            if (p1CB > 0)
                                --p1CB;
                            else
                                p1CB = 0;
                        } else if (ps2ID == strID) {
                            if (p2CB > 0)
                                --p2CB;
                            else
                                p2CB = 0;
                        }
                    }

                    if (urun > 0) {

                        if (currentRuns >= urun)
                            currentRuns = currentRuns - urun;
                        else
                            currentRuns = 0;


                        if (psRuns >= urun)
                            psRuns = psRuns - urun;
                        else
                            psRuns = 0;

                        if (bwRun >= urun)
                            bwRun = bwRun - urun;
                        else
                            bwRun = 0;

                        // added on 04/05/2020
                        if (mo >= urun)
                            mo = mo - urun;
                        else
                            mo = 0;

                        if (strikerRuns >= urun)
                            strikerRuns = strikerRuns - urun;
                        else
                            strikerRuns = 0;


                        if (strID == ps1ID) {
                            if (p1CR >= urun)
                                p1CR = p1CR - urun;
                            else
                                p1CR = 0;
                        }
                        else if (strID == ps2ID) {
                            if (p2CR >= urun)
                                p2CR = p2CR - urun;
                            else
                                p2CR = 0;
                        }

                        if (urun == 4) {

                            if (strikerF4s > 0)
                                --strikerF4s;
                            else
                                strikerF4s = 0;

                            if (bowlerF4s > 0)
                                --bowlerF4s;
                            else
                                bowlerF4s = 0;
                        }

                        if (urun == 6) {

                            if (strikerS6s > 0)
                                --strikerS6s;
                            else
                                strikerS6s = 0;

                            if (bowlerS6s > 0)
                                --bowlerS6s;
                            else
                                bowlerS6s = 0;
                        }

                    }

                    if (uetype > -1) {

                        undoExtra(lastEvent.getPenaltyType());
                    }

                    if (currentInnings > 1 && currentInnings < 99) {

                        remainingRuns = remainingRuns + urun + uerun;
                        leadingRuns = leadingRuns - urun - uerun;

                        if (uout == 6 || uout == 8) {
                            ++remainingBalls;
                            remainingOver = remainingOver + 0.1f;
                            // added on 06/05/2020
                            resetRemainingOver();
                        }
                    }

                    Log.d("undo", "resetOUT 6, lastEventID : " + lastEvent.getEventID() + ", outType : " + lastEvent.getOutType() +
                            ", psRuns : " + psRuns + ", psBalls : " + psBalls + ", psOver : " + psOver + ", currentRuns : " + currentRuns +
                            ", currentOver : " + currentOver);
                    Log.d("undo", "resetOUT 6, strID : " + strID + ", nstrID : " + nstrID);
                    Log.d("undo", "resetOUT 6, ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
                    Log.d("undo", "resetOUT 6, ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);

                } else if (uout == 9 || uout == 11) {
                    removeFromFOW(lastEvent.getDismissedPlayerID());
                } else if (uout == 10) {
                    resetRetire(lastEvent.getDismissedPlayerID());
                } else if (uout == 12) {

                    removeFromFOW(lastEvent.getDismissedPlayerID());
                    ball = lastEvent.getCurrentOverBalls();
                    currentRuns = lastEvent.getTotalRuns();
                    totalBalls = lastEvent.getBalls();
                    currentOver = lastEvent.getOvers();
                }

                if (uout != 10 && uout != 11 && uout != 12)
                    modified = lastEvent.getUndoDisplay();

                if (dismissedList.size() > 0) {
                    for (int i = 0; i < dismissedList.size(); i++) {

                        if (dismissedList.get(i) == lastEvent.getDismissedPlayerID()) {
                            dismissedList.remove(i);
                        }
                    }
                } else
                    Log.e("Scoring", "undo, dismissedList.size : " + dismissedList.size());

                Log.e("Scoring", "undo, dismissedList : " + dismissedList);
                Log.e("Scoring", "undo, retiredList : " + retiredList);

//            resetValues(lastEvent);
            } else {
                Log.d("lastEvent", "balltype != 3 :  " + lastEvent);
                pre_interval = true;
            }

            if (bowlerID != 0)
                syncBowler();
            if (preBowlerID == 0 || SUPER_OVER) {
                setPreBowlerVisibility(false);
            }

            else
                setPreBowlerVisibility(true);

            if (strID != 0)
                syncBatsmann(strID, 0, null, false, -1, false,
                        false, false);

            if (nstrID != 0)
                syncBatsmann(nstrID, 0, null, false, -1, false,
                        false, false);

            modified = lastEvent.getUndoDisplay();

            sessionID = lastEvent.getSessionId();
            sessionType = lastEvent.getSession();
            dismissedPlayrID = 0;   // Added on 07/07/2021

            Log.d("lastEvent", "resetOUT 1, lastEvent :  " + lastEvent);
            syncPartnership(wicket + 1, outType, 0, false, true);

            Log.d("lastEvent", "resetOUT 2, lastEvent :  " + lastEvent);
            Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                    "Dismissal undone", Toast.LENGTH_SHORT).show();
            // added on 21/01/2021
            resetValues(lastEvent, ubtype);

            Log.d("remainingOver", "ubtype = 3, 2 : " + remainingOver);
            Log.d("remainingBalls", "ubtype = 3, 2 : " + remainingBalls);
            Log.d("pre_interval", "ubtype = "+ ubtype + ", pre_interval : " + pre_interval);
            // ============ till here

            /* Commented on 30/08/2021
            if (pre_interval) {
                undo();
            }*/

        }

    }




    void resetValues(Events lastEvent, int ubtype){

        Log.d("undo", "resetValues 01, ubtype : " + ubtype + ", lastEvent : " + lastEvent);
//        lastEventID = lastEvent.getEventID();

        if (bowlerID != 0)
            syncBowler();
        if (preBowlerID == 0 || SUPER_OVER) {
            setPreBowlerVisibility(false);
        }

        else
            setPreBowlerVisibility(true);

        Log.d("undo", "resetValues, ubtype : " + ubtype + ", lastEvent 9 : " + lastEvent);

        if (strID != 0)
            syncBatsmann(strID, 0, null, false, -1, retired,
                    false, false);

        if (nstrID != 0)
            syncBatsmann(nstrID, 0, null, false, -1, retired,
                    false, false);

//        if (lastEvent.getBallType() == 3)
        syncPartnership(wicket + 1, outType, 0, false, false);
//        else

        Log.d("undo", "resetValues, ubtype : " + ubtype + ", lastEvent 8 : " + lastEvent);

        if (strID == player1ID) {

            player1 = striker;
            player1Runs = strikerRuns;
            player1Balls = strikerBalls;
            player1Dots = strikerDots;
            player1F4s = strikerF4s;
            player1S6s = strikerS6s;
            player2 = nonStriker;
            player2Runs = nonStrikerRuns;
            player2Balls = nonStrikerBalls;
            player2Dots = nonStrikerDots;
            player2F4s = nonStrikerF4s;
            player2S6s = nonStrikerS6s;
            player1Selected.setVisibility(View.VISIBLE);
            player2Selected.setVisibility(View.GONE);

        }

        else if (strID == player2ID) {

            player2 = striker;
            player2Runs = strikerRuns;
            player2Balls = strikerBalls;
            player2Dots = strikerDots;
            player2F4s = strikerF4s;
            player2S6s = strikerS6s;
            player1 = nonStriker;
            player1Runs = nonStrikerRuns;
            player1Balls = nonStrikerBalls;
            player1Dots = nonStrikerDots;
            player1F4s = nonStrikerF4s;
            player1S6s = nonStrikerS6s;
            player1Selected.setVisibility(View.GONE);
            player2Selected.setVisibility(View.VISIBLE);
        }

        Log.d("undo", "resetValues, lastEventID : " + lastEventID + ", psRuns : " + psRuns + ", psBalls : " + psBalls +
                ", psOver : " + psOver);

        Log.d("undo", "resetValues, strID : " + strID + ", strikerRuns : " + strikerRuns +
                ", strikerBalls : " + strikerBalls + ", strikerDots : " + strikerDots +
                ", strikerF4s : " + strikerF4s + ", strikerS6s : " + strikerS6s);

        Log.d("undo", "resetValues, nstrID : " + nstrID + ", nonStrikerRuns : " + nonStrikerRuns +
                ", nonStrikerBalls : " + nonStrikerBalls + ", nonStrikerDots : " + nonStrikerDots +
                ", nonStrikerF4s : " + nonStrikerF4s + ", nonStrikerS6s : " + nonStrikerS6s);

        Log.d("undo", "resetValues, player1ID : " + player1ID + ", player1Runs : " + player1Runs +
                ", player1Balls : " + player1Balls + ", player1Dots : " + player1Dots +
                ", player1F4s : " + player1F4s + ", player1S6s : " + player1S6s);

        Log.d("undo", "resetValues, player2ID : " + player2ID + ", player2Runs : " + player2Runs +
                ", player2Balls : " + player2Balls + ", player2Dots : " + player2Dots +
                ", player2F4s : " + player2F4s + ", player2S6s : " + player2S6s);


        tvTotalRuns.setText(String.valueOf(currentRuns));
        Log.d("currentRuns", "resetValues : " + currentRuns);
        //Updated on 27/07/2021
        if (HUNDRED)
            tvPlayingOver.setText(String.valueOf(totalBalls));
        else
            tvPlayingOver.setText(String.valueOf(
                    new DecimalFormat("##.#").format(currentOver)));
        tvTotalWicket.setText(String.valueOf(wicket));

        Log.d("undo", "resetValues, ubtype : " + ubtype + ", lastEvent 7 : " + lastEvent);

        setInningsRuns(currentInnings, currentRuns);

        Log.d("undo", "resetValues, ubtype : " + ubtype + ", lastEvent 6 : " + lastEvent);

        if (currentInnings == 1 || currentInnings == 99)
            ll_remainings.setVisibility(View.GONE);

        else {

            ll_remainings.setVisibility(View.VISIBLE);

            if (remainingRuns > 0)
                tvRemainingRuns.setText(String.valueOf(remainingRuns));
//            else if (leadingRuns > 0 && totalInnings == 4) {
            if (leadingRuns > remainingRuns && totalInnings == 4) {
                tvRemainingRuns.setText(String.valueOf(leadingRuns));
                tvRemainingRunsText.setText("Leading Runs : ");
            }


            if (tvRemainingOversBallsText.isShown()) {

                if (remainingBalls > 100) {
                    tvRemainingOversBallsText.setText(", Overs : ");
                    tvRemainingOversBalls.setText(String.valueOf(
                            new DecimalFormat("##.#").format(remainingOver)));
                }

                else {
                    tvRemainingOversBallsText.setText(", Balls : ");
                    Log.e("Scoring", "resetValues, remainingBalls 1 : "+remainingBalls);
                    Log.e("Scoring", "resetValues, leadingRuns 1 : "+leadingRuns);
                    tvRemainingOversBalls.setText(String.valueOf(remainingBalls));
                }
            }

            if (innings.matches("single")){
                tvRemainingRunsText.setText("Remaining Runs : ");
            }

            else {

                if (remainingRuns > 0) {
                    if (currentInnings == 4)
                        tvRemainingRunsText.setText("Remaining Runs : ");
                    else
                        tvRemainingRunsText.setText("Trial Runs : ");
                }

                else
                    tvRemainingRunsText.setText("Lead Runs : ");
            }
        }

        tvPlayer1.setText(player1);
        tvPlayer1Runs.setText(String.valueOf(player1Runs));
        tvPlayer1Balls.setText(String.valueOf(player1Balls));
        tvPlayer2.setText(player2);
        tvPlayer2Runs.setText(String.valueOf(player2Runs));
        tvPlayer2Balls.setText(String.valueOf(player2Balls));

        Log.d("SCoring", "Inside resetValues");
        tvBowler.setText(bowler);
        //Updated on 27/07/2021
        if (HUNDRED) {
            tvBowlerOver.setText(String.valueOf(bt_balls));
            tvBowlerMO.setText(String.valueOf(bowlerDots));
        } else {
            tvBowlerOver.setText(String.valueOf(new
                    DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));
            tvBowlerMO.setText(String.valueOf(bowlerMO));
        }
        tvBowlerRuns.setText(String.valueOf(bwRun));
        tvBowlerWicket.setText(String.valueOf(bowlerWicket));


        Log.d("undo", "resetValues, ubtype : " + ubtype + ", lastEvent 5 : " + lastEvent);

        if (!SUPER_OVER && preBowlerID != 0) {

            tvBowler2.setText(preBowler);
            //Updated on 27/07/2021
            if (HUNDRED) {
                tvBowlerOver2.setText(String.valueOf(pbt_balls));
                tvBowlerMO2.setText(String.valueOf(preBowlerDots));
            } else {
                tvBowlerOver2.setText(String.valueOf(new
                        DecimalFormat("##.#").format(setOverDisplay(preBowlerOver, preBowlerBalls))));
                tvBowlerMO2.setText(String.valueOf(preBowlerMO));
            }
            tvBowlerRuns2.setText(String.valueOf(preBowlerRun));
            tvBowlerWicket2.setText(String.valueOf(preBowlerWicket));
        }

        if (preBowlerID == 0 /*&& nextBowlerID != 0*/){

            tvBowler2.setText("");
            //Updated on 27/07/2021
            if (HUNDRED)
                tvBowlerOver.setText(String.valueOf(0));
            else
                tvBowlerOver2.setText(String.valueOf(new DecimalFormat("##.#").format(0)));
            tvBowlerRuns2.setText(String.valueOf(0));
            tvBowlerWicket2.setText(String.valueOf(0));
            tvBowlerMO2.setText(String.valueOf(0));
        }

        tvCurrentOver.setText(modified);
        Log.d("modified2", modified);
        Log.d("udisplay2", udisplay);

        Log.d("undo", "resetValues, ubtype : " + ubtype + ", lastEvent 4 : " + lastEvent);
//        sessionID = lastEvent.getSessionId();
//        session = lastEvent.getSessionT();

        if (currentInnings == 1 || currentInnings == 99)
            ll_remainings.setVisibility(View.GONE);

        else {

            ll_remainings.setVisibility(View.VISIBLE);

            if (remainingRuns > 0)
                tvRemainingRuns.setText(String.valueOf(remainingRuns));
//            else if (leadingRuns >= 0 && totalInnings == 4){
            if (leadingRuns > remainingRuns && totalInnings == 4){
                tvRemainingRuns.setText(String.valueOf(leadingRuns));
                tvRemainingRunsText.setText("Leading Runs : ");
            }

            Log.e("resetValues", "undo, leadingRuns 2 : "+leadingRuns);

            if (remainingBalls < 100) {
                tvRemainingOversBallsText.setText(", Balls : ");
                Log.e("Scoring", "undo, remainingBalls 2 : "+remainingBalls);
                tvRemainingOversBalls.setText(String.valueOf(remainingBalls));
            }

            else {
                tvRemainingOversBallsText.setText(", Overs : ");
                tvRemainingOversBalls.setText(String.valueOf(new
                        DecimalFormat("##.#").format(remainingOver)));
            }

            if (innings.matches("single")){
                tvRemainingRunsText.setText("Remaining Runs : ");
            }


            else {

                if (remainingRuns > 0) {
                    if (currentInnings == 4)
                        tvRemainingRunsText.setText("Remaining Runs : ");
                    else
                        tvRemainingRunsText.setText("Trial Runs : ");
                }

                else
                    tvRemainingRunsText.setText("Lead Runs : ");
            }
        }

        if (innings.matches("multi") && totalOver == 1000) {
            tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
            tvRemainingOversBalls.setVisibility(View.INVISIBLE);
        }


        else {
            tvRemainingOversBallsText.setVisibility(View.VISIBLE);
            tvRemainingOversBalls.setVisibility(View.VISIBLE);
        }

        Log.d("undo", "resetValues, eventSync : "+ eventSync);
        Log.d("undo", "resetValues, ubtype : " + ubtype + ", lastEvent 3 : " + lastEvent);

        // removing the last Event from device database

       /* Commented on 21/01/2021
        if (undo_balltype_7) {
            Log.d("undo", "lastEvent : " + lastEvent);
            undo_balltype_7 = false;
        }
        else {*/

            /*if (UNDO_LIMIT) {

                Log.d("undo", "resetValues, UNDO_LIMIT : " + UNDO_LIMIT + ", lastEvent : " + lastEvent);

            }

            else {*/


/*
        Moving it to bottom
                if (lastEvent != null) {
                    if (!realm.isInTransaction()) {
                        realm.beginTransaction();
                    }

                    lastEvent.deleteFromRealm();
                    realm.commitTransaction();

                    if (undo_balltype_7) {
                        Log.d("undo", "lastEvent : " + lastEvent);
                        undo_balltype_7 = false;
//                        undo();
                    }
                }*/
//            }
//        }         // commented on 21/01/2021


        // removing the last event from server
//        if (jsonEventArray != null){


        if (!lastOut) {

            // commented on 30/04/2020
            /*// added on 27/04/20
            if (isNetworkAvailable()) {
                jsonEventArray = new JSONArray();
                resetJSONEventArray();
            }*/

            // added on 04/05/2020
            if (UNDO_LIMIT) {

                initializeBowler();
                syncBowler();
                RealmResults<Events> results= realm.where(Events.class).
                        equalTo("matchid", matchid).
                        equalTo("innings", currentInnings).findAll();

               /* if (results.isEmpty()) {

                    Events lastEvent1 = new Events();
                    saveUndo(lastEventID, false, false, lastEvent1, false);
                }

                else {
                    Events lastEvent1 = results.last();
                    if (eventSync) {
                        saveUndo(lastEventID, false, false, lastEvent1, true);
                    }
                }*/


            }

            else {
                int temp_count = realm.where(Events.class).
                        equalTo("matchid", matchid).
                        equalTo("innings", currentInnings).
//                        beginGroup().                                   // Added on 23/11/2021
//                            notEqualTo("ballType", 15).     // Added on 23/11/2021
//                            and().                                     // Added on 23/11/2021
//                            notEqualTo("sessionId", 6).    // Added on 23/11/2021
//                        endGroup().                                   // Added on 23/11/2021
        findAll().size();

                if (temp_count <= 0) {

                    UNDO_LIMIT = true;
                    inningsNotStarted = true;
                    AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
                    alertDialog.setIcon(R.drawable.ball);
                    alertDialog.setCancelable(false);
                    alertDialog.setTitle("Undo has reached limit");
                    alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                    btnUndo.setEnabled(false);
                                    initializeBowler();
                                    // Added on 20/12/2021
                                    modified = "";
                                    udisplay = "";
                                    //=== till here
                                    syncBowler();
                                    setExtraCard(/*UNDO_LIMIT*/);
                                }
                            });
                    alertDialog.show();

                } else {
                    //=========== till here
                    Events events = realm.where(Events.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).
                            findAll().last();

                    Log.d("undo", "events 1 : " + events);

                    if (events != null) {

                        Log.d("undo", "eventSync : " + eventSync + ", events 2 : " + events);
                        // post undo
//               jsonUndoArray.put(setUndoArray(events, lastEventID));
                        if (eventSync) {
//                            saveUndo(lastEventID, false, false, events, true); Commeted on 06/07/2021
                            // updated on 06/7/2021
                            Events lastEvent1 = realm.where(Events.class).
                                    equalTo("matchid", matchid).
                                    equalTo("eventID", lastEventID).findFirst();

                            // Added on 04/08/2021
                            RealmResults<Events> results = realm.where(Events.class).
                                    equalTo("matchid", matchid).
                                    lessThan("eventID", lastEventID).findAll();
                            Log.d("PE", "2 results = " + results);
                            if (results.size() > 0) {
                                Events preEvent = results.last();
                                Log.d("PE", "2 preEvent = " + preEvent);
                                if (preEvent != null)
                                    undo_last_event_id = preEvent.getEventID();
                                else
                                    undo_last_event_id = 0;
                            }
                            else
                                undo_last_event_id = 0;
                            Log.d("PE", "2 undo_last_event_id = " + undo_last_event_id);
                            // === till here

                            if (lastEvent1 != null){
                                Log.d("SCORE", "resetValues, 2 lastEvent1 = " + lastEvent1);
                                saveUndo(lastEventID, false, false, lastEvent1, true, undo_last_event_id); // Updated on 04/08/2021
                            }
                            else {
                                Events lastEvent123 = new Events();
                                Log.d("SCORE", "resetValues,(2+null) lastEvent123 = " + lastEvent123);
                                saveUndo(lastEventID, false, false, lastEvent123, true, undo_last_event_id); // Updated on 04/08/2021
                            }

                            post(8);    // Added on 25/11/2021



                        }

//               if (isNetworkAvailable())
//                   postJSON(true);

                    }
                }


            }
        }

        else
            lastOut = false;

        extra = 0;



        // Added from top
        if (lastEvent != null) {

            if (!realm.isInTransaction()) {
                realm.beginTransaction();
            }

            lastEvent.deleteFromRealm();
            realm.commitTransaction();

            if (undo_balltype_7) {
                Log.d("undo", "lastEvent : " + lastEvent);
                undo_balltype_7 = false;
//                        undo();
            }

            displayEventID();  // Added on 24/11/2021
        }
    }



    void resetRemainingOver() {

        Log.d("remainingOver", "resetRemainingOver, first : " + remainingOver);

        int temp_ro = (int) remainingOver;
        float difference = remainingOver - temp_ro;
        if (difference > 0) {

            float float_balls = difference * 10;
            int temp_balls = (int) float_balls;
            if (temp_balls == ballsPerOver) {

                ++ temp_ro;
                remainingOver = (float) temp_ro;

                Math.round(remainingOver);
            }
        }

        Log.d("remainingOver", "resetRemainingOver, last : " + remainingOver);
    }




    public void saveUndo(int lastEventID, boolean uout, boolean preOut, Events event,
                         boolean lastevent, int undo_last_event_id) {

        Log.d("SCORE", "saveUndo, event = " + event.getEventID());
        Log.d("SCORE", "saveUndo, lastevent = " + lastevent);
        Log.d("SCORE", "saveUndo, lastEventID = " + lastEventID);
        Log.d("SCORE", "saveUndo, event = " + event);
        Realm realm = null;
        try {
//            Toast.makeText(getApplicationContext(), "Inside savePlayerDetails", Toast.LENGTH_SHORT).show();
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {


                    try {
                        Number num = bgRealm.where(Undo.class).max("undoID");
                        undoID = (num == null) ? 1 : num.intValue() + 1;

                        Undo undoObject = bgRealm.createObject(Undo.class, undoID);
                        undoObject.setMatchid(matchid);
                        undoObject.setMatchID(matchID);
                        undoObject.setInnings(currentInnings);
                        undoObject.setEventID(lastEventID);
                        undoObject.setPreOut(preOut);

//                        // Added on 04/08/2021
//                        if (event != null)
//                            undoObject.setUndo_last_event_id(event.getEventID());
//                        else
                        undoObject.setUndo_last_event_id(undo_last_event_id);
                        // === till here

//                        undoObject.setBowler_pID(bowlerID);
//                        undoObject.setPreBowler_pID(preBowlerID);
//                        undoObject.setStriker_pID(strID);
//                        undoObject.setNonStriker_pID(nstrID);
//                        undoObject.setTotalscore(currentRuns);
//                        undoObject.setTotalwicket(wicket);
//
//                        undoObject.setTotalovers(currentOver);
                        undoObject.setSync(0);
//                        undoObject.setSUPER_OVER(SUPER_OVER);

                        // added on 14/05/2020
                        undoObject.setBowler_pID(bowlerID);
                        // Added on 13/11/2021
                        if (bowlerID > 0) {
                            Player p = bgRealm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", fieldingTeamNo).
                                    equalTo("playerID", bowlerID).findFirst();
                            if (p != null)
                                undoObject.setBowler_D4SID(p.getD4s_playerid());
                        }
                        // till here
                        undoObject.setStriker_pID(strID);
                        // Added on 13/11/2021
                        if (strID > 0) {
                            Player p = bgRealm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", battingTeamNo).
                                    equalTo("playerID", strID).findFirst();
                            if (p != null)
                                undoObject.setStriker_D4SID(p.getD4s_playerid());
                        }
                        // till here
                        Batsman bat = bgRealm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("team", battingTeamNo).
                                equalTo("batsman_pID", strID).findFirst();
                        if (bat != null) {

                            Log.d("SA", "saveUndo, Str, bat = " + bat);

                            undoObject.setStrikerRuns(bat.getRuns());
                            undoObject.setStrikerBalls(bat.getBalls());
                            undoObject.setStrikerBattingOrder(bat.getBattingOrder());
                            undoObject.setStrikerDots(bat.getDots());
                            undoObject.setStrikerF4s(bat.getF4s());
                            undoObject.setStrikerS6s(bat.getS6s());
                            undoObject.setStrikerOutType(bat.getOutType());
                            strBO = bat.getBattingOrder();
                        }

                        //nonstriker details
                        undoObject.setNonStriker_pID(nstrID);
                        // Added on 13/11/2021
                        if (nstrID > 0) {
                            Player p = bgRealm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", battingTeamNo).
                                    equalTo("playerID", nstrID).findFirst();
                            if (p != null)
                                undoObject.setNonStriker_D4SID(p.getD4s_playerid());
                        }
                        // till here
                        bat = bgRealm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("team", battingTeamNo).
                                equalTo("batsman_pID", nstrID).findFirst();
                        if (bat != null) {

                            Log.d("SA", "saveUndo, Nstr, bat = " + bat);

                            undoObject.setNonStrikerRuns(bat.getRuns());
                            undoObject.setNonStrikerBalls(bat.getBalls());
                            undoObject.setNonStrikerBattingOrder(bat.getBattingOrder());
                            undoObject.setNonStrikerDots(bat.getDots());
                            undoObject.setNonStrikerF4s(bat.getF4s());
                            undoObject.setNonStrikerS6s(bat.getS6s());
                            undoObject.setNonStrikerOutType(bat.getOutType());
                            nstrBO = bat.getBattingOrder();
                        }


                        // bowler details
//                        undoObject.setBowler_pID(bowlerID);
                        Bowler bows = bgRealm.where(Bowler.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("team", fieldingTeamNo).
                                equalTo("playerID", bowlerID).findFirst();
                        if (bows != null) {

                            Log.d("HUNDRED", "saveUndo 1, bows = " + bows);

                            undoObject.setBowlerRuns(bows.getRuns());
                            undoObject.setBowlerOver(bows.getOver());
                            undoObject.setBowlerBalls(bows.getBalls());
                            undoObject.setBowlerWicket(bows.getWicket());
                            undoObject.setBowlerDots(bows.getDots());
                            undoObject.setBowlerMO(bows.getMaidenOver());
                            undoObject.setBowlerWides(bows.getWides());
                            undoObject.setBowlerNoball(bows.getNoBalls());
                            // added on  16/07/2020
                            undoObject.setBowlerF4s(bows.getF4s());
                            undoObject.setBowlerS6s(bows.getS6s());


                        }

                        // pre bowler details
                        if (preBowlerID != 0) {
                            undoObject.setPreBowler_pID(preBowlerID);
                            // Added on 13/11/2021
                            if (preBowlerID > 0) {
                                Player p = bgRealm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", fieldingTeamNo).
                                        equalTo("playerID", preBowlerID).findFirst();
                                if (p != null)
                                    undoObject.setPreBowler_D4SID(p.getD4s_playerid());
                            }
                            // till here
                            bows = bgRealm.where(Bowler.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", currentInnings).
                                    equalTo("team", fieldingTeamNo).
                                    equalTo("playerID", preBowlerID).findFirst();
                            if (bows != null) {

                                undoObject.setPreBowlerRuns(bows.getRuns());
                                undoObject.setPreBowlerBalls(bows.getBalls());
                                undoObject.setPreBowlerOver(bows.getOver());
                                undoObject.setPreBowlerWicket(bows.getWicket());
                                undoObject.setPreBowlerDots(bows.getDots());
                                undoObject.setPreBowlerMO(bows.getMaidenOver());
                                undoObject.setPreBowlerWides(bows.getWides());
                                undoObject.setPreBowlerNoball(bows.getNoBalls());
                                // added on  16/07/2020
                                undoObject.setPreBowlerF4s(bows.getF4s());
                                undoObject.setPreBowlerS6s(bows.getS6s());
                            }
                        }


                        // set extras details
                        ExtraCard extraCard = bgRealm.where(ExtraCard.class).
                                equalTo("matchid", matchid).
                                equalTo("innings",currentInnings).findFirst();
                        if (extraCard != null){

                            undoObject.setExtraBye(extraCard.getByes());
                            undoObject.setExtraLb(extraCard.getLb());
                            undoObject.setExtraWd(extraCard.getWide());
                            undoObject.setExtraNb(extraCard.getNoBall());
                            undoObject.setExtraP(extraCard.getPenalty());
                        }


                        //partnership details
                        int wk = 0;
                        if (ballType == 3 && outType != 10)
                            wk = wicket;
                        else
                            wk = wicket + 1;

                        RealmResults<Partnership> results = bgRealm.where(Partnership.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("wicket", wk).findAll();

                        if (results.isEmpty()) {

                        }
                        else {
                            Partnership partnership = results.last();
                            if (partnership != null) {
                                undoObject.setP_wicket_no(partnership.getWicket());
                                undoObject.setP_sequence_no(partnership.getPartnershipSequence());
                                undoObject.setP_run(partnership.getPartnershipRuns());
                                undoObject.setP_ball(partnership.getPartnershipBalls());
                                undoObject.setP_over(partnership.getPartnershipOver());
                                undoObject.setP_p1Id(partnership.getPlayer1ID());
                                // Added on 13/11/2021
                                if ((partnership.getPlayer1ID()) > 0) {
                                    Player p = bgRealm.where(Player.class).
                                            equalTo("matchid", matchid).
                                            equalTo("team", battingTeamNo).
                                            equalTo("playerID", (partnership.getPlayer1ID())).findFirst();
                                    if (p != null)
                                        undoObject.setP_p1D4SID(p.getD4s_playerid());
                                }
                                // till here
                                undoObject.setP_p2Id(partnership.getPlayer2ID());
                                // Added on 13/11/2021
                                if ((partnership.getPlayer2ID()) > 0) {
                                    Player p = bgRealm.where(Player.class).
                                            equalTo("matchid", matchid).
                                            equalTo("team", battingTeamNo).
                                            equalTo("playerID", (partnership.getPlayer2ID())).findFirst();
                                    if (p != null)
                                        undoObject.setP_p2D4SID(p.getD4s_playerid());
                                }
                                // till here
                                undoObject.setP_disId(partnership.getDismissedPlayerID());
                                // Added on 13/11/2021
                                if ((partnership.getDismissedPlayerID()) > 0) {
                                    Player p = bgRealm.where(Player.class).
                                            equalTo("matchid", matchid).
                                            equalTo("team", battingTeamNo).
                                            equalTo("playerID", (partnership.getDismissedPlayerID())).findFirst();
                                    if (p != null)
                                        undoObject.setP_disD4SID(p.getD4s_playerid());
                                }
                                // till here
                                undoObject.setP_p1cr(partnership.getPlayer1ContributionRuns());
                                undoObject.setP_p1cb(partnership.getPlayer1ContributionBalls());
                                undoObject.setP_p2cr(partnership.getPlayer2ContributionRuns());
                                undoObject.setP_p2cb(partnership.getPlayer2ContributionBalls());

                                if (ballType != 3) {
                                    undoObject.setP_broken(false);
                                } else {
                                    if (outType == 10)
                                        undoObject.setP_broken(false);
                                    else if (outType != 10)
                                        undoObject.setP_broken(true);
                                }
                            }
                        }



                        // added on 26/06/2020
                        undoObject.setBatting_team(battingTeamNo);
                        undoObject.setTotalovers(currentOver);
                        undoObject.setOver((int)currentOver);
                        undoObject.setBall(ball);
                        undoObject.setTotalscore(currentRuns);
                        undoObject.setTotalwicket(wicket);
//                        strikerid = 0;
//                        nonstrikerid = 0;
//                        bowlerid = 0;

                        if (lastevent) {
                            undoObject.setBalltype(event.getBallType());
                            undoObject.setDismissedbatsmanid(event.getDismissedPlayerID());
                            undoObject.setDismissedbatsmanD4SID(event.getDismissedPlayerD4SID());   // Added on 13/11/21
                            undoObject.setDisnewbatsmanid(event.getDisNewBatsmanID());
                            undoObject.setDisnewbatsmanD4SID(event.getDisNewBatsmanD4SID());   // Added on 13/11/21
                            undoObject.setFielderids(event.getFielderID());
                            undoObject.setExtraType(event.getExtraType());
                            undoObject.setFreehit(event.isFreeHit());
                            undoObject.setOuttype(event.getOutType());

                            // added on 27/06/2020
                            undoObject.setPenaltytype(event.getPenaltyType());// penaltytype = 0;
                            undoObject.setRuns(event.getCurrentRun());
                            undoObject.setExtras(event.getExtraRuns());
                            undoObject.setPenalty(event.getPenaltyRuns());
                            undoObject.setCommentary(event.getCommentary());
                            undoObject.setStrokedirection(event.getStrokeDirection());
                            undoObject.setSessionId(event.getSessionId());
                            undoObject.setIntervalId(event.getIntervalId());

                            undoObject.setOverScore(event.getMo());

                            undoObject.setSub_team(event.getSub_team());
                            undoObject.setSub_playerout_id(event.getSub_playerout_id());
                            undoObject.setSub_playerin_id(event.getSub_playerin_id());

                            undoObject.setPower_start_over(event.getPower_start_over());//power.getStart());
                            undoObject.setPower_end_over(event.getPower_end_over());//power.getEnd());
                            undoObject.setPower_sequence(event.getPower_sequence());//power.getCount());

                            undoObject.setRevisedTarget(event.getRevisedTarget());
                            undoObject.setAppliedRainRule(event.getAppliedRainRule());


                            // Added on 28/08/2021
                            if (event.getDismissedPlayerID() > 0) {
                                if (event.getDismissedPlayerID() == strID)
                                    undoObject.setDismissedPlayerBattingOrder(strBO);
                                else if (event.getDismissedPlayerID() == nstrID)
                                    undoObject.setDismissedPlayerBattingOrder(nstrBO);
                            }

                            if (event.getDisNewBatsmanID() > 0)
                                undoObject.setDisNewBatsmanBattingOrder(event.getDisNewBatsmanBattingOrder());

                            // ================ till here =================

//                            setEventJSON()
                        }
                        else {
//                            undoObject.setDisnewbatsmanid(0);//disnewbatsmanid = 0;
//                            undoObject.setFielderids("");//fielderids = null;
//                            undoObject.setExtraType(extraType);//extratype
                        }

                        bgRealm.copyToRealm(undoObject);
                        Log.d("SCORE", "saveUndo, undoObject = " + undoObject.toString());
//                        Log.d("TEST", "saveUndo, undoObject 1 = " + undoObject);

//                        post(4);    Commented on 25/11/2021
//                        setUndoArray(undoID, lastEventID, uout, preOut);

                    }
                    catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });

//            setUndoArray(undoID, lastEventID, currentInnings, uout, preOut);

            // commented on 27/06/2020
            /*// added on 27/06/2020
            jsonUndoArray.put(setUndo());*/

            //commented on 08/07/2020
//            post();
        }
        catch (RealmException e){
            Toast.makeText(getApplicationContext(), "Exception : "+ e, Toast.LENGTH_SHORT).show();
        }
        finally {

            if (realm != null) {
                realm.close();
            }
        }

        post(4);    // moved to here on 25/11/2021
    }







    void changeStriker(boolean forceSwap) {

        Log.e("Scoring", "changeStriker, striker : "+striker);
        Log.e("Scoring", "changeStriker, nonstriker : "+nonStriker);

//        Log.d("changeStriker", " matchid :"+matchid);
//        Log.d("changeStriker", " matchID :"+matchID);

        if (forceSwap) {

            Log.e("Scoring", "changeStriker(forceSwap), striker : "+striker);
            Log.e("Scoring", "changeStriker(forceSwap), nonstriker : "+nonStriker);

            swapAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
            swapAlert.setIcon(R.drawable.ball);
            swapAlert.setCancelable(false);
            swapAlert.setTitle("Confirm to swap strike");
            swapAlert.setButton(AlertDialog.BUTTON_POSITIVE, "CONFIRM",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            swap();
//                            forceSwap = false;
                        }
                    });

            swapAlert.setButton(AlertDialog.BUTTON_NEGATIVE, "CANCEL",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
//                            forceSwap = false;
                        }
                    });
            swapAlert.show();

        }

        else {

            Log.e("Scoring", "changeStriker(!forceSwap), striker : "+striker);
            Log.e("Scoring", "changeStriker(!forceSwap), nonstriker : "+nonStriker);
            swap();

        }



    }





    public void swap(){
        Log.d("swap", "method called");
        /*Log.e("Scoring", "outToScoring, starting of swap striker : "+striker);
        Log.e("Scoring", "outToScoring, starting of swap strID : "+strID);
        Log.e("Scoring", "outToScoring, starting of swap strikerRuns : "+strikerRuns);
        Log.e("Scoring", "outToScoring, starting of swap strikerBalls : "+strikerBalls);
        Log.e("Scoring", "outToScoring, starting of swap strikerF4s : "+strikerF4s);
        Log.e("Scoring", "outToScoring, starting of swap strikerS6s : "+strikerS6s);

        Log.e("Scoring", "outToScoring, starting of swap nonStriker : "+nonStriker);
        Log.e("Scoring", "outToScoring, starting of swap nstrID : "+nstrID);
        Log.e("Scoring", "outToScoring, starting of swap nonStrikerRuns : "+nonStrikerRuns);
        Log.e("Scoring", "outToScoring, starting of swap nonStrikerBalls : "+nonStrikerBalls);
        Log.e("Scoring", "outToScoring, starting of swap nonStrikerF4s : "+nonStrikerF4s);
        Log.e("Scoring", "outToScoring, starting of swap nonStrikerS6s : "+nonStrikerS6s);

        Log.e("Scoring", "outToScoring, starting of swap player1 : "+player1);
        Log.e("Scoring", "outToScoring, starting of swap player1ID : "+player1ID);
        Log.e("Scoring", "outToScoring, starting of swap player1Runs : "+player1Runs);
        Log.e("Scoring", "outToScoring, starting of swap player1Balls : "+player1Balls);
        Log.e("Scoring", "outToScoring, starting of swap player1F4s : "+player1F4s);
        Log.e("Scoring", "outToScoring, starting of swap player1S6s : "+player1S6s);

        Log.e("Scoring", "outToScoring, starting of swap player2 : "+player2);
        Log.e("Scoring", "outToScoring, starting of swap player2ID : "+player2ID);
        Log.e("Scoring", "outToScoring, starting of swap player2Runs : "+player2Runs);
        Log.e("Scoring", "outToScoring, starting of swap player2Balls : "+player2Balls);
        Log.e("Scoring", "outToScoring, starting of swap player2F4s : "+player2F4s);
        Log.e("Scoring", "outToScoring, starting of swap player2S6s : "+player2S6s);
*/



        if (player1Selected.getVisibility() == View.VISIBLE) {

            player1Selected.setVisibility(View.GONE);
            player2Selected.setVisibility(View.VISIBLE);

            strID = player2ID;
            striker = player2;
            strikerRuns = player2Runs;
            strikerBalls = player2Balls;
            strikerDots = player2Dots;
            strikerF4s = player2F4s;
            strikerS6s = player2S6s;

            nstrID = player1ID;
            nonStriker = player1;
            nonStrikerRuns = player1Runs;
            nonStrikerBalls = player1Balls;
            nonStrikerDots = player1Dots;
            nonStrikerF4s = player1F4s;
            nonStrikerS6s = player1S6s;

        } else {

            player2Selected.setVisibility(View.GONE);
            player1Selected.setVisibility(View.VISIBLE);

            strID = player1ID;
            striker = player1;
            strikerRuns = player1Runs;
            strikerBalls = player1Balls;
            strikerDots = player1Dots;
            strikerF4s = player1F4s;
            strikerS6s = player1S6s;

            nstrID = player2ID;
            nonStriker = player2;
            nonStrikerRuns = player2Runs;
            nonStrikerBalls = player2Balls;
            nonStrikerDots = player2Dots;
            nonStrikerF4s = player2F4s;
            nonStrikerS6s = player2S6s;

        }

        /*Log.e("Scoring", "swap, striker : "+striker);
        Log.d("Scoring", "swap, nonstriker : "+nonStriker);

        Log.e("Scoring", "outToScoring, end of swap striker : "+striker);
        Log.e("Scoring", "outToScoring, end of swap strID : "+strID);
        Log.e("Scoring", "outToScoring, end of swap strikerRuns : "+strikerRuns);
        Log.e("Scoring", "outToScoring, end of swap strikerBalls : "+strikerBalls);
        Log.e("Scoring", "outToScoring, end of swap strikerF4s : "+strikerF4s);
        Log.e("Scoring", "outToScoring, end of swap strikerS6s : "+strikerS6s);

        Log.e("Scoring", "outToScoring, end of swap nonStriker : "+nonStriker);
        Log.e("Scoring", "outToScoring, end of swap nstrID : "+nstrID);
        Log.e("Scoring", "outToScoring, end of swap nonStrikerRuns : "+nonStrikerRuns);
        Log.e("Scoring", "outToScoring, end of swap nonStrikerBalls : "+nonStrikerBalls);
        Log.e("Scoring", "outToScoring, end of swap nonStrikerF4s : "+nonStrikerF4s);
        Log.e("Scoring", "outToScoring, end of swap nonStrikerS6s : "+nonStrikerS6s);*/
    }




    void addRuns(){

//     Log.d("addRuns()", " matchid :"+matchid);
//     Log.d("addRuns()", " matchID :"+matchID);



        addRunsBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        addRunsBuilder.setIcon(R.drawable.ball);
        addRunsBuilder.setCancelable(false);
        addRunsBuilder.setTitle("Enter the Runs");

        final EditText input = new EditText(this);

        input.setInputType(InputType.TYPE_CLASS_NUMBER);
        addRunsBuilder.setView(input);
//        Log.d("Test", "inside AddRuns()");
        addRunsBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {

            //            @Override
            public void onClick(DialogInterface dialog, int which) {

                firstbowler = false;

                if (input.getText().equals(null)){
                    Toast.makeText(getApplicationContext(),
                            "Please enter the Run", Toast.LENGTH_SHORT).show();
                }

                else {
                    builderText = Integer.parseInt(input.getText().toString());
//                    Log.d("Test", "BuilderText : " + builderText);


                    if (builderText != 0){

                        displayOver(builderText);

//                        setPlayerRuns(builderText);

                    }
                    else {
                        Log.d("Test","buildertext = 0");
                    }

                }
            }
        });

        addRunsBuilder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
            }
        });

        AlertDialog alert = addRunsBuilder.create();
        alert.show();

        builderText = 0;
    }



//    void addRuns(int run){
//
////        Log.d("addRuns()", " matchid :"+matchid);
////        Log.d("addRuns()", " matchID :"+matchID);
//
//        switch (run){
//
//            case 0:
//                displayOver(run);
//                break;
//
//            case 1:
//                displayOver(run);
//                break;
//
//            case 2:
//                displayOver(run);
//                break;
//
//            case 3:
//                displayOver(run);
//                break;
//
//            case 4:
//                displayOver(run);
//                break;
//
//            case 6:
//                displayOver(run);
//                break;
//
//                default:
//                    break;
//        }
//
//    }




    // function to set over

    void setOver(int runs){

        Log.d("MODIFIED", "setOver() 10, runs : " + runs);
        Log.d("MODIFIED", "setOver() 10, extras : " + extras);
        Log.d("MODIFIED", "setOver() 10, confirm_extras : " + confirm_extras);
        Log.d("MODIFIED", "setOver() 10, modified : " + modified);
        Log.d("MODIFIED", "setOver() 10, udisplay : " + udisplay);

        Log.e("SETOVER", "beginning, remainingOver : "+remainingOver);
        Log.e("SETOVER", "beginning, runs : "+runs);
        Log.e("SETOVER", "beginning, ball : "+ball);
        Log.e("SETOVER", "beginning, ballsPerOver : "+ballsPerOver);
        Log.e("Scoring", "extraToScoring, bye/lb");
        Log.d("so_inninngs1Runs","setover7 , : "+so_inninngs1Runs);

        Log.d("checkFreeHit","setOver 1, : "+checkFreeHit);
        Log.d("freeHit","setOver 1, : "+freeHit);

        Log.d("HUNDRED","setOver 1, totalBalls % 10 =  " + (totalBalls % 10));
        Log.d("HUNDRED","setOver 1, totalBalls =  " + totalBalls);


//       if (!wagon_wheel)
//           SET_OVER = true;
//       Log.e("SETOVER", "beginning, leadingRuns : "+leadingRuns);
//       Log.e("SETOVER", "beginning, remainingRuns : "+remainingRuns);
//       Log.e("SETOVER", "beginning, remainingBalls : "+remainingBalls);
//       Log.e("SETOVER", "beginning, remainingOver : "+remainingOver);


        if (runs != 537) {

            if ((!noBall) && (!wide)) {

                ++ball;
                if (ball == ballsPerOver)
                    endOver = true;
                callBowlerAlert = false; // Added on 26/11/2021

                Log.d("remainingOver", "remainingOver 1, : " + remainingOver);
//               remainingOver = setRemainingOver(remainingOver);
              /* float temp_ro = (remainingOver - (int)remainingOver);
               if (temp_ro > .1f && temp_ro <= (.1f * ballsPerOver))
                   remainingOver = remainingOver - .1f;
               else if (temp_ro == .0f) {
                   remainingOver = remainingOver - 1;
                   remainingOver = remainingOver + (.1f * ballsPerOver);
               }*/
                Log.d("remainingOver", "remainingOver 2, : " + remainingOver);
            }

            ++totalBalls;
            // Added on 26/07/2021
           /* Commented on 27/07/2021
           if (totalBalls > 0) {
               if ((totalBalls % 10) == 0) {
                   change_end_flag = true;
//               displayAlert("Bowling end changed");
               } else
                   change_end_flag = true;
           }*/
//           Log.d("HUNDRED","setOver 2, change_end_flag =  " + change_end_flag);
            Log.d("HUNDRED","setOver 2, totalBalls =  " + totalBalls);
            // === till here

            ++psBalls;
            if (psBalls >= ballsPerOver) {
                ++psOver;
                if (psBalls == ballsPerOver)
                    psBalls = 0;
                else if (psBalls == (ballsPerOver + 1))
                    psBalls = 1;
            }

            ++psTBalls;  // Added on 28/07/2021

            if (currentInnings > 1 && remainingRuns > 0){
                --remainingBalls;
            }


            if (ball > 10) {
                currentOver = currentOver + 0.01f;

                Log.d("remainingOver", "remainingOver 3, : " + remainingOver);
                if (currentInnings > 1){
                    float temp_ro = (remainingOver - (int)remainingOver);
                    if (temp_ro > .1f && temp_ro <= (.1f * ballsPerOver))
                        remainingOver = remainingOver - .1f;
                    else if ((int)(temp_ro * 10) == 0) {
                        remainingOver = remainingOver - 1;
                        remainingOver = remainingOver + (.1f * (ballsPerOver - 1));
                    }

                }
                Log.d("remainingOver", "remainingOver 4, : " + remainingOver);

//           bowlerOver = bowlerOver + 0.01f;
            }

            else {
                currentOver = currentOver + 0.1f;

                Log.d("remainingOver", "remainingOver 5, : " + remainingOver);
                if (currentInnings > 1){
//                   remainingOver = remainingOver - 0.1f;
                    float temp_ro = (remainingOver - (int)remainingOver);
                    if (temp_ro > .1f && temp_ro <= (.1f * ballsPerOver))
                        remainingOver = remainingOver - .1f;
                    else if ((int)(temp_ro * 10) == 0) {
                        remainingOver = remainingOver - 1;
                        remainingOver = remainingOver + (.1f * (ballsPerOver - 1));
                    }
                }
                Log.d("remainingOver", "remainingOver 1, : " + remainingOver);
//            bowlerOver = bowlerOver + 0.1f;
            }

            if (currentOver == 0.1f)
                btnUndo.setEnabled(true);

            if (runs != 12345) {     // valid ball, but not a run, this is a wicket,

//                mo = mo + runs;
//                maiden = false;
                if (ball >= ballsPerOver /*&& !wheel*/) {    // commented on 12/05/2020
                    efo = true;
                    endOver = true;
                    callBowlerAlert = true; // Added on 26/11/2021
                    if (!wheel) {
                       /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                       if (HUNDRED)
                           callBallsCompleted();
                       else*/
                        callEndOfOverAlert();
                    }
                }

                if (!confirm_extras) { //extras) { Updated on 01/03/2021

                    udisplay = modified;
                    modified = modified + "\t\t" + runs;
                    tvCurrentOver.setText(modified);
                    Log.d("modified3", modified);
                    Log.d("udisplay3", udisplay);

                    Log.d("MODIFIED", "setOver() 11, runs : " + runs);
                    Log.d("MODIFIED", "setOver() 11, modified : " + modified);
                    Log.d("MODIFIED", "setOver() 11, udisplay : " + udisplay);
                }

                Log.d("MODIFIED", "setOver() 12, runs : " + runs);
                Log.d("MODIFIED", "setOver() 12, modified : " + modified);
                Log.d("MODIFIED", "setOver() 12, udisplay : " + udisplay);


//           Log.d("Scoring","setover , modified : "+modified);
            }

            else {



                Log.d("Scoring","setover , ball : "+ball);
                Log.d("Scoring","setover , ballsPerOver : "+ballsPerOver);
                Log.d("Scoring","setover , runs : "+runs);
//               udisplay = modified;
//               modified = modified + "\t\t" + runs;
//               tvCurrentOver.setText(modified);




            }
        }

        if (SET_OVER) {  // SET_OVER is used for calling the following codes
            // after traversing from Wagon Wheel
            Log.d("Scoring", "setover , SET_OVER : " + SET_OVER);
            SET_OVER = false;


            if (ball >= ballsPerOver) {

                efo = true;
                if (!wheel) {
                   /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                   if (HUNDRED)
                       callBallsCompleted();
                   else*/
                    callEndOfOverAlert();
                }

            }
        }

        Log.d("Scoring","setover , currentInnings : "+currentInnings);
        Log.d("Scoring","setover , totalInnings : "+totalInnings);

        if (!target_achieved) {  // Added condition on 08/09/2021
            checkEndInnings();   // Added on 07/09/2021
        }

       /*   moved inside checkEndInnings() method
            COMMENTED ON 07/09/2021
       if (currentInnings == totalInnings){

           Log.d("Scoring","setover , innings : "+innings);
           Log.d("Scoring","setover , totalInnings : "+totalInnings);
           Log.d("Scoring","setover , currentOver : "+currentOver);
           Log.d("Scoring","setover , totalOver : "+totalOver);
           Log.d("Scoring","setover , currentRuns : "+currentRuns);
           Log.d("Scoring","setover , innings1Runs : "+innings1Runs);
           Log.d("so_inninngs1Runs","setover8 , : "+so_inninngs1Runs);

          if (totalInnings == 2) {

              if (currentOver == totalOver) {
                  target_achieved = true;
                  // Updated on 28/07/2021
                  if (HUNDRED)
                      endMessage = "Allotted Balls are completed";
                  else
                      endMessage = "Allotted Overs are completed";
                  displayAlert(endMessage, 1);
              }
              else if (currentOver <= totalOver) {

                  if (currentRuns > innings1Runs) {
                      target_achieved = true;
                      endMessage = "Target Achieved";
                      displayAlert(endMessage, 1);
                  }

                  if (revisedTarget > 0) {
                      if (currentRuns >= revisedTarget) {
                          target_achieved = true;
                          endMessage = "Revised Target Achieved";
                          displayAlert(endMessage, 1);
                      }
                  }
              }
          }

          else if (totalInnings == 4 && currentInnings == 4) {

              if (remainingRuns <= 0) {
                  target_achieved = true;
                  endMessage = "Target Achieved";
                  displayAlert(endMessage, 1);
              }

              *//*if (revisedTarget > 0) {
                  if (currentRuns == revisedTarget)
                      displayAlert("Revised Target Achieved", 1);
              }*//*
          }

       }

       if (SUPER_OVER && currentInnings == 100) {

           Log.d("so_inninngs1Runs","setover9 , : "+so_inninngs1Runs);

           if (currentRuns > so_inninngs1Runs) {
               target_achieved = true;
               endMessage = "Target Achieved";
               displayAlert(endMessage, 1);
           }

           if (revisedTarget > 0) {
               if (currentRuns >= revisedTarget) {
                   target_achieved = true;
                   endMessage = "Revised Target Achieved";
                   displayAlert(endMessage, 1);
               }
           }
       }*/

        //Updated on 27/07/2021
        if (HUNDRED)
            tvPlayingOver.setText(String.valueOf(totalBalls));
        else
            tvPlayingOver.setText(String.valueOf(new DecimalFormat("##.#").format(currentOver)));
        tvBowler.setText(bowler);
        //Updated on 27/07/2021
        if (HUNDRED) {
            tvBowlerOver.setText(String.valueOf(bt_balls));
            tvBowlerMO.setText(String.valueOf(bowlerDots));
        } else {
            tvBowlerOver.setText(String.valueOf(new
                    DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));
            tvBowlerMO.setText(String.valueOf(bowlerMO));
        }
        tvBowlerRuns.setText(String.valueOf(bwRun));
        tvBowlerWicket.setText(String.valueOf(bowlerWicket));

        if (SUPER_OVER || preBowlerID == 0) {
//           if (preBowlerID == 0) {
            setPreBowlerVisibility(false);
//           }
        }

        else if (preBowlerID != 0 && !SUPER_OVER)
            setPreBowlerVisibility(true);


        if (currentInnings == 1 || currentInnings == 99)
            ll_remainings.setVisibility(View.GONE);

        else {

            ll_remainings.setVisibility(View.VISIBLE);

            if (remainingRuns > 0)
                tvRemainingRuns.setText(String.valueOf(remainingRuns));
//           else if (leadingRuns >= 0 && totalInnings == 4) {
            if (leadingRuns > remainingRuns && totalInnings == 4) {
                tvRemainingRuns.setText(String.valueOf(leadingRuns));
                tvRemainingRunsText.setText("Leading Runs : ");
            }

            Log.e("Scoring", "setOver, leadingRuns 1 : "+leadingRuns);

            if (tvRemainingOversBallsText.isShown()) {
                if (remainingBalls > 100) {

                    tvRemainingOversBallsText.setText(", Overs : ");
                    tvRemainingOversBalls.setText(String.valueOf(new DecimalFormat("##.#").format(remainingOver)));
                }

                else {

                    tvRemainingOversBallsText.setText(", Balls : ");
                    Log.e("Scoring", "setOver, remainingBalls 1 : "+remainingBalls);
                    tvRemainingOversBalls.setText(String.valueOf(remainingBalls));
                }
            }

            if (innings.matches("single")){

                tvRemainingRunsText.setText("Remaining Runs : ");
            }

            else {

                if (remainingRuns > 0) {
                    if (currentInnings == 4)
                        tvRemainingRunsText.setText("Remaining Runs : ");
                    else
                        tvRemainingRunsText.setText("Trial Runs : ");
                }

                else
                    tvRemainingRunsText.setText("Lead Runs : ");
            }
        }


        if (innings.matches("multi") && totalOver == 1000) {
            tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
            tvRemainingOversBalls.setVisibility(View.INVISIBLE);
        }

        else {
            tvRemainingOversBallsText.setVisibility(View.VISIBLE);
            tvRemainingOversBalls.setVisibility(View.VISIBLE);
        }

        setDisplay(/*false*/);
    }



    void callEndOfOverAlert(){
        Log.d("HUNDRED", "callEndOfOverAlert 4, totalBalls = " + totalBalls);
        String str = "";

        Log.d("WKT", "callEndOfOverAlert, dismissedPlayrID = " + dismissedPlayrID);
        Log.d("WKT", "callEndOfOverAlert, dismissedPlayer = " + dismissedPlayer);
        Log.d("WKT", "callEndOfOverAlert, strID = " + strID);
        Log.d("WKT", "callEndOfOverAlert, nstrID = " + nstrID);
        Log.d("WKT", "callEndOfOverAlert, endOver = " + endOver);
        Log.d("WKT", "callEndOfOverAlert, callBowlerAlert = " + callBowlerAlert);
        Log.d("target_achieved", "callEndOfOverAlert, target_achieved = " + target_achieved);

        if (target_achieved) {

        }


        else {
            overCompleteAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
            overCompleteAlert.setIcon(R.drawable.ball);
            overCompleteAlert.setCancelable(false);
//           callBallsCompleted();
            if (HUNDRED) {
                overCompleteAlert.setTitle("5 BALLS COMPLETED");
                str = "END BALLS";
            } else {
                overCompleteAlert.setTitle("OVER COMPLETED");
                str = "END OVER";
            }
            overCompleteAlert.setButton(AlertDialog.BUTTON_POSITIVE, str,
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();

                            Log.d("maiden", "dialog dismissed");

                            endOver = false;
                            callBowlerAlert = true; // Added on 26/11/2021
                            undo = false;
                            tvCurrentOver.setText(" ");
                            dso = null;
                            tco = currentOver;
                            tbo = bowlerOver;
                            tpbo = preBowlerOver;

                            currentOver = totalBalls / ballsPerOver;
                            if (!new_bowler) {
//                            bowlerOver = bowlerBalls / ballsPerOver;
                                new_bowler = false;
                            }

//                        remainingOver = remainingBalls / ballsPerOver;
                            Log.d("scoring", "callEndOfOverAlert, currentOver : " + currentOver);
                            Log.d("scoring", "callEndOfOverAlert, bowlerOver : " + bowlerOver);
                            //Updated on 27/07/2021
                            if (HUNDRED) {
                                tvPlayingOver.setText(String.valueOf(totalBalls));
                                tvBowlerOver.setText(String.valueOf(bt_balls));
                            }
                            else {
                                tvPlayingOver.setText(String.valueOf(new DecimalFormat("##.#").format(currentOver)));
                                tvBowlerOver.setText(String.valueOf(new
                                        DecimalFormat("##.##").format(setOverDisplay(bowlerOver, bowlerBalls))));
                            }

                            Log.d("maiden", "callEndOfOver 2, maiden : " + maiden);
                            Log.d("maiden", "callEndOfOver 2, bowlerMO : " + bowlerMO);

                            if (currentInnings == 1 || currentInnings == 99)
                                ll_remainings.setVisibility(View.GONE);

                            else {

                                ll_remainings.setVisibility(View.VISIBLE);

                                if (remainingRuns > 0)
                                    tvRemainingRuns.setText(String.valueOf(remainingRuns));
//                            else if (leadingRuns >= 0 && totalInnings == 4) {
                                if (leadingRuns > remainingRuns && totalInnings == 4) {
                                    tvRemainingRuns.setText(String.valueOf(leadingRuns));
                                    tvRemainingRunsText.setText("Leading Runs : ");
                                }

                                Log.e("Scoring", "callEndOfOverAlert, leadingRuns 2 : " + leadingRuns);

                                if (tvRemainingOversBallsText.isShown()) {
                                    if (remainingBalls > 100) {

                                        tvRemainingOversBallsText.setText(", Overs : ");
                                        tvRemainingOversBalls.setText(String.valueOf(new
                                                DecimalFormat("##.#").format(remainingOver)));
                                    } else {

                                        tvRemainingOversBallsText.setText(", Balls : ");
                                        Log.e("Scoring", "callEndOfOverAlert, remainingBalls 2 : " + remainingBalls);
                                        tvRemainingOversBalls.setText(String.valueOf(remainingBalls));
                                    }
                                }

                                if (innings.matches("single")) {

                                    tvRemainingRunsText.setText("Remaining Runs : ");
                                } else {

                                    if (remainingRuns > 0) {

                                        if (currentInnings == 4)
                                            tvRemainingRunsText.setText("Remaining Runs : ");
                                        else
                                            tvRemainingRunsText.setText("Trial Runs : ");
                                    } else
                                        tvRemainingRunsText.setText("Lead Runs : ");
                                }

                            }

                            if (innings.matches("multi") && totalOver == 1000) {

                                tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
                                tvRemainingOversBalls.setVisibility(View.INVISIBLE);
                            } else {

                                tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                                tvRemainingOversBalls.setVisibility(View.VISIBLE);
                            }

                            udisplay = modified;
                            modified = "";

                            if (mo == 0) {
                                maiden = true;
                                ++bowlerMO;
                            } else
                                maiden = false;

                            replacedBowlerID = 0;
                            replacedBowler = null;
                            replacedBowlerOver = 0;
                            replacedBowlerBall = 0;
                            rbt_balls = 0; // Added on 26/07/2021

                            Log.d("maiden", "callEndOfOver 1, maiden : " + maiden);
                            Log.d("maiden", "callEndOfOver 1, bowlerMO : " + bowlerMO);
                            if (HUNDRED)
                                tvBowlerMO.setText(String.valueOf(bowlerDots));
                            else
                                tvBowlerMO.setText(String.valueOf(bowlerMO));

                            syncBowler();

                            endOfOver = true;
                            changeStriker(false);

                            ballType = 5;
                            bCount = 0; // Added on 22/09/2021
                            final int temp_ball = ball;
                            bCount = 1; // Added on 22/09/2021
                            ball = 0;
                            // Added on 23/09/2021
                            if ((dismissedPlayrID != strID) && (dismissedPlayrID != nstrID))
                                dismissedPlayrID = 0;
                            // ===,till here
//                            Log.d("so_inninngs1Runs", "callEndOfOver10 , : " + so_inninngs1Runs);
//                        Log.e("Scoring", "setOver, overCompleteAlert, ballType : "+ballType);
                            Log.d("DISPLAY", "7 modified = " + modified);
                            Log.d("DISPLAY", "7 udisplay = " + udisplay);
                            newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls,
                                    wicket, ball, temp_ball, preInningsRuns, remainingRuns, remainingBalls,
                                    remainingOver, leadingRuns, innings1Runs, innings2Runs, innings3Runs,
                                    innings4Runs, battingTeamNo, fieldingTeamNo, player1ID, player2ID,
                                    strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0,
                                    ballType, bCount, 0, 0, -1, dismissedPlayrID,
                                    null, 0, disNewBatsmanBattingOrder,
                                    0, 0, 0, false,
                                    0, commentary, 0, mo, maiden, modified, udisplay,
                                    tco, 0, sessionType, sessionID,
                                    endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs,
                                    false, freeHit, false, inning_started,
                                    0, 0, 0, null, pre_out,
                                    callBowlerAlert, wk_id, keeper_position, pre_wk_id, pre_wk_position,
                                    FORFEIT, forfeit_team, forfeit_innings, CONCEDE, conceded_team,
                                    forceEndingType, lunch_flag,
                                    tea_flag, dinner_flag);
                            Log.d("Scoring", "callEndOfOverAlert, bowlerID : " + bowlerID + ", bwRun : " + bwRun +
                                    ", bowlerOver : " + bowlerOver + ", bowlerBalls : " + bowlerBalls + ", bowlerWicket " +
                                    bowlerWicket);
//                        ball = 0;


                            mo = 0;
                            maiden = false;

                            Log.d("HUNDRED", "callEndOfOverAlert 5, TotalBalls = " + totalBalls);

                            Log.d("HUNDRED", "selectBowlerAlertDialog 1, totalBalls = " + totalBalls);

                            if (currentOver >= totalOver) {

                                Log.d("Scoring", "callEndOfOverAlert, currentOver : " + currentOver);

                                callEndOfInnings(1);

                            } else {
                                // Added alert on 26/07/2021
//                               if (change_end_flag) { Commented on 27/07/2021
                                if (HUNDRED) {
                                    if ((totalBalls > 0) && ((totalBalls % 10) == 0)) { // Added on 27/07/2021
                                        AlertDialog.Builder builder = new AlertDialog.Builder(UpdatedScoringActivity.this);
                                        builder.setIcon(R.drawable.ball)
                                                .setTitle("Bowling end changed")
                                                .setCancelable(false)
                                                .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                                                    @Override
                                                    public void onClick(DialogInterface dialog, int which) {
                                                        dialog.dismiss();
                                                        // Added on 04/08/2021
                                                        if (dismissedPlayrID == strID || dismissedPlayrID == nstrID) {
                                                            Log.d("CHANGEBATSMAN", "callEndOfOverAlert, End Over");
                                                            changeBatsman(dismissedPlayrID, null, newPartnership, true);
                                                        } else // till here
                                                            selectBowlerAlertDialog();
                                                    }
                                                })
                                                .show();
                                    }

                                }

//                               else
                                // === till here
//                                   selectBowlerAlertDialog();
                                else {  // Added on 03/08/2021

                                    if (dismissedPlayrID == strID || dismissedPlayrID == nstrID) {
                                        Log.d("CHANGEBATSMAN", "callEndOfOverAlert, End Over");

                                        changeBatsman(dismissedPlayrID, null, newPartnership, true);
//                                selectBowlerAlertDialog();
                                    }

                                    else// till here
                                        selectBowlerAlertDialog();
                                }
                            }


                        }


                    });
            if (!HUNDRED) {  // Added condition on 29/07/2021
                overCompleteAlert.setButton(AlertDialog.BUTTON_NEGATIVE, "RETURN",
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {

                                dialog.dismiss();
                                callBowlerAlert = false; // Added on 26/11/2021
                                endOver = false;
                                undo = false;
                                if (!UNDO) { // Added on 31/08/2021
                                    // Added on 04/08/2021
                                    if (dismissedPlayrID > 0)
                                        dismissedPlayerDetails(dismissedPlayrID);
                                }
                                else // Added on 31/08/2021
                                    undo();
                            }
                        });
            }

            overCompleteAlert.show();
            endOfOver = false;
        }
    }



    void callEndOfInnings(int id){

        endOfInningsAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        endOfInningsAlert.setIcon(R.drawable.ball);
        endOfInningsAlert.setCancelable(false);
        endOfInningsAlert.setTitle("End Innings");
        if (HUNDRED)
            endOfInningsAlert.setMessage("Allotted balls completed");
        else
            endOfInningsAlert.setMessage("Allotted overs completed");
        endOfInningsAlert.setButton(AlertDialog.BUTTON_POSITIVE, "CONFIRM",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {

                        dialog.cancel();
                        endOfInnings = true;
//                        dialog.dismiss();

                        ballType = 10;
                        bCount = 0; // Added on 22/09/2021
//                        setEndInnings(false, ballType);
                        editor = sharedPreferences.edit();
                        editor.putInt("sp_batting_order", 2);
                        editor.apply();

                        setEndInnings(false, ballType);

                        Log.e("Scoring", "setOver, endOfInningsAlert, ballType : "+ballType);
                        Log.e("strID", "setOver, endOfInningsAlert, ballType : "+strID);
                        Log.e("nstrId", "setOver, endOfInningsAlert, ballType : "+nstrID);
                        Log.e("Scoring", "setOver, endOfInningsAlert, currentInnings : "+currentInnings);
                        Log.e("Scoring", "setOver, endOfInningsAlert, totalInnings : "+totalInnings);

                        if (SUPER_OVER) {

                            if (currentInnings == 99) {
//                                endOfInnings = true;
                                displayScoreCard(false, false);
                            }

                            else if (currentInnings == 100) {


                                callEndOfMatch(1, id);
                            }
                        }
                        else if (currentInnings == totalInnings) {
                            Log.d("Scoring", "callEndOfInnings, currentInnings : " + currentInnings);

                            if (totalInnings == 2 && currentRuns == preInningsRuns)
                                check_SUPEROVER();
                            else {
                                callEndOfMatch(1, id);
                            }

                        } else {
                            displayScoreCard(false, false);
                        }
                    }
                });


        endOfInningsAlert.setButton(AlertDialog.BUTTON_NEGATIVE, "CANCEL",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });

        endOfInningsAlert.show();
    }



    void callEndOfMatch(int id, int pid){

        Log.d("callEndOfMatch", "callEndOfMatch,");

        allottedInningsAlert = new AlertDialog.
                Builder(UpdatedScoringActivity.this).create();
        allottedInningsAlert.setIcon(R.drawable.ball);
        allottedInningsAlert.setCancelable(false);
        allottedInningsAlert.setTitle("Match is Over");
        allottedInningsAlert.setMessage("Allotted innings completed");
        allottedInningsAlert.setButton(AlertDialog.BUTTON_POSITIVE, "CONFIRM",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {

                        dialog.dismiss();
                        endOfMatch = true;

                        // Added on 22/04/2021 (C)
                        if (id == 1) {
                            sessionID = 11;
                            sessionType = "SE3";
                        }
                        // ======== till here (C)
//                        Log.d("callEndOfMatch", "endOfMatch : " + endOfMatch);
//                        if (currentInnings == totalInnings && currentInnings == 2) {
//                            Log.d("callEndOfMatch", "currentInnings = totalInnings = " + totalInnings);
//                            /*if (currentRuns == innings1Runs) {
//
//                                check_SUPEROVER();
//                            }
//                            else {*/
//                                endOfMatch();
////                            displayScoreCard();
////                            }
//                        }
//
//                        else {

                        // Added on 03/03/2021
                        if (ballType == 9 && forceEndingType > 0) {
                            setEndInnings(false, ballType);
                            if (forceEndingType == 3)
                                setBatsmanAsAbsent();
                        }

                        else if (ballType == 10 && SUPER_OVER && currentInnings == 100) {
                            setEndInnings(false, ballType);
                        }

                        else if (ballType == 10 && (currentInnings == totalInnings) && !SUPER_OVER) {
                            setEndInnings(false, ballType);
                        }


                        callMatchEnd(); // Added on 03/03/2021
                        endOfMatch();
//                            displayScoreCard();
//                        }
                    }
                });


        allottedInningsAlert.setButton(AlertDialog.BUTTON_NEGATIVE, "CANCEL",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
//                            selectBowlerAlertDialog();

                        ballType = -1;
                        bCount = 0; // Added on 22/09/2021
                        forceEndingType = 0;
                        rain_rule = false;
                        fei_others = false;
                        remaining_absent = false;
                        declared = false;
                        endOfInnings = false;

                        if (id == 2)
                            forceEndInnings(0, 0);
                        else if (id == 1)
                            callEndOfInnings(pid);
//                        endOfMatch = true;
                    }
                });
        allottedInningsAlert.show();
    }




    void displayAlert(String message,int flag){

        matchOverAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        matchOverAlert.setIcon(R.drawable.ball);
        matchOverAlert.setCancelable(false);
//        matchOverAlert.setTitle("Match Over");
        matchOverAlert.setTitle(message);
//                    matchOverAlert.setMessage(battingTeam + " win by " + (player_count - wicket) + " wickets");
//        matchOverAlert.setMessage(message);
        matchOverAlert.setButton(AlertDialog.BUTTON_POSITIVE, "CONFIRM",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        endOfInnings = true;
                        endOfMatch = true;
                        updateMatch(matchid, endOfInnings);
                        saveEndOfInnings();
                        if (strID != 0)
                            syncBatsmann(strID, 0, null, false, -1,
                                    false, false, false);
                        if (nstrID != 0)
                            syncBatsmann(nstrID, 0, null, false, -1,
                                    false, false, false);
                        syncBowler();
                        callMatchEnd();
                        endOfMatch();

                    }
                });

        /* Commented on 14/12/2021
        matchOverAlert.setButton(AlertDialog.BUTTON_NEGATIVE, "CANCEL",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        endOfInnings = true;
                        saveEndOfInnings();


//                        endOfMatch = true;
//                        if (flag == 0)
//                            allOUT();
//                        else if (flag == 1) {
//                            SET_OVER = false;
//                            setOver(537);
//                        }

                    }
                });*/
        matchOverAlert.show();
    }




    void saveEndOfInnings() {

        Log.d("so_inninngs1Runs","saveEndOfInnings11 , : "+so_inninngs1Runs);
        ballType = 10;
        bCount = 0; // Added on 22/09/2021
        Log.d("DISPLAY", "8 modified = " + modified);
        Log.d("DISPLAY", "8 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket, ball,
                0, preInningsRuns, remainingRuns, remainingBalls, remainingOver, leadingRuns,
                innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo, fieldingTeamNo,
                player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID, runs,
                ballType, bCount, 0, 0, 0, 0, null,
                0, disNewBatsmanBattingOrder,0, 0, 0,
                false, 0, commentary, 0, 0, false, modified,
                udisplay, tco, 0, sessionType, sessionID, endOfDay, SUPER_OVER,
                so_inninngs1Runs, so_inninngs2Runs, false, freeHit, false,
                inning_started, 0, 0, 0, null, pre_out,
                callBowlerAlert, wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag, tea_flag, dinner_flag);
    }



    void callMatchEnd() {

        Log.d("so_inninngs1Runs","callMatchEnd12 , : "+so_inninngs1Runs);

        ballType = 11;
        bCount = 0; // Added on 22/09/2021
        Log.e("displayAlert", "endOfMatch : " + endOfMatch + ", ballType : " + ballType);
        Log.d("DISPLAY", "9 modified = " + modified);
        Log.d("DISPLAY", "9 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket, ball,
                0, preInningsRuns, remainingRuns, remainingBalls, remainingOver, leadingRuns,
                innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo, fieldingTeamNo,
                player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID, runs,
                ballType, bCount, 0, 0, 0, 0, null,
                0, disNewBatsmanBattingOrder,0, 0, 0,
                false, 0, commentary, 0, 0, false, modified,
                udisplay, tco, 0, sessionType, sessionID, endOfDay, SUPER_OVER,
                so_inninngs1Runs, so_inninngs2Runs, false, freeHit, false,
                inning_started, 0, 0, 0, null, pre_out,
                callBowlerAlert, wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT,
                forfeit_team, forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                tea_flag, dinner_flag);
    }


    void selectBowlerAlertDialog() {
        Log.d("HUNDRED", "selectBowlerAlertDialog 1, totalBalls = " + totalBalls);
        Log.d("HUNDRED", "selectBowlerAlertDialog 1, bt_balls = " + bt_balls);
        Log.d("HUNDRED", "selectBowlerAlertDialog 1, pbt_balls = " + pbt_balls);

        Log.d("WKT", "confirmReturnBowler, dismissedPlayrID = " + dismissedPlayrID);
        Log.d("WKT", "confirmReturnBowler, dismissedPlayer = " + dismissedPlayer);
        Log.d("WKT", "confirmReturnBowler, strID = " + strID);
        Log.d("WKT", "confirmReturnBowler, nstrID = " + nstrID);
        Log.d("WKT", "confirmReturnBowler, endOver = " + endOver);
        Log.d("WKT", "confirmReturnBowler, callBowlerAlert = " + callBowlerAlert);

//        callChangeBowler();
        bowlerAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        bowlerAlert.setIcon(R.drawable.ball);
        bowlerAlert.setCancelable(false);
        bowlerAlert.getWindow().setGravity(Gravity.BOTTOM);
        bowlerAlert.setTitle("Select Bowler");
        if (HUNDRED) {
            if ((totalBalls % 10) == 0 )
                bowlerAlert.setMessage("Change the bowler");
            else
                bowlerAlert.setMessage("Change bowler or continue with current bowler");
        }
        else
            bowlerAlert.setMessage("Return to continue with bowler of previous over");
        bowlerAlert.setButton(AlertDialog.BUTTON_POSITIVE, "CHANGE",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();

                        callBowlerAlert = false; // Added on 26/11/2021
                        tco = currentOver;
                        tbo = bowlerOver;
                        tpbo = preBowlerOver;
                        udisplay = modified;

                        Log.d("HUNDRED", "selectBowlerAlertDialog 2, totalBalls = " + totalBalls);

                        callBowlerAlert = false;
                        Log.d("SBAD", "currentOver = " + currentOver);
                        Log.d("SBAD", "totalBalls = " + totalBalls);
                        Log.d("SBAD", "ballsPerOver = " + ballsPerOver);
//                        currentOver = totalBalls / ballsPerOver;// commented on 02/07/2021
//                        ++currentOver;
                        Log.d("SBAD", "currentOver 2 = " + currentOver);
                        if (!new_bowler) {
//                            bowlerOver = bowlerBalls / ballsPerOver;
                            new_bowler = false;
                        }
//                        remainingOver = remainingBalls / ballsPerOver;

                        //Updated on 27/07/2021
                        if (HUNDRED) {
                            tvPlayingOver.setText(String.valueOf(totalBalls));
                            tvBowlerOver.setText(String.valueOf(bt_balls));
                        }
                        else {
                            tvPlayingOver.setText(String.valueOf(new DecimalFormat("##.#").format(currentOver)));
                            tvBowlerOver.setText(String.valueOf(new
                                    DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));
                        }


                        if (currentInnings == 1 || currentInnings == 99)
                            ll_remainings.setVisibility(View.GONE);

                        else {

                            ll_remainings.setVisibility(View.VISIBLE);

                            if (remainingRuns > 0)
                                tvRemainingRuns.setText(String.valueOf(remainingRuns));
//                            else if (leadingRuns >= 0 && totalInnings == 4) {
                            if (leadingRuns > remainingRuns && totalInnings == 4) {
                                tvRemainingRuns.setText(String.valueOf(leadingRuns));
                                tvRemainingRunsText.setText("Leading Runs : ");
                            }

                            Log.e("Scoring", "selectBowlerAlertDialog, leadingRuns : "+
                                    leadingRuns);

                            if (tvRemainingOversBallsText.isShown()) {
                                if (remainingBalls > 100) {

                                    tvRemainingOversBallsText.setText(", Overs : ");
                                    tvRemainingOversBalls.setText(String.valueOf(new
                                            DecimalFormat("##.#").format(remainingOver)));
                                }

                                else {

                                    tvRemainingOversBallsText.setText(", Balls : ");
                                    Log.e("Scoring", "selectBowlerAlertDialog, remainingBalls : "+
                                            remainingBalls);
                                    tvRemainingOversBalls.setText(String.valueOf(remainingBalls));
                                }
                            }

                            if (innings.matches("single")){

                                tvRemainingRunsText.setText("Remaining Runs : ");
                            }

                            else {

                                if (remainingRuns > 0) {

                                    if (currentInnings == 4)
                                        tvRemainingRunsText.setText("Remaining Runs : ");
                                    else
                                        tvRemainingRunsText.setText("Trial Runs : ");
                                }

                                else
                                    tvRemainingRunsText.setText("Lead Runs : ");
                            }

                        }


                        if (innings.matches("multi") && totalOver == 1000) {

                            tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
                            tvRemainingOversBalls.setVisibility(View.INVISIBLE);
                        }

                        else {

                            tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                            tvRemainingOversBalls.setVisibility(View.VISIBLE);
                        }

                        changeBowler(new Events(),1, 0);



                        if (currentInnings >= 99) {

                            tvBowler2.setText(preBowler);
                            tvBowlerRuns2.setText(String.valueOf(preBowlerRun));

                            tvBowlerWicket2.setText(String.valueOf(preBowlerWicket));
                            //Updated on 27/07/2021
                            if (HUNDRED) {
                                tvBowlerOver2.setText(String.valueOf(pbt_balls));
                                tvBowlerMO2.setText(String.valueOf(preBowlerDots));
                            } else {
                                tvBowlerOver2.setText(String.valueOf(new
                                        DecimalFormat("##.#").format(setOverDisplay(preBowlerOver, preBowlerBalls))));
                                tvBowlerMO2.setText(String.valueOf(preBowlerMO));
                            }
                        }


                        tvBowler.setText(bowler);
                        tvBowlerRuns.setText(String.valueOf(bwRun));
                        //Updated on 27/07/2021
                        if (HUNDRED) {
                            tvBowlerOver.setText(String.valueOf(bt_balls));
                            tvBowlerMO.setText(String.valueOf(bowlerDots));
                        } else {
                            tvBowlerOver.setText(String.valueOf(new
                                    DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));
                            tvBowlerMO.setText(String.valueOf(bowlerMO));
                        }
                        tvBowlerWicket.setText(String.valueOf(bowlerWicket));

                    }
                });


        // updated on 26/07/2021
        if (HUNDRED) {

            Log.d("HUNDRED", "selectBowlerAlertDialog 3, totalBalls = " + totalBalls);

//            if (!change_end_flag) { Commented on 27/07/2021
            if ((totalBalls > 0) && ((totalBalls % 10) != 0)) { // Added on 27/07/2021
                bowlerAlert.setButton(DialogInterface.BUTTON_NEGATIVE, "Continue",
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                                Toast.makeText(UpdatedScoringActivity.this,
                                        "clicked Continue", Toast.LENGTH_SHORT).show();

//                        confirmContinueBowler();

                                AlertDialog.Builder builder = new AlertDialog.Builder(UpdatedScoringActivity.this);
                                builder.setTitle("Continue with bowler " + bowler).
                                        setIcon(R.drawable.ball).
                                        setCancelable(false).
                                        setPositiveButton("Confirm", new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                dialog.dismiss();
                                                Toast.makeText(UpdatedScoringActivity.this,
                                                        "Current bowler confirmed", Toast.LENGTH_SHORT).show();
                                                callBowlerAlert = false;
                                                Bowler bow = realm.where(Bowler.class).
                                                        equalTo("matchid", matchid).
                                                        equalTo("innings", currentInnings).
                                                        equalTo("playerID", bowlerID).findFirst();
                                                Log.d("HUNDRED", "selectBowlerAlertDialog 1, bow = " + bow);
                                                if (bow != null) {
//                                            b_ball = bow.getBalls();
                                                    int t1 = (int) bow.getOver();
                                                    float t2 = bow.getOver() - t1;
                                                    b_ball = (t1 * ballsPerOver) + (int) (t2 * 10);
                                                    Log.d("HUNDRED", "selectBowlerAlert, b_ball = " + b_ball);
                                                    Log.d("HUNDRED", "selectBowlerAlert, max_bpb = " + max_bpb);
                                                    if (b_ball >= max_bpb) {
                                                        displayWarning("Warning",
                                                                "Allotted balls are completed for " + bowler,
                                                                1, 0, 0);
                                                    } else
                                                        continueBowler();
                                                } else
                                                    continueBowler();

                                            }
                                        }).
                                        setNeutralButton("Cancel", new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                dialog.dismiss();
//                                        callChangeBowler();
                                                selectBowlerAlertDialog();
                                            }
                                        }).
                                        show();

                                Log.d("HUNDRED", "selectBowlerAlertDialog 2, bt_balls = " + bt_balls);
                                Log.d("HUNDRED", "selectBowlerAlertDialog 2, pbt_balls = " + pbt_balls);
                            }
                        });
            }
            /*else
                change_end_flag = false;*/
        }

        else {

            // ==== till here
            bowlerAlert.setButton(AlertDialog.BUTTON_NEGATIVE, "RETURN",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();

                            callBowlerAlert = false;
                            if (preBowlerID == 0) {

                                AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
                                alertDialog.setIcon(R.drawable.ball);
                                alertDialog.setCancelable(false);
                                alertDialog.setMessage("No previous bowler to return");
                                alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
                                        new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int which) {
                                                dialog.dismiss();
                                                selectBowlerAlertDialog();
                                            }
                                        });
                                alertDialog.show();
                            } else {

                                // Added on 08/07/2021
                                if (limited_over) {
                                    Bowler bow = realm.where(Bowler.class).
                                            equalTo("matchid", matchid).
                                            equalTo("innings", currentInnings).
                                            equalTo("playerID", preBowlerID).findFirst();
                                    Log.d("HUNDRED", "selectBowlerAlertDialog 2, bow = " + bow);
                                    if (bow != null) {
                                        b_over = bow.getOver();
                                        if (b_over >= 1000) {
                                            displayWarningBowler(/*"Over limit exceeded for the bowler ",*/ preBowler, -1, 2, 0);
                                        } else
                                            confirmReturnBowler();
                                    } else
                                        confirmReturnBowler();
                                } else
                                    confirmReturnBowler();

                                // === till here
                            }
                        }
                    });
        }

        bowlerAlert.setButton(AlertDialog.BUTTON_NEUTRAL, "INTERVAL",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        callBowlerAlert = true;
                        setInterval(new Events(), 1);
                    }
                });
        bowlerAlert.show();
    }




    // function used to check whether the run is boundary or not

    void checkBoundary(int run){

//        Log.d("checkBoundary", " matchid :"+matchid);
//        Log.d("checkBoundary", " matchID :"+matchID);

        boundaryAlert = new AlertDialog.Builder(this);
        boundaryAlert.setIcon(R.drawable.ball);
        boundaryAlert.setCancelable(false);
        boundaryAlert.setTitle("Boundary or Runs ?");
//        boundaryAlert.setMessage("This is BOUNDARY ?");
        boundaryAlert.setPositiveButton("BOUNDARY", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                ballType = 2;
                bCount = 1; // Added on 22/09/2021
                boundary = true;
                setPlayerRuns(run);
            }
        });
        boundaryAlert.setNegativeButton("RUNS", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                ballType = 1;
                bCount = 1; // Added on 22/09/2021
                setPlayerRuns(run);
            }
        });
        boundaryAlert.show();

    }



    // set runs of player, either player1 or player2, including boundary

    public void setPlayerRuns(int run){
        int t = 0;

//        bCount = 1; // Added on 22/09/2021

        Log.d("MODIFIED", "setPlayerRuns() 9, modified : " + modified);
        Log.d("MODIFIED", "setPlayerRuns() 9, udisplay : " + udisplay);

        Log.e("scoring", " setPlayerRuns, bowlerID : "+bowlerID);
        Log.e("scoring", " setPlayerRuns, run : "+run);
        Log.e("scoring", " setPlayerRuns, currentOver : "+currentOver);
        Log.e("scoring", " setPlayerRuns, ball : "+ball);
        Log.e("scoring", " setPlayerRuns, preInningsRuns : "+preInningsRuns);
//        Log.e("scoring", " setPlayerRuns, preBowlerID : "+preBowlerID);
//        Log.d("SETPLAYERRUNS", ", beginning, mo : " + mo);
//        Log.d("SETPLAYERRUNS", "beginning, maiden : " + maiden);
//        Log.d("setPlayerRuns", " matchID :"+matchID);
//        Log.d("setPlayerRuns", " striker :"+striker);
//        Log.d("setPlayerRuns", " nonStriker :"+nonStriker);
//        Log.e("SETPLAYERRUNS", "beginning, leadingRuns : " + leadingRuns);
//        Log.e("SETPLAYERRUNS", "beginning, remainingRuns : " + remainingRuns);
//        Log.e("SETPLAYERRUNS", "beginning, remainingBalls : " + remainingBalls);
//        Log.e("SETPLAYERRUNS", "beginning, remainingOver : " + remainingOver);




        if (!striker.matches("") && !(nonStriker.matches(""))) {

            Log.e("scoring", " setPlayerRuns, striker : "+striker);
            Log.e("scoring", " setPlayerRuns, nonStriker : "+nonStriker);

            /*if (newPartnership)
                newPartnership = false;*/


            if (strID == player1ID) {

                if (run == 0) {
                    ++player1Dots;
                    ++bowlerDots;
                }

                if (ballType == 2) {
                    if (run == 4) {
                        ++player1F4s;
                        ++bowlerF4s;
                    }
                    if (run == 6) {
                        ++player1S6s;
                        ++bowlerS6s;
                    }
                }

                player1Runs = player1Runs + run;
                ++player1Balls;
                strikerRuns = player1Runs;
                strikerBalls = player1Balls;

                strikerDots = player1Dots;
                strikerF4s = player1F4s;
                strikerS6s = player1S6s;
                nonStrikerDots = player2Dots;
                nonStrikerF4s = player2F4s;
                nonStrikerS6s = player2S6s;
                tvPlayer1Runs.setText(String.valueOf(player1Runs));
                tvPlayer1Balls.setText(String.valueOf(player1Balls));
//                Log.d("setPlayerRuns", " player 1 run added : "+ run);
            }


            if (strID == player2ID) {

                if (run == 0) {
                    ++player2Dots;
                    ++bowlerDots;
                }

                if (ballType == 2) {
                    if (run == 4) {
                        ++player2F4s;
                        ++bowlerF4s;
                    }
                    if (run == 6) {
                        ++player2S6s;
                        ++bowlerS6s;
                    }
                }
                player2Runs = player2Runs + run;
                ++player2Balls;
                strikerRuns = player2Runs;
                strikerBalls = player2Balls;

                strikerDots = player2Dots;
                strikerF4s = player2F4s;
                strikerS6s = player2S6s;
                nonStrikerDots = player1Dots;
                nonStrikerF4s = player1F4s;
                nonStrikerS6s = player1S6s;
                tvPlayer2Runs.setText(String.valueOf(player2Runs));
                tvPlayer2Balls.setText(String.valueOf(player2Balls));
//                Log.d("setPlayerRuns", "player 2 run added : "+ run);
            }
//            Log.d("setPlayerRuns", striker+" run added : "+ run);

            if (strID == ps1ID) {
                ++p1CB;
                p1CR = p1CR + run;
            }
            else if (strID == ps2ID) {
                ++p2CB;
                p2CR = p2CR + run;
            }


            strikerPlaying = true;
            strikerOut = false;
            oType = "";
//            bowlerRun = bowlerRun + run;
            currentRuns = currentRuns + run;
            psRuns = psRuns + run;

            setInningsRuns(currentInnings, currentRuns);

            if (currentInnings == 1 || currentInnings == 99)
                ll_remainings.setVisibility(View.GONE);

            else {
//
//                Log.e("SETPLAYERRUNS", "add leading run,  ll_remaining veisible");
//                Log.e("SETPLAYERRUNS", "add leading run,  remainingRuns : " + remainingRuns);



                ll_remainings.setVisibility(View.VISIBLE);

                leadingRuns = leadingRuns + run;
                if (remainingRuns > 0) {

                    remainingRuns = remainingRuns - run;
                    tvRemainingRuns.setText(String.valueOf(remainingRuns));
                    Log.e("SETPLAYERRUNS", "add leading run,  leadingRuns : " + leadingRuns);
                    Log.e("SETPLAYERRUNS", "add leading run,  remainingRuns : " + remainingRuns);
                }

                if (leadingRuns > remainingRuns && totalInnings == 4) {
                    tvRemainingRuns.setText(String.valueOf(leadingRuns));
                    tvRemainingRunsText.setText("Leading Runs : ");

                }

                if (innings.matches("single")){

                    tvRemainingRunsText.setText("Remaining Runs : ");
                } else {

                    if (remainingRuns > 0) {
                        if (currentInnings == 4)
                            tvRemainingRunsText.setText("Remaining Runs : ");
                        else
                            tvRemainingRunsText.setText("Trial Runs : ");
                    } else
                        tvRemainingRunsText.setText("Lead Runs : ");
                }

//                Log.e("SETPLAYERRUNS", "b4 setOver,  leadingRuns : " + leadingRuns);
            } //  end of (currentInnings != 1 || currentInnings != 99)


            ++bowlerBalls;
            ++bt_balls; // Added on 26/07/2021
//            bowlerOver = bowlerOver + 0.1f;
            bwRun = bwRun + run;
            mo = mo + run;

            tvBowlerRuns.setText(String.valueOf(bwRun));
            tvTotalRuns.setText(String.valueOf(currentRuns));

            tvBowler.setText(bowler);
            //Updated on 27/07/2021
            if (HUNDRED) {
                tvBowlerOver.setText(String.valueOf(bt_balls));
                tvBowlerMO.setText(String.valueOf(bowlerDots));
            } else {
                tvBowlerOver.setText(String.valueOf(new
                        DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));
                tvBowlerMO.setText(String.valueOf(bowlerMO));
            }
//            tvBowlerRuns.setText(String.valueOf(bowlerRuns));
            tvBowlerWicket.setText(String.valueOf(bowlerWicket));


            if (preBowlerID == 0)
                setPreBowlerVisibility(false);
            else
                setPreBowlerVisibility(true);

            Log.d("so_inninngs1Runs","setPlayerRuns14 , : "+so_inninngs1Runs);
            Log.d("checkFreeHit","setPlayerRuns 1, : "+checkFreeHit);
            Log.d("freeHit","setPlayerRuns 1, : "+freeHit);

            setOver(run);

            Log.d("MODIFIED", "setPlayerRuns() 10, modified : " + modified);
            Log.d("MODIFIED", "setPlayerRuns() 10, udisplay : " + udisplay);

            syncBatsmann(strID,0, null, false, -1, false,
                    false, false);
            syncBowler();

            Log.d("Partnership","setPlayerRuns 1, wicket : " + wicket);
            Log.d("Partnership","setPlayerRuns 1, psRuns : " + psRuns);
            Log.d("Partnership","setPlayerRuns 1, psBalls : " + psBalls);
            Log.d("Partnership","setPlayerRuns 1, player1ID : " + player1ID);
            Log.d("Partnership","setPlayerRuns 1, ps1ID : " + ps1ID);
            Log.d("Partnership","setPlayerRuns 1, p1CR : " + p1CR);
            Log.d("Partnership","setPlayerRuns 1, p1CB : " + p1CB);
            Log.d("Partnership","setPlayerRuns 1, player2ID: "+player2ID);
            Log.d("Partnership","setPlayerRuns 1, ps2ID : " + ps2ID);
            Log.d("Partnership","setPlayerRuns 1, p2CR : " + p2CR);
            Log.d("Partnership","setPlayerRuns 1, p2CB : " + p2CB);
            Log.d("Partnership","setPlayerRuns 1, newPartnership : " + newPartnership);
            syncPartnership(wicket + 1, outType, 0, false, false);
           /* if (newPartnership)
                newPartnership = false;*/

            Log.d("DISPLAY", "10 modified = " + modified);
            Log.d("DISPLAY", "10 udisplay = " + udisplay);
            newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket,
                    ball, 0, preInningsRuns, remainingRuns, remainingBalls, remainingOver,
                    leadingRuns, innings1Runs, innings2Runs, innings3Runs, innings4Runs,  battingTeamNo,
                    fieldingTeamNo, player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID,
                    lastPreBowlerID, run, ballType, bCount, -1, 0, -1,
                    0, null,0, disNewBatsmanBattingOrder,
                    -1, 0, 0, false, 0, commentary,
                    0, mo, maiden, modified, udisplay, tco, 0, sessionType,
                    sessionID, endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs,
                    false, freeHit, false, inning_started, 0,
                    0, 0, null, pre_out, callBowlerAlert, wk_id,
                    keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team, forfeit_innings,
                    CONCEDE, conceded_team, forceEndingType, lunch_flag, tea_flag, dinner_flag);

            /*if (strikerBalls == 1)
                syncBatsmann(strID,0, null, false, -1, false, true);
            else*/


            if (wheel) {// && !out) {
                setWagonWheelRegion(eventID);
            }

            if (ball >= 1)
                inningsNotStarted = false;

            Log.d("checkFreeHit","setPlayerRuns 2, : "+checkFreeHit);
            Log.d("freeHit","setPlayerRuns 2, : "+freeHit);

            resetFreeHit();

            boundary = false;
            commentary = "";
            endOfOver = false;

//            Log.d("SETPLAYERRUNS", "end, mo : " + mo);
//            Log.d("SETPLAYERRUNS", "end, maiden : " + maiden);

        }

    }


    void resetFreeHit() {

        if (freeHit){

            freeHit = false;
            checkFreeHit = false;
        }

    }



    // seperates boundaries and normal runs

    void displayOver(int run){

        Log.d("MODIFIED", "displayOver() 8, modified : " + modified);
        Log.d("MODIFIED", "displayOver() 8, udisplay : " + udisplay);

        firstbowler = false;
        just_started = false;
        if (status.matches("start")) {
            status = "resume";
            updateMatch(matchid, false);
        }

//        Log.d("displayOver", " matchid :"+matchid);
//        Log.d("displayOver", " matchID :"+matchID);


        if (run == 4 || run == 6){

            checkBoundary(run);
        }
        else {

            ballType = 1;
            bCount = 1; // Added on 22/09/2021
            setPlayerRuns(run);
        }
        if (run % 2 != 0){//run == 1 || run == 3){
            changeStriker(false);
        }

    }





    // the current bowler

    void changeBowler(Events events, int type, int val){

        Log.d("HUNDRED", "changeBowler 1, = " + HUNDRED);
        Log.d("HUNDRED", "changeBowler 1, bt_balls = " + bt_balls);
        Log.d("HUNDRED", "changeBowler 1, pbt_balls = " + pbt_balls);

        removeBowler(); // Added on 15/11/2021

        ArrayList<Integer> bowlerIDs = new ArrayList<Integer>();

        Log.d("Scoring", "changeBowler, replacedBowler : "+replacedBowler+", balltype : " + ballType);
        Log.d("Scoring", "changeBowler, preBowlerID : "+preBowlerID+", preBowler : " + preBowler);
        Log.d("Scoring", "changeBowler, bowlerID : "+bowlerID+", bowler : " + bowler + ", bowlerBalls : " + bowlerBalls);

        final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(UpdatedScoringActivity.this,
                android.R.layout.select_dialog_singlechoice);

        RealmResults<Player> results = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", fieldingTeamNo).
                equalTo("retired", false).
                equalTo("retired_concussion", false).    // added on 27/02/2021
                        equalTo("substitute", false).findAll();

        results.load();
        for (Player player : results) {
            if (!(player.getPlayerName()).matches(bowler)) {

                if (player.getPlayerID() != wk_id) {
//                    arrayAdapter.add(player.getPlayerName());
                    if (replacedBowler != null) {

                        if (!(player.getPlayerName()).matches(replacedBowler)) {
                            arrayAdapter.add(player.getPlayerName());
                            bowlerIDs.add(player.getPlayerID());
                        }
                    } else {
                        arrayAdapter.add(player.getPlayerName());
                        bowlerIDs.add(player.getPlayerID());
                    }
                }
            }
        }

        Log.d("SCORE", "changeBowler, arrayAdapter = " + arrayAdapter);
        Log.d("SCORE", "changeBowler, bowlerIDs = " + bowlerIDs);

//            lastBallType = realm.where(Events.class).
//                    equalTo("matchid", matchid).
//                    equalTo("innings", currentInnings).findAll().last().getBallType();

        bowlerBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        bowlerBuilder.setIcon(R.drawable.ball);
        bowlerBuilder.setCancelable(false);
        bowlerBuilder.setTitle("Select Next Bowler");
        bowlerBuilder.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();

                if (type == 1 || type == 2)
                    selectBowlerAlertDialog();
                else if (type == 5) // Added on 30/08/2021
                    changeBowlerUndoAlert(events, "If you are looking for change bowler, \npress CHANGE BOWLER else NO");
                else if (type == 6)
                    Log.d("UNDO","changeBowler, type = 6");

//                    else if (type == 2)   // Commented on 26/07/2021
//                        callChangeBowler();   // Commented on 26/07/2021

                    /*else if (type == 0)
                        changeBowler(2);*/

            }
        });
        bowlerBuilder.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                String strName = arrayAdapter.getItem(which);
                int bowID = bowlerIDs.get(which);


                // copied on 06/05/2020, from top, before adding values to adapter
                Log.d("Scoring", "changeBowler 1, balltype : " + ballType + ", bowlerBalls : " + bowlerBalls +
                        ", ballsPerOver : " + ballsPerOver);
                if (ballType != 4 && ballType != 5 && ballType != 12 && ballType != 7) {// && ballType != 13) {
                    Log.d("Scoring", "changeBowler 2, balltype : " + ballType + ", bowlerBalls : " + bowlerBalls +
                            ", ballsPerOver : " + ballsPerOver);
                    if (bowlerBalls > 0 && bowlerBalls <= ballsPerOver) {
                        Log.d("Scoring", "changeBowler, replacedBowler");

                        replacedBowlerID = bowlerID;
                        replacedBowler = bowler;
                        replacedBowlerOver = bowlerOver;
                        replacedBowlerBall = bowlerBalls;
                        rbt_balls = bt_balls; // Added on 26/07/2021
                    }
                } else {
                    lastPreBowlerID = preBowlerID;
                    preBowlerID = bowlerID;
                    preBowler = bowler;
                }
//                dialog.dismiss();

                // Added on  24/07/2021
                Log.d("HUNDRED", "changeBowler 2, = " + HUNDRED);
                Log.d("HUNDRED", "changeBowler 2, max_bpb = " + max_bpb);

                if (HUNDRED) {
                    Log.d("HUNDRED", "changeBowler 3, = " + HUNDRED);
                    Bowler bow = realm.where(Bowler.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).
                            equalTo("playerID", bowID).findFirst();
//                        Log.d("HUNDRED", "changeBowler 4, bow = " + bow);

                    if (bow != null) {
                        Log.d("HUNDRED", "changeBowler 4, bow = " + bow);
//                            b_ball = bow.getBalls();
                        int t1 = (int) bow.getOver();
                        float t2 = bow.getOver() - t1;
                        b_ball = (t1 * ballsPerOver) + (int) (t2 * 10);
                        Log.d("HUNDRED", "changeBowler, b_ball = " + b_ball);
                        Log.d("HUNDRED", "changeBowler, max_bpb = " + max_bpb);
                        if (b_ball >= max_bpb) {
                            displayWarning("Warning",
                                    "Allotted balls are completed for " + strName, 2, type, val);
                        }
                        else {
//                                continueBowler();
                            confirmBowler(type, strName, val);
                        }
                    }
                    else {
//                            continueBowler();
                        confirmBowler(type, strName, val);
                    }
                }
                else {
                    // === till here

                    // Added on 08/07/2021
                    if (limited_over) {
                        Bowler bow = realm.where(Bowler.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("playerID", bowID).findFirst();
                        if (bow != null) {
                            Log.d("HUNDRED", "changeBowler 5, bow = " + bow);
                            b_over = bow.getOver();
                            if (b_over >= 1000) {
                                displayWarningBowler(/*"Over limit exceeded for the bowler ",*/ strName, type, 1, val);
                            } else
                                confirmBowler(type, strName, val);
                        } else
                            confirmBowler(type, strName, val);
                    } else
                        confirmBowler(type, strName, val);
                }

                // === till here

                  /* Commented on  08/07/2021
                  Moved to seperate function = confirmBowler(type, strName);
                    AlertDialog.Builder builderInner = new AlertDialog.Builder(ScoringActivity.this);
                    builderInner.setIcon(R.drawable.ball);
                    builderInner.setCancelable(false);
                    dialog.dismiss();
                    builderInner.setMessage(strName);
                    builderInner.setTitle("Selected Bowler is");

                    builderInner.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            if (replacedBowler == null) { //.matches("")) {

                                if (preBowlerID != 0) {
                                    if (!strName.matches(preBowler)) {

                                        replaceNextBowler(strName);

                                    } else {

                                        AlertDialog.Builder builderInners = new AlertDialog.Builder(ScoringActivity.this);
                                        builderInners.setIcon(R.drawable.ball);
                                        builderInners.setCancelable(false);
                                        dialog.dismiss();
                                        builderInners.setMessage("Selected bowler " + strName + " just bowled the previous over");
                                        builderInners.setTitle("OK to change selection");

                                        builderInners.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                dialog.dismiss();
                                                changeBowler(type);
                                            }
                                        });
                                        builderInners.show();
                                    }
                                }

                                else {
                                    replaceNextBowler(strName);
                                }
                            }

                            else if (replacedBowler != null) {

                                if (preBowlerID != 0) {

                                    if (!(strName.matches(preBowler)) && !(strName.matches(replacedBowler))) {

                                        replaceNextBowler(strName);

                                    } else {

                                        AlertDialog.Builder builderInners = new AlertDialog.Builder(ScoringActivity.this);
                                        builderInners.setIcon(R.drawable.ball);
                                        builderInners.setCancelable(false);
                                        dialog.dismiss();
                                        builderInners.setMessage("Selected bowler " + strName + " just bowled the previous over");
                                        builderInners.setTitle("OK to change selection");

                                        builderInners.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {

                                                dialog.dismiss();
                                                changeBowler(type);

                                            }
                                        });
//
                                        builderInners.show();
                                    }
                                }

                                else {

                                    replaceNextBowler(strName);
                                }
                            }
                        }
                    });

                    builderInner.setNeutralButton("Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            changeBowler(type);
                        }
                    });
                    builderInner.show();*/
            }
        });
        bowlerBuilder.show();
    }



    void replaceNextBowler(String strName, int val) {

        Log.d("HUNDRED", "replaceNextBowler, bt_balls = " + bt_balls);
        Log.d("HUNDRED", "replaceNextBowler, pbt_balls = " + pbt_balls);

        bowler = strName;
//           dialog.dismiss();
        tvBowler.setText(bowler);
        bowlerID = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", fieldingTeamNo).
                equalTo("playerName", bowler).findFirst().getPlayerID();
        newBowler(bowlerID, preBowlerID);
        syncBowler();
        ballType = 6;
        bCount = 0; // Added on 22/09/2021

        Log.d("so_inninngs1Runs", "chyangeBowler16 , : " + so_inninngs1Runs);
        Log.e("Scoring", "changeBowler, bowlerBuilder, builderInner, ballType : " + ballType);
        if (val == 1) {
            Events last = realm.where(Events.class).
                    equalTo("matchid", matchid).
                    equalTo("innings", currentInnings).findAll().last();

            if (last != null) {
                if (last.getBallType() == 6)
                    updateEvents(last.getEventID(), 0, bowlerID);
            }

        } else {
            Log.d("DISPLAY", "11 modified = " + modified);
            Log.d("DISPLAY", "11 udisplay = " + udisplay);
            newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket,
                    ball, 0, preInningsRuns, remainingRuns, remainingBalls, remainingOver,
                    leadingRuns, innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo,
                    fieldingTeamNo, player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID,
                    lastPreBowlerID, 0, ballType, bCount, 0, 0, 0,
                    0, null, 0, disNewBatsmanBattingOrder,
                    0, 0, 0, false, 0,
                    commentary, bowlerID, mo, maiden, modified, udisplay, tco, 0, sessionType,
                    sessionID, endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs,
                    false, freeHit, false, inning_started, 0,
                    0, 0, null, pre_out, callBowlerAlert, wk_id,
                    keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team, forfeit_innings,
                    CONCEDE, conceded_team, forceEndingType, lunch_flag, tea_flag, dinner_flag);
        }
        commentary = "";
    }



    // sync Batsman table with striker details

    void syncBatsmann(int batsmanID, int bowlerID, String fielderID, boolean out, int outType,
                      boolean retired, boolean undo, boolean wk_flag){

//        displayProgress();
        Log.e("Scoring", "syncBatsmann, batsmanID : "+batsmanID + ", outType : " + outType + ", out : " + out);

        Log.e("syncBatsmann", " method, eventId : "+eventID);
        Log.e("syncBatsmann", " method, SUPER_OVER : "+SUPER_OVER);

//        Log.d("synchBatsmann", " striker :"+striker);
//        Log.d("synchBatsmann", " nonstriker :"+nonStriker);
//        Log.d("synchBatsmann", " player1 :"+player1);
//        Log.d("synchBatsmann", " player2 :"+player2);
//        Log.d("synchBatsmann", " bowler :"+bowler);
//        Log.d("synchBatsmann", " battingTeamNo :"+battingTeamNo);
//        Log.d("synchBatsmann", " matchid :"+matchid);
//        Log.d("synchBatsmann", " matchID :"+matchID);

        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);


        Player player = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", battingTeamNo).
                equalTo("playerID", batsmanID).findFirst();

        Log.e("syncBatsmann", " method, player : "+player);


        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {

                Batsman batsmann = realm.where(Batsman.class).
                        equalTo("matchid", matchid).
                        equalTo("innings", currentInnings).
                        equalTo("team", battingTeamNo).
                        equalTo("batsman_pID", batsmanID).findFirst();
                Log.d("Scoring","newBatsman"+batsmann);

                if (batsmann == null){

                    Number num = realm.where(Batsman.class).max("batsmanID");
                    int batId = (num == null) ? 1 : num.intValue() + 1;

//                    int batId = RandomNumber.generate("Batsman");
                    batsmann = realm.createObject(Batsman.class, batId);
                    batsmann.setBatsman_pID(batsmanID);
                    batsmann.setMatchid(matchid);
                    batsmann.setMatchID(matchID);
//                    batsmann.setBatsmanName(batsman);
                    batsmann.setTeam(player.getTeam());
                    batsmann.setInnings(currentInnings);
                    batsmann.setPlaying(true);
                    batsmann.setSUPER_OVER(SUPER_OVER);


//                    batsmann.setToBeBatted(false);

//                    if (RUN_ONCE) {
//
//                        batsmann.setPosition(0);
//                    }
//                    else {



//                    }
                    Log.d("Scoring","synchBatsmann, null, bid :"+batsmanID);
                    Log.d("Scoring","synchBatsmann, null, matchid :"+matchid);
                    Log.d("Scoring","synchBatsmann, null, matchID :"+matchID);
//                    Log.d("Scoring","synchBatsmann, null, batsman :"+batsman);
                    Log.d("Scoring","synchBatsmann, null, player.getTeam() :"+player.getTeam());
                    Log.d("Scoring","synchBatsmann, null, currentInnings :"+currentInnings);
                }

                if (batsmanID == strID) {

//                    if (pos) {
//                        if (strikerBalls == 1) {
                           /* Number num1 = realm.where(Batsman.class).
                                    equalTo("innings", currentInnings).
                                    equalTo("team", battingTeamNo).
                                    max("battingOrder");
                            int order = (num1 == null) ? 1 : num1.intValue() + 1;
                            batsmann.setBattingOrder(order);*/
//                        }
//                    }

                    batsmann.setRuns(strikerRuns);
                    batsmann.setBalls(strikerBalls);
                    batsmann.setDots(strikerDots);
                    batsmann.setF4s(strikerF4s);
                    batsmann.setS6s(strikerS6s);
                    batsmann.setRetired(retired);
                    Log.d("Scoring","synchBatsmann, not null, strikerRuns :"+strikerRuns);
                    Log.d("Scoring","synchBatsmann, not null, strikerBalls :"+strikerBalls);
                    Log.d("Scoring","synchBatsmann, not null, strikerDots :"+strikerDots);
                    Log.d("Scoring","synchBatsmann, not null, strikerF4s :"+strikerF4s);
                    Log.d("Scoring","synchBatsmann, not null, strikerS6s :"+strikerS6s);
                    if (strikerRuns > 0 || strikerBalls > 0) {
                        batsmann.setPlaying(true);
                        batsmann.setToBeBatted(false);
                    }

                }

                else if (batsmanID == nstrID) {

                    batsmann.setRuns(nonStrikerRuns);
                    batsmann.setBalls(nonStrikerBalls);
                    batsmann.setDots(nonStrikerDots);
                    batsmann.setF4s(nonStrikerF4s);
                    batsmann.setS6s(nonStrikerS6s);
                    Log.d("Scoring","synchBatsmann, not null, nonStrikerRuns :"+nonStrikerRuns);
                    Log.d("Scoring","synchBatsmann, not null, nonStrikerBalls :"+nonStrikerBalls);
                    Log.d("Scoring","synchBatsmann, not null, nonStrikerDots :"+nonStrikerDots);
                    Log.d("Scoring","synchBatsmann, not null, nonStrikerF4s :"+nonStrikerF4s);
                    Log.d("Scoring","synchBatsmann, not null, nonStrikerS6s :"+nonStrikerS6s);
                }


                if (out) {
                    batsmann.setOut(true);
                    batsmann.setPlaying(false);
                    batsmann.setRetired(false);
                    batsmann.setOutType(outType);
                    batsmann.setBowler_pID(bowlerID);
                    batsmann.setFielder_pID(fielderID);
//                    batsmann.setRetired(retired);

                    //Added on 18/03/2021
                    if (wk_flag) {
                        batsmann.setWk_fielder(wk_flag);
                    }
                }



                else {
                    batsmann.setOut(false);
                    batsmann.setPlaying(true);
                }

                batsmann.setToBeBatted(false);

                if (retired){
                    batsmann.setRetired(true);
                    batsmann.setPlaying(false);
                }


                if (undo) {
                    batsmann.setBattingOrder(100);
                }


                if (SUPER_OVER)
                    realm.copyToRealm(batsmann);

                else
                    realm.copyToRealmOrUpdate(batsmann);

                Log.d("USA", "syncBatsmann, batsmann = " + batsmann);
            }
        });

//        progress.dismiss();

    }




    // synch Bowler table with bowler details

    void syncBowler(){
        int tempover = 0, tempballs= 0;

//        Log.d("synchBowler", " matchid :"+matchid);
//        Log.d("synchBowler", " matchID :"+matchID);
        Log.d("syncBowler", " bowler :"+bowler);
        Log.d("syncBowler", " currentInnings :"+currentInnings);
        Log.d("syncBowler", " bowlerBalls :"+bowlerBalls);
        Log.d("syncBowler", " ballsPerOver :"+ballsPerOver);
        Log.d("syncBowler", " bowlerOver :"+bowlerOver);

        Log.d("HUNDRED", "syncBowler 1, bt_balls = " + bt_balls);
        Log.d("HUNDRED", "syncBowler 1, pbt_balls = " + pbt_balls);


//        displayProgress();

        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {

                try {

                    Bowler bowller = realm.where(Bowler.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).
                            equalTo("team", fieldingTeamNo).
                            equalTo("playerID", bowlerID).findFirst();
//                    Log.d("syncBowler", "bowlerID : " + bowlerID);
//                    Log.d("syncBowler", "bowler : " + bowller);
                    Log.d("HUNDRED", "syncBowler 2, bowller = " + bowller);


                    if (UNDO_LIMIT) {
                        Log.d("undo", "syncBowler");
                        //   added on 21/01/2021
                        bowlerOver = 0;
                        bowlerBalls = 0;
                        bt_balls = 0; // Added on 26/07/2021
                        bowlerMO = 0;
                        bwRun = 0;
                        bowlerWicket = 0;
                        bowlerDots = 0;
                        bowlerF4s = 0;
                        bowlerS6s = 0;
                        bowlerWide = 0;
                        bowlerNoBall = 0;
                        // till here
                    }
                    else {

                        if (bowlerBalls >= ballsPerOver) {
                            ++bowlerOver;
                            if (bowlerBalls == ballsPerOver)
                                bowlerBalls = 0;
                            else if (bowlerBalls == (ballsPerOver + 1))
                                bowlerBalls = 1;
                        }
                    }



                    if (bowller != null) {

                        bowller.setOver(bowlerOver);
                        bowller.setBalls(bowlerBalls);
                        bowller.setTotalBalls(bowlerBalls);
                        bowller.setMaidenOver(bowlerMO);
                        bowller.setRuns(bwRun);
                        bowller.setWicket(bowlerWicket);
                        bowller.setDots(bowlerDots);
                        bowller.setF4s(bowlerF4s);
                        bowller.setS6s(bowlerS6s);
                        bowller.setWides(bowlerWide);
                        bowller.setNoBalls(bowlerNoBall);
                        bowller.setTotalBalls(bt_balls);    // Added on 27/07/2021

                        Log.d("syncBowler", " bowlerOver :" + bowlerOver);
                        Log.d("syncBowler", " bowlerBalls :" + bowlerBalls);
                        Log.d("syncBowler", " bowlerMO :" + bowlerMO);
                        Log.d("syncBowler", " bwRun :" + bwRun);
                        Log.d("syncBowler", " bowlerWicket :" + bowlerWicket);
                        Log.d("syncBowler", " bowlerDots :" + bowlerDots);
                        Log.d("syncBowler", " bowlerF4s :" + bowlerF4s);
                        Log.d("syncBowler", " bowlerS6s :" + bowlerS6s);
                        Log.d("syncBowler", " bowlerWide :" + bowlerWide);
                        Log.d("syncBowler", " bowlerNoBall :" + bowlerNoBall);

                        realm.insertOrUpdate(bowller);
                        Log.d("HUNDRED", "syncBowler 3, bowller = " + bowller);
                    }
                }

                catch (RealmException e){

                    Log.d("SyncBowler", "Exception  : "+e);
                }
            }

        });

//        progress.dismiss();

    }



    // create a new record in Bowler table for new Bowler

    void newBowler(int bowlerID, int preBowlerID){

        Log.d("HUNDRED", "newBowler 1, bt_balls = " + bt_balls);
        Log.d("HUNDRED", "newBowler 1, pbt_balls = " + pbt_balls);

//        displayProgress();

//        Log.d("newBowler", "bowler"+bowler);
//        Log.d("newBowler", " matchid :"+matchid);
//        Log.d("newBowler", " matchID :"+matchID);
        Log.d("scoring", "newBowler, bowlerID :"+bowlerID);
        Log.d("scoring", "newBowler, bowler :"+bowler);
        Log.d("scoring", "newBowler, preBowlerID :"+preBowlerID);
        Log.d("scoring", "newBowler, preBowler :"+preBowler);
//        Log.d("scoring", "newBowler, nextBowlerID :"+nextBowlerID);
//        Log.d("scoring", "newBowler, nextBowler :"+nextBowler);

        bowler = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", fieldingTeamNo).
                equalTo("playerID", bowlerID).findFirst().getPlayerName();

        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {

                try {

                    Bowler bowller = realm.where(Bowler.class).
                            equalTo("matchid", matchid).
                            equalTo("team", fieldingTeamNo).
                            equalTo("innings", currentInnings).
                            equalTo("playerID", bowlerID).findFirst();

                    Log.d("HUNDRED", "newBowler 2, bowller = " + bowller);
//                    assert bowller != null;


                    if (bowller == null) {

                        Number num = realm.where(Bowler.class).max("bowlerID");
                        int bwId = (num == null) ? 1 : num.intValue() + 1;
//                        int bwId = RandomNumber.generate("Bowler");
                        bowller = realm.createObject(Bowler.class, bwId);
                        bowller.setPlayerID(bowlerID);
                        bowller.setMatchid(matchid);
                        bowller.setMatchID(matchID);
//                        bowller.setBowlerName(bowler);
                        bowller.setTeam(fieldingTeamNo);
                        bowller.setInnings(currentInnings);

                        bowller.setSUPER_OVER(SUPER_OVER);

//                        bowlerOver = 0;
//                        bowlerBalls = 0;
//                        bowlerMO = 0;
//                        bwRun = 0;
//                        bowlerWicket  = 0;
//                        bowlerF4s = 0;
//                        bowlerS6s = 0;
//                        bowlerWide = 0;
//                        bowlerNoBall = 0;
                    }

//                    else if (bowller != null) {

                    bowlerOver = bowller.getOver();
                    bowlerBalls = bowller.getBalls();
                    bt_balls = bowller.getTotalBalls(); // Added on 26/07/2021
                    bowlerMO = bowller.getMaidenOver();
                    bwRun = bowller.getRuns();
                    bowlerWicket = bowller.getWicket();
                    bowlerDots = bowller.getDots();
                    bowlerF4s = bowller.getF4s();
                    bowlerS6s = bowller.getS6s();
                    bowlerWide = bowller.getWides();
                    bowlerNoBall = bowller.getNoBalls();


//                    }


                    if (preBowlerID != 0) {

                        Bowler prebowller = realm.where(Bowler.class).
                                equalTo("matchid", matchid).
                                equalTo("team", fieldingTeamNo).
                                equalTo("innings", currentInnings).
                                equalTo("playerID", preBowlerID).findFirst();

                        Log.d("HUNDRED", "newBowler 3, prebowller = " + prebowller);

                        if (prebowller == null) {

                            Number num = realm.where(Bowler.class).max("bowlerID");
                            int bwId = (num == null) ? 1 : num.intValue() + 1;
//                        int bwId = RandomNumber.generate("Bowler");
                            prebowller = realm.createObject(Bowler.class, bwId);
                            prebowller.setPlayerID(preBowlerID);
                            prebowller.setMatchid(matchid);
                            prebowller.setMatchID(matchID);
//                        prebowller.setBowlerName(bowler);
                            prebowller.setTeam(fieldingTeamNo);
                            prebowller.setInnings(currentInnings);
                        }
//
                        preBowlerOver = prebowller.getOver();
                        preBowlerBalls = prebowller.getBalls();
                        pbt_balls = prebowller.getTotalBalls(); // Added on 26/07/2021
                        preBowlerDots = prebowller.getDots(); // Added on 26/07/2021
                        preBowlerMO = prebowller.getMaidenOver();
                        preBowlerRun = prebowller.getRuns();
                        preBowlerWicket = prebowller.getWicket();
//                        bowlerF4s = prebowller.getF4s();
//                        bowlerS6s = prebowller.getS6s();
//                        bowlerWide = prebowller.getWides();
//                        bowlerNoBall = prebowller.getNoBalls();

                        realm.insertOrUpdate(prebowller);
                        Log.d("HUNDRED", "newBowler 4, prebowller = " + prebowller);

                    }

                    Log.d("HUNDRED", "newBowler 2, bt_balls = " + bt_balls);
                    Log.d("HUNDRED", "newBowler 2, pbt_balls = " + pbt_balls);

//                        initializeBowler();
                    tvBowler.setText(bowler);
                    tvBowlerWicket.setText(String.valueOf(bowlerWicket));
                    //Updated on 27/07/2021
                    if (HUNDRED) {
                        tvBowlerOver.setText(String.valueOf(bt_balls));
                        tvBowlerMO.setText(String.valueOf(bowlerDots));
                    } else {
                        tvBowlerOver.setText(String.valueOf(new
                                DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));
                        tvBowlerMO.setText(String.valueOf(bowlerMO));
                    }
                    tvBowlerRuns.setText(String.valueOf(bwRun));


                    if (currentInnings != 99) {

                        if (preBowlerID != 0) {

                            setPreBowlerVisibility(true);

//                            tvBowler2.setText(preBowler);
//                            tvBowlerOver2.setText(String.valueOf(new
//                                    DecimalFormat("##.#").format(setOverDisplay(preBowlerOver, preBowlerBalls))));
//                            tvBowlerRuns2.setText(String.valueOf(preBowlerRun));
//                            tvBowlerWicket2.setText(String.valueOf(preBowlerWicket));
//                            tvBowlerMO2.setText(String.valueOf(preBowlerMO));
                        } else {

                            setPreBowlerVisibility(false);
                        }

                    }

                    realm.insertOrUpdate(bowller);

                }

                catch (RealmException e){

                    Log.d("SynchBowler", "Exception  : "+e);
                }
            }

        });

//        progress.dismiss();

    }






    // select new player for next batsman

    void changeBatsman(int dismissedPlayerID, String replacedBatsman, boolean newPartnership, boolean bow){

        Log.d("CB", "callBowlerAlert = " + callBowlerAlert);
        Log.d("CB", "bow = " + bow);

//        if (first_batsman)
//            score





//        Log.d("changeBatsman", " matchid :"+matchid);
//        Log.d("changeBatsman", " matchID :"+matchID);
        if (wicket >= 0 && wicket <= player_count - 2) {

//            removeBatsman();    // Added on 15/11/2021

            ArrayList<Integer> batsmanIDList = new ArrayList<Integer>();

            final ArrayAdapter<String> batsmanAdapter = new ArrayAdapter<String>(UpdatedScoringActivity.this,
                    android.R.layout.select_dialog_singlechoice);
//        dismissedList = new ArrayAdapter<String>(ScoringActivity.this, android.R.layout.select_dialog_singlechoice);


            RealmResults<Player> p_results = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", battingTeamNo).
                    equalTo("retired_concussion", false).    // added on 27/02/2021
                            equalTo("substitute", false).findAll();

            p_results.load();
            for (Player player : p_results) {
//            batsmanAdapter.add(player.getPlayerName());
                batsmanIDList.add(player.getPlayerID());
            }

            Log.e("Scoring", "changeBatsman, 1st, batsmanIDList : "+batsmanIDList);
            Log.e("Scoring", "changeBatsman, dismissedPlayerID : "+dismissedPlayerID);

            RealmResults<Batsman> b_result = realm.where(Batsman.class).                // check for
                    equalTo("matchid", matchid).
                    equalTo("innings", currentInnings).
                    equalTo("team", battingTeamNo).
//                    equalTo("retired_concussion", false).    // added on 27/02/2021
        equalTo("out", true).findAll();
            b_result.load();

            for (Batsman batsman : b_result) {

                Log.e("Scoring", "changeBatsman, batsman : "+batsman);

                for (int i = 0; i < batsmanIDList.size(); i++){

                    if (batsmanIDList.get(i) == batsman.getBatsman_pID()){

                        batsmanIDList.remove(i);


                    }
                }
//                if (batsmanIDList.contains(batsman.getBatsman_pID()))
//                    batsmanIDList.remove(batsman.getBatsman_pID());


            }

            Log.e("Scoring", "changeBatsman, 2nd," +
                    " removing out players from batsman list, batsmanIDList : "+batsmanIDList);
            Log.e("Scoring", "changeBatsman, b4 dismissedList : "+dismissedList);


            if (dismissedList != null) {
                for (int id : dismissedList) {
                    if (id != 0) {

                        for (int i = 0;i < batsmanIDList.size(); i++){

                            if (batsmanIDList.get(i) == id){

                                batsmanIDList.remove(i);
                            }
                        }

                    }
                }
            }

            Log.e("Scoring", "changeBatsman, after dismissedList : "+dismissedList);
            Log.e("Scoring", "changeBatsman, retiredList : "+retiredList);




            for (int b_ID : batsmanIDList) {

                for (Player player : p_results) {

                    if (b_ID == player.getPlayerID()) {

                        batsmanAdapter.add(player.getPlayerName());
                    }

                }

            }

            Log.e("Scoring", "changeBatsman, batsmanAdapter : "+batsmanAdapter);


            batsmanAdapter.remove(striker);
            batsmanAdapter.remove(nonStriker);

            Log.e("Scoring", "changeBatsman, batsmanBuilder");

            batsmanBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
            batsmanBuilder.setIcon(R.drawable.ball);
            batsmanBuilder.setCancelable(false);
            batsmanBuilder.setTitle("Select Next Batsman");
//            batsmanBuilder.setNegativeButton("cancel", new DialogInterface.OnClickListener() {
//                @Override
//                public void onClick(DialogInterface dialog, int which) {
//                    dialog.dismiss();
//                }
//            });

            //commented on 08/05/2020
            //if (dismissedPlayerID <= 0) {

            batsmanBuilder.setPositiveButton("CANCEL", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();

                    // updated on 08/05/2020
                    if (dismissedPlayerID <= 0)
                        confirmReplace(replacedBatsman, bow);
                    else
                        dismissedPlayerDetails(dismissedPlayerID);
                    //=========== updated till here

                }
            });
            //} // commnted on 08/05/2020



            // Added on 30/06/2021
            if (!UNDO) {    // Added on 30/08/2021
                batsmanBuilder.setNeutralButton("UNDO", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        undo();
                    }
                });
            }
            // == till here

            // added on 08/05/2020
            batsmanBuilder.setNegativeButton("INTERVAL",
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
//                    dismissedPlayrID = dismissedPlayerID;
                            dialog.dismiss();
                            pre_out = true;
                            setInterval(new Events(), 3);
                        }
                    }); //=========== added till here

            batsmanBuilder.setAdapter(batsmanAdapter, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog1, int which) {

                    newBatsman = batsmanAdapter.getItem(which);
//                dialog1.dismiss();
                    AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
                    builderInner.setIcon(R.drawable.ball);
                    builderInner.setCancelable(false);

                    builderInner.setMessage(newBatsman);
                    builderInner.setTitle("Selected new Batsman is");
//                    Log.e("Scoring", "changeBatsman, batsmanBuilder, builderInner");

                    builderInner.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            dismissedPlayrID = 0; // added on 11/05/2020
                            dialog1.dismiss();
                            dialog.dismiss();

                            if (out){

                                pre_out = false;

                                Log.e("Scoring", "changeBatsman, batsmanBuilder, builderInner, out : "+out);

                                checkRetired(newBatsman, out, dismissedPlayerID, bow);

                                if (dismissedPlayerID > 0) {

                                    if (!allOUT) {

                                        Log.e("outToScoring", "outToScoring, allOUT, newBatsman : "
                                                + newBatsman + ", bats : " + bats);
                                        Log.d("CB", "callBowlerAlert 2 = " + callBowlerAlert);
                                        Log.d("CB", "bow 2 = " + bow);

                                        setNewBatsman(dismissedPlayerID, newBatsman, bow);
                                    }
                                }
                            }

                            else {
                                Log.d("CHANGEBATSMAN", "replacedBatsman = " + replacedBatsman);
                                updateBatsman(newBatsman, replacedBatsman, -1);
                            }
                        }
                    });

                    builderInner.setNeutralButton("Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            Log.d("CHANGEBATSMAN", "changeBatsman, Selected Batsman is, Cancel");
                            changeBatsman(dismissedPlayerID, replacedBatsman, newPartnership, bow);//-1);
                        }
                    });
//
                    builderInner.show();
//                dialog.dismiss();
                }
            });



            batsmanBuilder.show();

        }

        else {

            outOfPlayerAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
            outOfPlayerAlert.setIcon(R.drawable.ball);
            outOfPlayerAlert.setCancelable(false);
//            outOfPlayerAlert.setTitle("No more players left for change batsman"); // Commented on 28/07/2021
            outOfPlayerAlert.setTitle("No players left to change");
            outOfPlayerAlert.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
                            bats = null;
                        }
                    });
            outOfPlayerAlert.show();

        }

        Log.e("Scoring", "wicket = "+wicket);
        Log.e("Scoring", "player_count = "+player_count);


    }




    void updateBatsman(String newBatsman, String replacedBatsman, int eID) {

        int replacedPlayerID = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", battingTeamNo).
                equalTo("playerName", replacedBatsman).findFirst().getPlayerID();

        int newplayerID = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", battingTeamNo).
                equalTo("playerName", newBatsman).findFirst().getPlayerID();


        //update in Batsman table
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {

                Batsman batsmann1 = realm.where(Batsman.class).
                        equalTo("matchid", matchid).
                        equalTo("innings", currentInnings).
                        equalTo("team", battingTeamNo).
                        equalTo("batsman_pID", replacedPlayerID).findFirst();

                Batsman batsmann2 = realm.where(Batsman.class).
                        equalTo("matchid", matchid).
                        equalTo("innings", currentInnings).
                        equalTo("team", battingTeamNo).
                        equalTo("batsman_pID", newplayerID).findFirst();
                Log.d("Scoring","synchBatsmann, batsmann :"+batsmann1);
                Log.d("Scoring","synchBatsmann, batsmann1 :"+batsmann1);

                if (batsmann1 != null) {

                    batsmann1.setBatsman_pID(newplayerID);
                    batsmann1.setPlaying(true);
                    batsmann1.setToBeBatted(false);
                    realm.insertOrUpdate(batsmann1);
                }

                if (batsmann2 != null) {

                    batsmann2.setBatsman_pID(replacedPlayerID);
                    batsmann2.setPlaying(false);
                    batsmann2.setToBeBatted(true);
                    realm.insertOrUpdate(batsmann2);
                }
            }
        });




        if (replacedPlayerID == player1ID){
            player1 = newBatsman;
            tvPlayer1.setText(player1);
            tvPlayer1Runs.setText(String.valueOf(player1Runs));
            tvPlayer1Balls.setText(String.valueOf(player1Balls));
            player1ID = newplayerID;
        }
        else if (replacedPlayerID == player2ID){
            player2 = newBatsman;
            tvPlayer2.setText(player2);
            player2ID = newplayerID;
        }

        if (strID > 0 && replacedPlayerID == strID){
            striker = newBatsman;
            strID = newplayerID;
        }
        else  if (nstrID > 0 && replacedPlayerID == nstrID){
            nonStriker = newBatsman;
            nstrID = newplayerID;
        }

        if (replacedPlayerID == ps1ID)
            ps1ID = newplayerID;
        else if (replacedPlayerID == ps2ID)
            ps2ID = newplayerID;


        Log.d("so_inninngs1Runs","updateBatsman17 , : "+so_inninngs1Runs);
//        ballType = 0;   Commente on 22/09/2021
        ballType = 7;
        bCount = 0; // Added on 22/09/2021
        Log.e("Scoring", "replaceBatsman, ballType : "+ballType);
        if (eID == -1) {
            Log.d("DISPLAY", "12 modified = " + modified);
            Log.d("DISPLAY", "12 udisplay = " + udisplay);
            newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket,
                    ball, 0, preInningsRuns, remainingRuns, remainingBalls, remainingOver,
                    leadingRuns, innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo,
                    fieldingTeamNo, player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID,
                    lastPreBowlerID, 0, ballType, bCount, 0, 0, 0,
                    replacedPlayerID, null, newplayerID, disNewBatsmanBattingOrder,
                    0, 0, 0, false, 0,
                    commentary, 0, mo, maiden, modified, udisplay, tco, intervalID,
                    sessionType, sessionID, endOfDay, SUPER_OVER, so_inninngs1Runs,
                    so_inninngs2Runs, false, freeHit, false, inning_started,
                    0, 0, 0, null, pre_out,
                    callBowlerAlert, wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT,
                    forfeit_team, forfeit_innings, CONCEDE, conceded_team, forceEndingType,
                    lunch_flag, tea_flag, dinner_flag);

        } else {
            updateEvents(eID, newplayerID, 0);
        }

        commentary = "";
    }




    void setNewBatsman(int dismissedPlayerID, String bats, boolean bow) {

        newFlag = false;
        int battingOrder = 0;

        int batsID = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", battingTeamNo).
                equalTo("playerName", bats).findFirst().getPlayerID();

//        newBatsID = batsID;




        Batsman batsmann = realm.where(Batsman.class).
                equalTo("matchid", matchid).
                equalTo("team", battingTeamNo).
                equalTo("innings", currentInnings).
                equalTo("batsman_pID", batsID).findFirst();



        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {

                    try {

                        Number num1 = bgRealm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("team", battingTeamNo).
                                notEqualTo("battingOrder", 100).
                                max("battingOrder");
                        int order = (num1 == null) ? 1 : num1.intValue() + 1;
                        disNewBatsmanBattingOrder = order;

                        Log.d("order", "scoring, order : " + order);
                        Log.d("order", "scoring, num1 : " + num1);


                        if (SUPER_OVER) {

                            newFlag = true;

                            Batsman batsmann = bgRealm.where(Batsman.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", currentInnings).
                                    equalTo("team", battingTeamNo).
                                    equalTo("batsman_pID", batsID).findFirst();
                            Log.d("Scoring","synchBatsmann, batsmann :"+batsmann);

                            if (batsmann == null){

                                Number num = bgRealm.where(Batsman.class).max("batsmanID");
                                int batId = (num == null) ? 1 : num.intValue() + 1;

                                batsmann = bgRealm.createObject(Batsman.class, batId);
                                batsmann.setBatsman_pID(batsID);
                                batsmann.setMatchid(matchid);
                                batsmann.setMatchID(matchID);
                                batsmann.setTeam(battingTeamNo);
                                batsmann.setInnings(currentInnings);
                                batsmann.setPlaying(true);
                                batsmann.setSUPER_OVER(SUPER_OVER);
                                batsmann.setBattingOrder(order);

                                bgRealm.copyToRealmOrUpdate(batsmann);


                            }
                        }

                        else {
                            /*Number num1 = bgRealm.where(Batsman.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", currentInnings).
                                    equalTo("team", battingTeamNo).
                                    notEqualTo("battingOrder", 100).
                                    max("battingOrder");
                            int order = (num1 == null) ? 1 : num1.intValue() + 1;*/

//                         ++battingOrder;

                            if (batsmann != null) {

                                if (retiredList.size() > 0) {
                                    if (!batsmann.isRetired())
                                        batsmann.setBattingOrder(order);
                                } else
                                    batsmann.setBattingOrder(order);

                                bgRealm.copyToRealm(batsmann);
                            }

                        }


                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        } catch (RealmException e) {
            Log.d("setNewBatsman", "Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }



        // sync Partnership table

        ballType = 7;
        bCount = 0; // Added on 22/09/2021

        psRuns = 0;
        psBalls = 0;
        psTBalls = 0;   // added on 28/07/2021
        psOver = 0;

        Log.d("setNewBatsman", "ps1ID : " + ps1ID + ", ps2ID : " + ps2ID + ", dismissedPlayerID : " + dismissedPlayerID);


        if (ps1ID == dismissedPlayerID) {
            ps1ID = batsID;
            p1CB = 0;
            p1CR = 0;
            p2CB = 0;
            p2CR = 0;
            /*if (newFlag) {        // don't need it, because anyway new partnerShip will create

            }*/
        }

        else if (ps2ID == dismissedPlayerID) {
            ps2ID = batsID;
            p1CB = 0;
            p1CR = 0;
            p2CB = 0;
            p2CR = 0;
        }


        if (player1ID == dismissedPlayerID) {

            player1ID = batsID;
            player1 = bats;
            if (newFlag) {      // selected player is new

                player1Balls = 0;
                player1Runs = 0;
                player1Dots = 0;
                player1F4s = 0;
                player1S6s = 0;

            }

            else {      // selected player was retired

                player1Balls = batsmann.getBalls();
                player1Runs = batsmann.getRuns();
                player1Dots = batsmann.getDots();
                player1F4s = batsmann.getF4s();
                player1S6s = batsmann.getS6s();
            }
            tvPlayer1.setText(bats);
            tvPlayer1Runs.setText(String.valueOf(player1Runs));
            tvPlayer1Balls.setText(String.valueOf(player1Balls));

        }

        else if (player2ID == dismissedPlayerID) {

            player2ID = batsID;
            player2 = bats;

            if (newFlag) {
                player2Balls = 0;
                player2Runs = 0;
                player2Dots = 0;
                player2F4s = 0;
                player2S6s = 0;
            }
            else {
                player2Balls = batsmann.getBalls();
                player2Runs = batsmann.getRuns();
                player2Dots = batsmann.getDots();
                player2F4s = batsmann.getF4s();
                player2S6s = batsmann.getS6s();
            }
            tvPlayer2.setText(bats);
            tvPlayer2Runs.setText(String.valueOf(player2Runs));
            tvPlayer2Balls.setText(String.valueOf(player2Balls));
        }

        if (strID == dismissedPlayerID) {

            strID = batsID;
            striker = bats;

            if (newFlag) {
                strikerRuns = 0;
                strikerBalls = 0;
                strikerDots = 0;
                strikerF4s = 0;
                strikerS6s = 0;
            }
            else {
                strikerRuns = batsmann.getRuns();
                strikerBalls = batsmann.getBalls();
                strikerDots = batsmann.getDots();
                strikerF4s = batsmann.getF4s();
                strikerS6s = batsmann.getS6s();
            }
        }

        else if (nstrID == dismissedPlayerID) {

            nstrID = batsID;
            nonStriker = bats;

            if (newFlag) {
                nonStrikerRuns = 0;
                nonStrikerBalls = 0;
                nonStrikerDots = 0;
                nonStrikerF4s = 0;
                nonStrikerS6s = 0;
            }
            else {
                nonStrikerRuns = batsmann.getRuns();
                nonStrikerBalls = batsmann.getBalls();
                nonStrikerDots = batsmann.getDots();
                nonStrikerF4s = batsmann.getF4s();
                nonStrikerS6s = batsmann.getS6s();
            }
        }


        // save the new Batsman event

        Log.d("so_inninngs1Runs","setNewBatsman18 , : "+so_inninngs1Runs);
        Log.d("Partnership","setNewBatsman 18 , : "+newPartnership);


       /* if (newPartnership) {
//            newPartnership = false;
            syncPartnership(wicket, false, -1, true);
        }
        else {*/
        syncPartnership(wicket + 1, outType, 0, newPartnership, false);
        /*}*/


        Log.d("Partnership","setNewBatsman 19 , : "+newPartnership);

        Log.d("DISPLAY", "13 modified = " + modified);
        Log.d("DISPLAY", "13 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket, ball,
                0, preInningsRuns, remainingRuns, remainingBalls, remainingOver, leadingRuns,
                innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo, fieldingTeamNo,
                player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0,
                ballType, bCount, -1, 0, -1, dismissedPlayerID, null,
                batsID, disNewBatsmanBattingOrder, penaltyType, penaltyRun, penaltyRunTeam,false,
                0, commentary, 0, mo,maiden, modified, udisplay, tco,0,
                sessionType, sessionID,endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs, false, freeHit, newPartnership,
                inning_started, 0, 0, 0, null, pre_out,
                callBowlerAlert, wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT,
                forfeit_team, forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                tea_flag, dinner_flag);

        dismissedPlayrID = 0;

        Log.d("Partnership","setNewBatsman 20 , : "+newPartnership);


        syncBatsmann(batsID, 0, null, false,
                -1, false, false, false);

        Log.d("Partnership","setNewBatsman 1, wicket : " + wicket);
        Log.d("Partnership","setNewBatsman 1, psRuns : " + psRuns);
        Log.d("Partnership","setNewBatsman 1, psBalls : " + psBalls);
        Log.d("Partnership","setNewBatsman 1, player1ID : " + player1ID);
        Log.d("Partnership","setNewBatsman 1, ps1ID : " + ps1ID);
        Log.d("Partnership","setNewBatsman 1, p1CR : " + p1CR);
        Log.d("Partnership","setNewBatsman 1, p1CB : " + p1CB);
        Log.d("Partnership","setNewBatsman 1, player2ID: "+player2ID);
        Log.d("Partnership","setNewBatsman 1, ps2ID : " + ps2ID);
        Log.d("Partnership","setNewBatsman 1, p2CR : " + p2CR);
        Log.d("Partnership","setNewBatsman 1, p2CB : " + p2CB);
        Log.d("Partnership","setNewBatsman 21 , : "+newPartnership);
        Log.d("Partnership","setNewBatsman 21, bow : " + bow);
        Log.d("Partnership","setNewBatsman 21, bowlerID : " + bowlerID);
        Log.d("Partnership","setNewBatsman 21, preBowlerID : " + preBowlerID);
        Log.d("Partnership","setNewBatsman 21, lastBowler : " + lastBowler);

        if (bow)
            selectBowlerAlertDialog();

    }



    void setOut(String nextStriker, int id, int type){

//        setFOW(id, false);

//        int id = realm.where(Player.class).
//                equalTo("matchid", matchid).
//                equalTo("team", battingTeamNo).
//                equalTo("playerName", nextStriker).findFirst().getPlayerID();

        Log.e("Scoring", "setOut, nextStriker : "+nextStriker);

//        udisplay = modified;

//        outType = 12;
        Log.d("so_inninngs1Runs","setOUT19 , : "+so_inninngs1Runs);
        Log.e("Scoring", "setOut, ballType : "+type);
        Log.d("DISPLAY", "14 modified = " + modified);
        Log.d("DISPLAY", "14 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket, ball,
                0, preInningsRuns, remainingRuns, remainingBalls, remainingOver, leadingRuns,
                innings1Runs, innings2Runs, innings3Runs, innings4Runs,  battingTeamNo, fieldingTeamNo,
                player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0,
                type, bCount, -1, 0, 12, id, null, 0,
                disNewBatsmanBattingOrder, -1, 0, 0,
                false, 0, commentary, 0, mo, maiden, modified, udisplay, tco,
                0, sessionType, sessionID, endOfDay, SUPER_OVER, so_inninngs1Runs,
                so_inninngs2Runs, false, freeHit, false, inning_started,
                0, 0, 0, null, pre_out, callBowlerAlert,
                wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag, tea_flag,
                dinner_flag);

        ++wicket;

        syncBatsmann(id, 0, null, true, 12, false,
                false, false);
        setFOW(id, false);

//        changeBatsman();


    }



    void checkRetired(String nextStriker, boolean out, int dismissedPlayerID, boolean bow){

        int i = 0;

        Log.e ("Scoring", "checkRetired at beginning, retiredList : "+retiredList);
        Log.e ("Scoring", "checkRetired at beginning, dismissedList : "+dismissedList);


        if (!nextStriker.matches("")) {

            if (retiredList.size() > 0) {

                int id = realm.where(Player.class).
                        equalTo("matchid", matchid).
                        equalTo("team", battingTeamNo).
                        equalTo("playerName", nextStriker).findFirst().getPlayerID();

                Batsman batsman = realm.where(Batsman.class).
                        equalTo("matchid", matchid).
                        equalTo("team", battingTeamNo).
                        equalTo("innings", currentInnings).
                        equalTo("batsman_pID", id).
                        equalTo("outType", 10).findFirst();

                Log.e("Scoring", "checkRetired at beginning, flag : " + flag);

                if (batsman != null) {

                    if (batsman.isRetired()) {

//                    continueBatting = callAlert(nextStriker, id);

//                    callAlert(nextStriker, id);
                        callretiredAlert(nextStriker, id, dismissedPlayerID, bow/*, batsman*/);

                    } else {
//                    continueBatting = true;
                        bats = nextStriker;
//                    tv_nextStriker.setText(nextStriker);

                    }
                }
            }


            else {
//                continueBatting = true;
                bats = nextStriker;
//                tv_nextStriker.setText(nextStriker);
            }

        }

        else
            Log.e("Scoring", "checkRetired, selected next striker is : "+nextStriker);

        Log.e("Scoring", "checkRetired at last,, playerSelected : "+playerSelected);
        Log.e ("Scoring", "checkRetired at last, retiredList : "+retiredList);
        Log.e ("Scoring", "checkRetired at last, dismissedList : "+dismissedList);

        Log.e ("Scoring", "checkRetired at last, flag : "+flag);
        Log.e ("Scoring", "checkRetired at last, continueBatting : "+continueBatting);

//        return continueBatting;
    }





    void  callretiredAlert(String nextStriker, int id, int dismissedPlayerID, boolean bow/*, Batsman batsman*/) {

        retiredAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        retiredAlert.setIcon(R.drawable.ball);
        retiredAlert.setCancelable(false);
        retiredAlert.setTitle("Retired Hurt player");
        retiredAlert.setButton(AlertDialog.BUTTON_POSITIVE, "CONTINUE BATTING",
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        bats = nextStriker;
//                       tv_nextStriker.setText(nextStriker);
                    }
                });

        retiredAlert.setButton(AlertDialog.BUTTON_NEGATIVE, "RETIRED OUT",
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        Log.e("Scoring",
                                "callAlert , Retired Out, playerSelected : " + playerSelected);
                        Toast.makeText(getApplicationContext(),
                                " Retires Out , playerSelected : " + playerSelected,
                                Toast.LENGTH_SHORT).show();

                        confirmAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
                        confirmAlert.setIcon(R.drawable.ball);
                        confirmAlert.setCancelable(false);
                        confirmAlert.setTitle(nextStriker + " is selected as OUT");
                        confirmAlert.setButton(AlertDialog.BUTTON_POSITIVE, "CONFIRM",
                                new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int which) {
                                        setOut(nextStriker, id, 3);
                                    }
                                });

                        confirmAlert.setButton(AlertDialog.BUTTON_NEUTRAL, "CANCEL",
                                new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {

//                                        bats = nextStriker;
                                        callretiredAlert(nextStriker, id, dismissedPlayerID, bow/*, batsman*/);
//                                                    tv_nextStriker.setText(nextStriker);
                                    }
                                });

                        confirmAlert.show();


                    }
                });

        Log.e("Scoring", "callAlert at last, retiredAlert : " + retiredAlert);

        retiredAlert.setButton(AlertDialog.BUTTON_NEUTRAL, "CANCEL",
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                                    /*bats = nextStriker;
//                                    tv_nextStriker.setText(nextStriker);*/
                        dialog.dismiss();
                        bats = "";
                        Log.d("CHANGEBATSMAN", "callretiredAlert, Cancel");

                        changeBatsman(dismissedPlayerID, null, false, bow);

                    }
                });

        retiredAlert.show();
    }




    // replace the existing batsman with newly selected player
    void replaceBatsman(Events events, boolean bow){

        Log.e("Scoring", "replaceBatsman()");

//        final ArrayAdapter<String> batsmanAdapter = new ArrayAdapter<String>(ScoringActivity.this,
//                android.R.layout.select_dialog_singlechoice);
//        batsmanAdapter.add(player1);
//        batsmanAdapter.add(player2);

        String[] batsmans = {player1, player2};
        Log.e("Scoring", "replaceBatsman, batsmans : "+batsmans);

        replaceBatsmanBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        replaceBatsmanBuilder.setIcon(R.drawable.ball);
        replaceBatsmanBuilder.setCancelable(false);
        replaceBatsmanBuilder.setTitle("Select Batsman to Replace ");
        replaceBatsmanBuilder.setSingleChoiceItems(batsmans, checkedItem,
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        final String s = Arrays.asList(batsmans).get(which);
                        replacedPlayer = s;
                    }
                });

        replaceBatsmanBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                dialog.dismiss();

                Log.e("Scoring", "replaceBatsman, replacedPlayer : " + replacedPlayer);

                Log.e("Scoring", "replaceBatsman, ok, replacedPlayer : " + replacedPlayer);

//                replacedPlayer = batsmanAdapter.getItem(which);

                confirmReplace(replacedPlayer, bow);


//                Toast.makeText(getApplicationContext(),"selected Player : "+dismissedPlayer, Toast.LENGTH_SHORT).show();
            }

        });
        replaceBatsmanBuilder.setNeutralButton("Cancel", new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
//                changeBatsman(-1);
                /* Commented on 31/08/2021
                // Added on 30/08/2021
                if (UNDO)
                    changeBatsmanUndoAlert(events,"If you are looking for change batsman, \npress CHANGE BATSMAN else NO");*/
            }
        });

        replaceBatsmanBuilder.show();
//        AlertDialog alert = replaceBatsmanBuilder.create();
//        alert.show();



    }



    void confirmReplace(String replacedPlayer, boolean bow) {

        AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
        builderInner.setIcon(R.drawable.ball);
        builderInner.setCancelable(false);
        builderInner.setTitle(replacedPlayer + " will be replaced");
//                    Log.e("Scoring", "changeBatsman, batsmanBuilder, builderInner");

        builderInner.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                dialog.dismiss();
//                selectNewBatsman(replacedPlayer);
                Log.d("CHANGEBATSMAN", "confirmReplace, Ok");

                changeBatsman(-1, replacedPlayer, false, bow);
            }

        });

        builderInner.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                replaceBatsman(new Events(), bow);
            }
        });
//
        builderInner.show();
    }





    void selectNewBatsman(String replacedPlayer) {


    }



/*
    void resetTable(int replacedId, int newId){



        Realm realm = null;
        try {
//            Toast.makeText(getApplicationContext(), "Inside savePlayerDetails", Toast.LENGTH_SHORT).show();
             config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {

                    try {

                        Batsman batsmanr = bgRealm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("batsman_pID", replacedId).findFirst();

                        Batsman batsmann = bgRealm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("batsman_pID", newId).findFirst();

                        Batsman temp = batsmanr;
                        if (batsmanr != null && temp != null){


                            int positionr = batsmanr.getBattingOrder();
                           */
/* batsmanr.setBatsman_pID(batsmann.getBatsman_pID());
                            batsmanr.setBatsmanID(batsmann.getBatsmanID());
                            batsmanr.setSyncstatus(batsmann.getSyncstatus());
                            batsmanr.setBatsmanID(batsmann.getBatsmanID());*//*

                            batsmanr.setBattingOrder(0);
                            bgRealm.copyToRealm(batsmanr);


                            */
/*batsmann.setBatsman_pID(temp.getBatsman_pID());
                            batsmann.setBatsmanID(temp.getBatsmanID());
                            batsmann.setSyncstatus(temp.getSyncstatus());*//*

                            batsmann.setBattingOrder(positionr);
                            bgRealm.copyToRealm(batsmann);

                        }
                    }
                    catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }
        catch (RealmException e){
            Toast.makeText(getApplicationContext(), "Exception : "+ e, Toast.LENGTH_SHORT).show();
        }
        finally {

            if (realm != null) {
                realm.close();
            }
        }



    }
*/




//                j++;
//                dismissedList.add(dismissedPlayer);
//                Log.d("Test" , "dismissedList ; "+dismissedList[j]);

//                nextStriker();


    // to save each event

    public void newEvent(int matchid, String matchID,
                         int innings, int totalRuns, float over, int balls, int wicket, int currentOverBalls, int temp_balls,
                         int preInningsRuns, int remainingRuns, int remainingBalls, float remainingOver, int leadingRuns,
                         int innings1Runs, int innings2Runs, int innings3Runs, int innings4Runs,
                         int battingTeamNo, int fieldingTeamNo,
                         int player1ID, int player2ID,
                         int strikerID, int nonStrikerID, int bowllerID, int preBowlerID, int lastPreBowlerID,
                         int run, int balType, int bCount, int extraType, int extraRun,
                         int outType, int dismissedPlayerID, String fielderID,
                         int newBatsmanID, int newBatsmanBattingOrder,
                         int penaltyType, int penaltyRun, int penaltyTeam, boolean ballCount, int penaltyBallCounted,
                         String com, int newBowlerID, int mo, boolean maidenOver, String currentOver, String undoDisplay,
                         float tco,
                         int intervalId, String sessionType, int sessionId,
                         boolean endOfDay, boolean super_over, int so_innings1Runs, int so_innings2Runs,
                         boolean declared, boolean freeHit, boolean newPartnerships, boolean innings_start,
                         int substitutionID, float reducedOver, int revisedTarget, String appliedRainRule,
                         boolean pre_out, boolean callBowlerAlert,
                         int wicketkeeperID, int wicketkeeperPosition, int preWicketkeeperID, int preWicketkeeperPosition,
                         boolean forfeit, int forfeit_team, int forfeit_innings,
                         boolean concede, int conceded_team, int forceEndingType,
                         int lunch_flag, int tea_flag, int dinner_flag){

        Log.e("scoring", "newEvent, before, noBall : "+noBall);
        Log.e("scoring", "newEvent, before, runsOffBatNB : "+runsOffBatNB);
        Log.e("scoring", "newEvent, before, runsOffBat : "+runsOffBat);

        Log.d("checkFreeHit","newEvent 1, : "+checkFreeHit);
        Log.d("freeHit","newEvent 1, : "+freeHit);


//        strID = 0;
//        nstrID = 0;
//        bwlrID = 0;
//        disID = 0;
//        nbtsmnID= 0;
//        fID = 0;
//        eventId++;

//        displayProgress();

        if (substitutionID == 0) {
            just_started = false;
            if (status.matches("start")) {
                status = "resume";
                updateMatch(matchid, false);
            }
        }

        Realm realm = null;
        try {
//            Toast.makeText(getApplicationContext(), "Inside savePlayerDetails", Toast.LENGTH_SHORT).show();
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {


                    try {

                        Number num = bgRealm.where(Events.class).max("eventID");
                        eventID = (num == null) ? 1 : num.intValue() + 1;

                        Events events = bgRealm.createObject(Events.class, eventID);
                        Log.d("eventId", " newEvent, eventId : "+eventID);
                        Log.d("newEvent", " after, eventId : "+eventID);

                        Log.d("DISPLAY", "23 modified = " + modified);
                        Log.d("DISPLAY", "23 udisplay = " + udisplay);

//                        Events events = new Events();
//                        Log.d("Test", "event : "+events);
//                        events.setEventId(eventId);
//                        Log.d("Test", "event id : "+eventId);
                        events.setMatchid(matchid);
                        events.setMatchID(matchID);
                        events.setInnings(innings);           // current innings
                        events.setTotalRuns(totalRuns);         // current total runs
                        events.setOvers(Float.parseFloat(
                                new DecimalFormat("###.#").format(over))); // current playing run
                        events.setBalls(balls);                  // current total balls played
                        events.setWicket(wicket);               // current wicketas playing

                        events.setTemp_balls(temp_balls);
                        events.setCurrentOverBalls(currentOverBalls);
                        events.setPreInningsRuns(preInningsRuns);
                        events.setLeadingRuns(leadingRuns);
                        events.setRemainingRuns(remainingRuns);
                        events.setRemainingBalls(remainingBalls);
                        events.setRemainingOvers(remainingOver);
                        events.setBattingTeamNo(battingTeamNo);
                        events.setFieldingTeamNo(fieldingTeamNo);

                        events.setInnings1Runs(innings1Runs);
                        events.setInnings2Runs(innings2Runs);
                        events.setInnings3Runs(innings3Runs);
                        events.setInnings4Runs(innings4Runs);

                        events.setPlayer1ID(player1ID);
                        events.setPlayer2ID(player2ID);

                        events.setBall_count(bCount);

                        //commented on 14/05/2020
                        /*events.setStrikerID(strikerID);
                        events.setStrikerRuns(strikerRuns);
                        events.setStrikerBalls(strikerBalls);*/

                        /*events.setNonStrikerID(nonStrikerID);
                        events.setNonStrikerRuns(nonStrikerRuns);
                        events.setNonStrikerBalls(nonStrikerBalls);*/

                        /*events.setBowlerID(bowllerID);
                        events.setBowlerRuns(bowlerRuns);
                        events.setBowlerOver(bowlerOver);
                        events.setBowlerBalls(bowlerBalls);
                        events.setBowlerWicket(bowlerWicket);*/

//                        if (nextBowlerID != 0)
//                            events.setNextBowlerID(nextBowlerID);

                        /*if (preBowlerID != 0) {

                            events.setPrevBowlerID(preBowlerID);
                            events.setPreBowlerRuns(preBowlerRuns);
                            events.setPreBowlerBalls(preBowlerBalls);
                            events.setPreBowlerOver(preBowlerOver);
                            events.setPreBowlerWicket(preBowlerWicket);
                        }*/                                                     // till here


                        if (lastPreBowlerID != 0)
                            events.setLastPreBowlerID(lastPreBowlerID);

                        events.setCurrentRun(run);
                        events.setBallType(balType);

                        events.setExtraType(extraType);
                        events.setExtraRuns(extraRun);

                        events.setOutType(outType);
                        events.setDismissedPlayerID(dismissedPlayerID);
                        // Added on 13/11/2021
                        if (dismissedPlayerID != 0) {
                            Player pd = bgRealm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", battingTeamNo).
                                    equalTo("playerID", dismissedPlayerID).findFirst();

                            if (pd != null)
                                events.setDismissedPlayerD4SID(pd.getD4s_playerid());
                        }
                        // === till here
                        events.setFielderID(fielderID);
                        events.setDisNewBatsmanID(newBatsmanID);
                        // Added on 13/11/2021
                        if (newBatsmanID != 0) {
                            Player pnb = bgRealm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", battingTeamNo).
                                    equalTo("playerID", newBatsmanID).findFirst();

                            if (pnb != null)
                                events.setDisNewBatsmanD4SID(pnb.getD4s_playerid());
                        }
                        // === till here

                        events.setPenaltyType(penaltyType);
                        events.setPenaltyRuns(penaltyRun);
                        events.setPenaltyRunTeam(penaltyTeam);
                        events.setPenaltyBallCount(ballCount);
                        events.setPenaltyBallCounted(penaltyBallCounted);
                        events.setCommentary(com);

                        events.setNewBowlerID(newBowlerID);
                        // Added on 13/11/2021
                        if (newBowlerID != 0) {
                            Player pnbw = bgRealm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", fieldingTeamNo).
                                    equalTo("playerID", newBowlerID).findFirst();

                            if (pnbw != null)
                                events.setNewBowlerD4SID(pnbw.getD4s_playerid());
                        }
                        // === till here
                        events.setMo(mo);
                        events.setMaidenOver(maidenOver);
                        events.setCurrentOver(currentOver);
                        events.setUndoDisplay(undoDisplay);

                        events.setTco(tco);
//                        events.setTbo(tbo);
//                        events.setTpbo(tpbo);

                        events.setIntervalId(intervalId);
                        events.setSession(sessionType);
                        events.setSessionId(sessionId);

//                        events.setPostArray(String.valueOf(postArray));
//                        events.setUndoArray(String.valueOf(undoArray));

                        events.setEndOfDay(endOfDay);

                        events.setSUPER_OVER(super_over);
                        if (super_over) {
                            events.setSuper_over_innings1runs(so_innings1Runs);
                            events.setSuper_over_innings2runs(so_innings2Runs);
                        }

                        if (totalInnings == 4)
                            events.setDeclared(declared);

                        events.setFreeHit(freeHit);
                        events.setNewPartnership(newPartnerships);
                        events.setInning_started(innings_start);

                        events.setSubstitutionID(substitutionID);
                        events.setReducedOver(reducedOver);
                        events.setRevisedTarget(revisedTarget);
                        events.setAppliedRainRule(appliedRainRule);

                        events.setPre_out(pre_out);
                        events.setCallBowlerAlert(callBowlerAlert);

                        // ================== added on 14/05/2020 =====================

                        // striker details
                        events.setStrikerID(strikerID);
                        // Added on 13/11/2021
                        Player ps = bgRealm.where(Player.class).
                                equalTo("matchid", matchid).
                                equalTo("team", battingTeamNo).
                                equalTo("playerID", strikerID).findFirst();

                        if (ps != null)
                            events.setStrikerD4SID(ps.getD4s_playerid());
                        // === till here

                        Batsman bat = bgRealm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", innings).
                                equalTo("team", battingTeamNo).
                                equalTo("batsman_pID", strikerID).findFirst();
                        if (bat != null) {
                            events.setStrikerRuns(bat.getRuns());
                            events.setStrikerBalls(bat.getBalls());
                            events.setStrikerBattingOrder(bat.getBattingOrder());
                            events.setStrikerDots(bat.getDots());
                            events.setStrikerF4s(bat.getF4s());
                            events.setStrikerS6s(bat.getS6s());
                            events.setStrikerOutType(bat.getOutType()); // Added on 10/09/2021 to correct the display
                        }

                        //nonstriker details
                        events.setNonStrikerID(nonStrikerID);
                        // Added on 13/11/2021
                        Player pns = bgRealm.where(Player.class).
                                equalTo("matchid", matchid).
                                equalTo("team", battingTeamNo).
                                equalTo("playerID", nonStrikerID).findFirst();

                        if (pns != null)
                            events.setNonStrikerD4SID(pns.getD4s_playerid());
                        // === till here
                        bat = bgRealm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", innings).
                                equalTo("team", battingTeamNo).
                                equalTo("batsman_pID", nonStrikerID).findFirst();
                        if (bat != null) {
                            events.setNonStrikerRuns(bat.getRuns());
                            events.setNonStrikerBalls(bat.getBalls());
                            events.setNonStrikerBattingOrder(bat.getBattingOrder());
                            events.setNonStrikerDots(bat.getDots());
                            events.setNonStrikerF4s(bat.getF4s());
                            events.setNonStrikerS6s(bat.getS6s());
                            events.setNonStrikerOutType(bat.getOutType());   // Added on 10/09/2021 to correct the display
                        }

                        // bowler details
                        events.setBowlerID(bowllerID);
                        // Added on 13/11/2021
                        Player pb = bgRealm.where(Player.class).
                                equalTo("matchid", matchid).
                                equalTo("team", fieldingTeamNo).
                                equalTo("playerID", bowllerID).findFirst();

                        if (pb != null)
                            events.setBowlerD4SID(pb.getD4s_playerid());
                        // === till here
                        Bowler bows = bgRealm.where(Bowler.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", innings).
                                equalTo("team", fieldingTeamNo).
                                equalTo("playerID", bowllerID).findFirst();
                        if (bows != null) {
                            Log.d("HUNDRED", "newEvent 1, bows = " + bows);

                            events.setBowlerRuns(bows.getRuns());
                            events.setBowlerOver(bows.getOver());
                            events.setBowlerBalls(bows.getBalls());
                            events.setBowlerTotalBalls(bows.getTotalBalls());   // Added on 26/07/2021
                            events.setBowlerWicket(bows.getWicket());
                            events.setBowlerDots(bows.getDots());
                            events.setBowlerMO(bows.getMaidenOver());
                            events.setBowlerWides(bows.getWides());
                            events.setBowlerNoball(bows.getNoBalls());
                        }

                        // pre bowler details
                        if (preBowlerID != 0) {
                            events.setPrevBowlerID(preBowlerID);
                            // Added on 13/11/2021
                            Player ppb = bgRealm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", fieldingTeamNo).
                                    equalTo("playerID", preBowlerID).findFirst();

                            if (ppb != null)
                                events.setPrevBowlerD4SID(ppb.getD4s_playerid());
                            // === till here
                            bows = bgRealm.where(Bowler.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", innings).
                                    equalTo("team", fieldingTeamNo).
                                    equalTo("playerID", preBowlerID).findFirst();
                            if (bows != null) {
                                Log.d("HUNDRED", "newEvent 1, pbows = " + bows);

                                events.setPreBowlerRuns(bows.getRuns());
                                events.setPreBowlerBalls(bows.getBalls());
                                events.setPreBowlerTotalBalls(bows.getTotalBalls());    // Added on 26/07/2021
                                events.setPreBowlerOver(bows.getOver());
                                events.setPreBowlerWicket(bows.getWicket());
                                events.setPreBowlerDots(bows.getDots());
                                events.setPreBowlerMO(bows.getMaidenOver());
                                events.setPreBowlerWides(bows.getWides());
                                events.setPreBowlerNoball(bows.getNoBalls());
                            }
                        }


                        // set extras details
                        ExtraCard extraCard = bgRealm.where(ExtraCard.class).
                                equalTo("matchid", matchid).
                                equalTo("innings",innings).findFirst();
                        if (extraCard != null){

                            events.setExtraBye(extraCard.getByes());
                            events.setExtraLb(extraCard.getLb());
                            events.setExtraWd(extraCard.getWide());
                            events.setExtraNb(extraCard.getNoBall());
                            events.setExtraP(extraCard.getPenalty());
                        }


                        //partnership details
                        int wk = 0;
                        if (balType == 3 && outType != 10)
                            wk = wicket;
                        else
                            wk = wicket + 1;

                        RealmResults<Partnership> results = bgRealm.where(Partnership.class).
                                equalTo("matchid", events.getMatchid()).//matchid).
                                        equalTo("innings", events.getInnings()).//currentInnings).
                                /*equalTo("wicket", wk).*/findAll();

                        if (results.isEmpty()) {
                            /*events.setP_wicket_no(wicket + 1);
                            if (strikerID > 0)
                                events.setP_p1Id(strikerID);
                            else if (nonStrikerID > 0)
                                events.setP_p1Id(nonStrikerID);
                            events.setP_p2Id(1);*/

                            events.setP_wicket_no(wk);
                            events.setP_sequence_no(1);
                            events.setP_disId(0);
                            events.setP_broken(true);

                            /*jsonFOW.put("wicketno", wk);
                            jsonFOW.put("partnershipsequence", 1);
                            jsonFOW.put("partnershipruns", 0);
                            jsonFOW.put("partnershipballs", 0);
                            jsonFOW.put("partnershipover", Float.parseFloat(
                                    new DecimalFormat("###.#").format(0)));
                            jsonFOW.put("player1id", 0);
                            jsonFOW.put("player2id", 0);
                            jsonFOW.put("dismissedplayerid", -1);
                            jsonFOW.put("player1contributedruns", 0);
                            jsonFOW.put("player1contributedballs", 0);
                            jsonFOW.put("player2contributedruns", 0);
                            jsonFOW.put("player2contributedballs", 0);
                            jsonFOW.put("partnershipbroken", "yes");*/
                        }
                        else {
                            Partnership partnership = results.last();
                            if (partnership != null &&
                                    ((partnership.getPlayer1ID() > 0) && (partnership.getPlayer2ID() > 0))) {
                                // Added on 13/11/2021
                                Player pp1 = bgRealm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", battingTeamNo).
                                        equalTo("playerID", partnership.getPlayer1ID()).findFirst();

                                if (pp1 != null)
                                    events.setP_p1D4SID(pp1.getD4s_playerid());

                                pp1 = bgRealm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", battingTeamNo).
                                        equalTo("playerID", partnership.getPlayer2ID()).findFirst();

                                if (pp1 != null)
                                    events.setP_p2D4SID(pp1.getD4s_playerid());

                                pp1 = bgRealm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", battingTeamNo).
                                        equalTo("playerID", partnership.getDismissedPlayerID()).findFirst();

                                if (pp1 != null)
                                    events.setP_disD4SID(pp1.getD4s_playerid());
                                // === till here
                                events.setP_wicket_no(partnership.getWicket());
                                events.setP_sequence_no(partnership.getPartnershipSequence());
                                events.setP_run(partnership.getPartnershipRuns());
                                events.setP_ball(partnership.getPartnershipBalls());
                                events.setP_over(partnership.getPartnershipOver());
                                events.setP_p1Id(partnership.getPlayer1ID());
                                events.setP_p2Id(partnership.getPlayer2ID());
                                events.setP_disId(partnership.getDismissedPlayerID());
                                events.setP_p1cr(partnership.getPlayer1ContributionRuns());
                                events.setP_p1cb(partnership.getPlayer1ContributionBalls());
                                events.setP_p2cr(partnership.getPlayer2ContributionRuns());
                                events.setP_p2cb(partnership.getPlayer2ContributionBalls());

                                if (balType != 3) {
                                    events.setP_broken(false);
                                } else {
                                    if (outType == 10)
                                        events.setP_broken(false);
                                    else //if (outType != 10)
                                        events.setP_broken(true);
                                }
                            }

                            else {

                                Partnership partnership1  = bgRealm.where(Partnership.class).
                                        equalTo("matchid", events.getMatchid()).//matchid).
                                                equalTo("innings", events.getInnings()).//currentInnings).
                                                equalTo("wicket", wicket).findAll().last();

                                // Added on 13/11/2021
                                Player pp1 = bgRealm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", battingTeamNo).
                                        equalTo("playerID", partnership1.getPlayer1ID()).findFirst();

                                if (pp1 != null)
                                    events.setP_p1D4SID(pp1.getD4s_playerid());

                                pp1 = bgRealm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", battingTeamNo).
                                        equalTo("playerID", partnership1.getPlayer2ID()).findFirst();

                                if (pp1 != null)
                                    events.setP_p2D4SID(pp1.getD4s_playerid());

                                pp1 = bgRealm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", battingTeamNo).
                                        equalTo("playerID", partnership1.getDismissedPlayerID()).findFirst();

                                if (pp1 != null)
                                    events.setP_disD4SID(pp1.getD4s_playerid());
                                // === till here

                                events.setP_wicket_no(partnership1.getWicket());
                                events.setP_sequence_no(partnership1.getPartnershipSequence());
                                events.setP_run(partnership1.getPartnershipRuns());
                                events.setP_ball(partnership1.getPartnershipBalls());
                                events.setP_over(partnership1.getPartnershipOver());
                                events.setP_p1Id(partnership1.getPlayer1ID());
                                events.setP_p2Id(partnership1.getPlayer2ID());
                                events.setP_disId(partnership1.getDismissedPlayerID());
                                events.setP_p1cr(partnership1.getPlayer1ContributionRuns());
                                events.setP_p1cb(partnership1.getPlayer1ContributionBalls());
                                events.setP_p2cr(partnership1.getPlayer2ContributionRuns());
                                events.setP_p2cb(partnership1.getPlayer2ContributionBalls());

                                if (balType != 3) {
                                    events.setP_broken(false);
                                } else {
                                    if (outType == 10)
                                        events.setP_broken(false);
                                    else //if (outType != 10)
                                        events.setP_broken(true);
                                }
                            }
                        }

                        // ADDED ON 27/02/2021 -------------(1)
                        events.setWkID(wicketkeeperID);
                        // Added on 13/11/2021
                        if (wicketkeeperID > 0) {
                            Player pw = bgRealm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", battingTeamNo).
                                    equalTo("playerID", wicketkeeperID).findFirst();

                            if (pw != null)
                                events.setWkD4SID(pw.getD4s_playerid());
                        }
                        // === till here

                        events.setWk_position(wicketkeeperPosition);
                        events.setPreWkID(preWicketkeeperID);
                        events.setPreWk_position(preWicketkeeperPosition);

                        // ========== till here ------------(1)

                        // Added on 02/03/2021 ------------------(2)

                        events.setForfeit(forfeit);
                        events.setForfeit_team(forfeit_team);
                        events.setForfeit_innings(forfeit_innings);
                        events.setCONCEDE(concede);
                        events.setConceded_team(conceded_team);
                        events.setForceEndingType(forceEndingType);
//                        events.setConceded_innings(conceded_innings);

                        // Added on 28/04/2021 (3)
                        events.setLunch_flag(lunch_flag);
                        events.setTea_flag(tea_flag);
                        events.setDinner_flag(dinner_flag);
                        // === till here (3)

                        // ========== till here ------------(2)

                        // ======================== till here =========================

                        // Added on 28/08/2021
//                        events.setDismissedPlayerBattingOrder(dismissedPlayerBattingOrder);
                        events.setDisNewBatsmanBattingOrder(newBatsmanBattingOrder);
                        // till here

                        bgRealm.copyToRealm(events);

                        commentary = "";    // Added on 02/12/2021

                        Log.d("Scoring", "newEvents, events : "+events);

                        displayEventID();   // Added on 24/11/2021

                        if (inning_started)
                            inning_started = false;

                        if (ballType == 7 && newPartnership)
                            newPartnership = false;

                        Log.d("internet", "newEvents 1, isNetworkAvailable() : "+isNetworkAvailable());

                        if (isNetworkAvailable()) {// && balType != 15) {

                            Log.d("jsonEventArray", "newEvents 1, : "+jsonEventArray);
                            Log.d("wheel", "newEvents 1, : "+wheel);

                            if (wheel)
                                Log.d("newEvent", "wheel : " + wheel);
                            else if (substitution)
                                Log.d("newEvent", "substitution : " + substitution);
                            else if (power)
                                Log.d("newEvent", "power : " + power);
                            else {
//                                post(5);  commented on 25/11/2021
                            }

                            Log.d("jsonEventArray", "newEvents 2, : "+jsonEventArray);

                        }
                        Log.d("scoring", "newEvent : "+events);
                    }
                    catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }
        catch (RealmException e){
            Toast.makeText(getApplicationContext(), "Exception : "+ e, Toast.LENGTH_SHORT).show();
        }
        finally {

            if (realm != null) {
                realm.close();
            }
        }

        if (balType != -1)
            post(5);    // Added here on 25/11/2021

//        serverSync(); // Commented on 13/11/2021

//        progress.dismiss();


//        ballType = -1;


    }





/*    // to store the match details in the server

    private void  matchJSONPost(){

        Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
        int mstatus = match.getMatchSync();
        JSONObject jsonMatch = new JSONObject();
        if (mstatus == 0){


            try {
                jsonMatch.put("matchID", matchID);
                jsonMatch.put("teamA", match.getTeamA());
                jsonMatch.put("teamB", match.getTeamB());
                jsonMatch.put("venue", match.getVenue());
                jsonMatch.put("end1", match.getEnd1());
                jsonMatch.put("end2", match.getEnd2());
                jsonMatch.put("event", match.getEvent());
                jsonMatch.put("phase", match.getPhase());
                jsonMatch.put("match_type", match.getMatchType());
                jsonMatch.put("innings", match.getInnings());
                jsonMatch.put("players", match.getPlayer());
                jsonMatch.put("substitute_players", match.getSubst());
                jsonMatch.put("over", match.getOver());
                jsonMatch.put("balls_per_over", match.getBalls());
                jsonMatch.put("wide_value", match.getWiderun());
                jsonMatch.put("noball_value", match.getNoballrun());
                jsonMatch.put("penalty_value", match.getPenaltyrun());
                jsonMatch.put("umpire1", match.getUmpire1());
                jsonMatch.put("umprire2", match.getUmpire2());
                jsonMatch.put("umpire3", match.getUmpire3());
                jsonMatch.put("umpire4", match.getUmpire4());
                jsonMatch.put("scorer", match.getScorer());
                jsonMatch.put("match_referee", match.getMatchReferee());
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        else
            Log.d("Scoring", "runOnce, status : "+status);


        JSONArray jsonArray = new JSONArray();
        jsonArray.put(jsonMatch);



        JSONObject jsonPlayerA = new JSONObject();
        String captain = null, wk = null;

        RealmResults<Player> results = realm.where(Player.class).equalTo("matchid", matchid).
                equalTo("team", 1).findAll();

        for (Player player : results) {
            if (player.isCaptain())
                captain = player.getPlayerName();
            if (player.isWicketKeeper())
                wk = player.getPlayerName();
            jsonPlayerA = new JSONObject();
            try {
                jsonPlayerA.put("name", player.getPlayerName());
            }
            catch (JSONException e) {
                e.printStackTrace();
            }
        }

        JSONArray jsonArrayA = new JSONArray();
        jsonArrayA.put(jsonPlayerA);


        JSONObject jsonA= new JSONObject();
        try {

            jsonA.put("team", match.getTeamA());
            jsonA.put("Players", jsonArrayA);
            jsonA.put("captain", captain);
            jsonA.put("wicketkeeper", wk);
        }
        catch (JSONException e) {
            e.printStackTrace();
        }



        JSONObject jsonPlayerB = new JSONObject();

        results = realm.where(Player.class).equalTo("matchid", matchid).
                equalTo("team", 2).findAll();

        for (Player player : results) {
            if (player.isCaptain())
                captain = player.getPlayerName();
            if (player.isWicketKeeper())
                wk = player.getPlayerName();
            jsonPlayerB = new JSONObject();
            try {
                jsonPlayerB.put("name", player.getPlayerName());
            }
            catch (JSONException e) {
                e.printStackTrace();
            }
        }

        JSONArray jsonArrayB = new JSONArray();
        jsonArrayB.put(jsonPlayerB);


        JSONObject jsonB = new JSONObject();
        try {

            jsonB.put("team", teamB);
            jsonB.put("Players", jsonArrayB);
            jsonB.put("captain", captain);
            jsonB.put("wicketkeeper", wk);
        }
        catch (JSONException e) {
            e.printStackTrace();
        }

        JSONArray jsonArray1 = new JSONArray();
        jsonArray1.put(jsonA);
        jsonArray1.put(jsonB);

        JSONObject jsonMain = new JSONObject();
        try {

            jsonMain.put("user_token", token);
            if (mstatus == 0)
                jsonMain.put("new_match", jsonMatch);
            jsonMain.put("player", jsonArray1);
        }
        catch (JSONException e) {
            e.printStackTrace();
        }

        if (isNetworkAvailable())
            postJSON(jsonMain.toString());
    }*/



    //posting events or BALL BY BALL
    private void postJSON(int matchid, String matchID/*, boolean undo*/) {

        int msync = 0, psync = 0, tsync = 0, osync = 0;
        String capA = null, vcA = null, wkA = null, capB = null, vcB = null, wkB = null,
                umpire1_v = "", umpire2_v = "",  umpire3_v = "", umpire4_v = "", match_referee_v = "";
        boolean post = false, player_post = false;

        Match match = realm.where(Match.class).
                equalTo("matchid", matchid).findFirst();
        Log.d("match", "postJSON : " + match);

        if (isNetworkAvailable()) {

            if (match != null) {
                msync = match.getMatchSync();
                // Added on 03/08/2021
                if (msync == 0) {
                    postMatchDetails(matchid);
                    /*RealmResults<MatchOfficials> result_officials = realm.where(MatchOfficials.class).
                            equalTo("matchid", matchid).
                            equalTo("d4s_id", 0).
                            equalTo("sync", 0).findAll();
                    if (result_officials.size() > 0) {
                        postOfficialDetails();
                        postAdd();
                    }*/
                }
                psync = match.getPlayerSync();
                tsync = match.getTossSync();
                osync = match.getOpenerSync();
                post = match.isPost();
                player_post = match.isPlayer_post();
            }



            /*// added on 19/10/2020
            JSONObject jsonToss = new JSONObject();
            try {
                jsonToss.put("matchID", matchID);
                if (match.isNoToss() || match.isUnknownToss()) {
                    jsonToss.put("winner", -1);
                    jsonToss.put("decision", decision);
                    jsonToss.put("battingteam", tossWinner);
                }
                else  {
                    jsonToss.put("winner", tossWinner);
                    jsonToss.put("decision", decision);
                    jsonToss.put("battingteam", 0);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }


            JSONArray arrayToss = new JSONArray();
            arrayToss.put(jsonToss);*/

            JSONObject jsonball = new JSONObject();
            try {
                Log.d("jsonEventArray", "postJSON : " + jsonEventArray);
                jsonball.put("ball", jsonEventArray);

            } catch (JSONException e) {
                e.printStackTrace();
            }

            // ======== added  on 04/07/2020
           /* JSONObject jsonball2 = new JSONObject();
            try {
                jsonball2.put("ball", jsonUndoArray);

            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject jsonbbb2 = new JSONObject();
            try {
                jsonbbb2.put("ballbyball", jsonball2);
            } catch (JSONException e) {
                e.printStackTrace();
            }*/
            // ======== till here


            JSONObject jsonbbb = new JSONObject();
            try {
                jsonbbb.put("ballbyball", jsonball);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject jsonmatchid = new JSONObject();
            try {
                jsonmatchid.put("matchID", matchID);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            // ======== added  on 04/07/2020
//            JSONArray arrayAddBBB2 = new JSONArray();
//            arrayAddBBB2.put(jsonmatchid);
//            arrayAddBBB2.put(jsonbbb2);
            // ========= till here

            JSONArray arrayAddBBB = new JSONArray();
            arrayAddBBB.put(jsonmatchid);
            arrayAddBBB.put(jsonbbb);




        /*JSONObject jsonUndo = new JSONObject();
        try {
            jsonUndo.put("matchID", matchID);
            jsonUndo.put("innings", currentInnings);
            jsonUndo.put("undo", jsonUndoArray);
        } catch (JSONException e) {
            e.printStackTrace();
        }*/


            // added on 15/05/2020
            JSONObject jsonObject = new JSONObject();
            try {
                jsonObject.put("matchID", matchID);
//                jsonObject.put("officials", arrayOfficials);
            } catch (JSONException e) {
                e.printStackTrace();
            }


            // adding values into feed
            JSONObject jsonFeed = new JSONObject();
            try {

                /*if (psync == 0) {
                 *//*if (player_post)
                        Log.d("cap", "match : " + match);
                    else //psync == 0)*//*
                        jsonFeed.put("AddPlayers", arrayPlayers);
                    }

                    *//*  else {*//* // commented on 15/05/2020

//                    if (psync == 1) {
                    if (tsync == 0) {
                        jsonFeed.put("AddToss", arrayToss);
                    }*/
//                    }
                //for openers
//            if (osync == 0)
//                jsonFeed.put("AddOpeners", arrayOpener);
//            jsonFeed.put("AddBBB", jsonEventArray);


                /* } else {*/
                //commented on 15/05/2020
                    /*else {
                            if (tsync == 1) {*/

                // commented on 07/07/2020
                               /* if (jsonUndoArray.length() > 0) {

                                    // added & commented  on 27/06/2020
                                    jsonFeed.put("UndoBBB", arrayAddBBB2);

                                    // commented on 04/07/2020
//                                     jsonFeed.put("UndoBBB", jsonUndoArray);//jsonUndo);
                                }*/
//            else
                if (jsonEventArray.length() > 0)
                    jsonFeed.put("AddBBB", arrayAddBBB);

            } catch (JSONException e) {
                e.printStackTrace();
            }
            JSONObject postparams = new JSONObject();
            try {
                postparams.put("title", "CHASE_POST");
                postparams.put("feed", jsonFeed);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                    Constants.CHASE_CRICKET_MATCH_API,
                    postparams,
                    new Response.Listener<JSONObject>() {
                        @Override
                        public void onResponse(JSONObject response) {

                            Log.e("scoring", "response : " + response);

                            try {

                                //if no error in response
                                if ((response.getInt("status") == 200) && !response.getBoolean("error")) {

                                    JSONObject jsonMatch = response.getJSONObject("match");

                                    Realm realm = null;
                                    try {
                                        config = new RealmConfiguration.Builder()
                                                .name(AppConstants.GAME_ID + ".realm")
                                                .deleteRealmIfMigrationNeeded()
                                                .build();
                                        realm = Realm.getInstance(config);
                                        realm.executeTransaction(new Realm.Transaction() {
                                            @Override
                                            public void execute(Realm bgRealm) {

                                                try {

                                                    Match match1 = bgRealm.where(Match.class).
                                                            equalTo("matchID",
                                                                    jsonMatch.getString("app_matchID")).
                                                            findFirst();

                                                    if (match1 != null) {
                                                        match1.setPost(true);

                                                        if (match1.getMatchSync() != 1)
//                                                        int teamA_id = jsonMatch.getInt("team1_id");
//                                                        int teamB_id = jsonMatch.getInt("team2_id");

                                                            match1.setMatchSync(1);
                                                        match1.setPlayer_post(true);

                                                        if (match1.getPlayerSync() != 1) {
                                                            match1.setPlayerSync(1);

                                                            // added on 14/09/2020
                                                            RealmResults<Player> resultsPlayer = bgRealm.where(Player.class).
                                                                    equalTo("matchID", jsonMatch.getString("app_matchID")).
                                                                    findAll();

                                                            for (Player player : resultsPlayer) {

                                                                player.setSync(1);
                                                                bgRealm.copyFromRealm(player);
                                                                Log.e("RESPONSE", "Captain, synced player : " + player.toString());
                                                            }
                                                            //============= till here
                                                        }
                                                        if (match1.getOpenerSync() != 1)
                                                            match1.setOpenerSync(1);
                                                        if (match1.getTossSync() != 1)
                                                            match1.setTossSync(1);

                                                        // Adding team ids
//                                                        match1.setTeamAId(teamA_id);
//                                                        match1.setTeamBId(teamB_id);

//                                                    }
//                                                    else
//                                                        match1.setMatchSync(1);


                                                        Log.d("matchSync", "scoring, match1 synced");

                                                        bgRealm.copyToRealm(match1);
                                                        Log.d("matchSync", "scoring, match1 : " + match1);
                                                    }


                                                    if (response.has("updatedIDs")) {
                                                        JSONArray updatedIDs = response.getJSONArray("updatedIDs");

                                                        if (updatedIDs.length() > 0) {
                                                            for (int i = 0; i < updatedIDs.length(); i++) {
//                                                                Log.d("updatedIDs", " : " + updatedIDs.get(i));
                                                                Integer tempID = (Integer) updatedIDs.get(i);
                                                                Events events1 = bgRealm.where(Events.class).
                                                                        equalTo("eventID", (Integer) updatedIDs.get(i)).
                                                                        findFirst();
                                                                Log.d("Events", "response 1, : " + events1);
                                                                if (events1 != null) {
                                                                    events1.setUndoArray(null);
                                                                    events1.setSyncstatus(1);
                                                                    bgRealm.copyToRealm(events1);
                                                                    Log.d("Events", "after saved events = " + events1);
                                                                }
                                                            }
                                                        }
                                                    }
//                                                    serverSync(); Commented on 13/11/2021
                                                } catch (JSONException e) {
                                                    e.printStackTrace();
                                                } catch (RealmPrimaryKeyConstraintException e) {
                                                    progress.dismiss();
//                                                Toast.makeText(getApplicationContext(),
//                                                        "Primary Key exists, Press Update instead",
//                                                        Toast.LENGTH_SHORT).show();
                                                    Log.e("postJSON", "RealmPrimaryKeyConstraintException : " + e);
                                                }
                                            }
                                        });
                                    } catch (RealmException e) {
                                        Log.d("test", "Exception : " + e);
                                    } finally {
                                        if (realm != null) {
                                            realm.close();
                                        }
                                    }


                                /*Toast.makeText(getApplicationContext(),
                                        response.getString("message"), Toast.LENGTH_SHORT).show();*/

                                    Log.d("post_response", response.getString("message"));

//

                                } else {
                                /*Toast.makeText(getApplicationContext(),
                                        response.getString("message"), Toast.LENGTH_SHORT).show();*/
                                    Log.d("post_response_error", response.getString("message"));
                                }
                            } catch (JSONException e) {

//                                serverSync(); Commented on 13/11/2021
                                e.printStackTrace();
                                Log.d("JSONException", "scoring, " + e);
                            }


                        }

                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
//                            serverSync();   Commented on 13/11/2021
                            Log.e("volley", "Scoring, onErrorResponse  : " + error);

                        }
                    });

            MyApplicationClass.getInstance(getApplicationContext()).addToRequestQueue(jsonObjReq, "postRequest");
            Log.d("scoring", "jsonObjReq  : " + jsonObjReq);
            Log.d("scoring", "postparams  : " + postparams);

        }

    }



    // added on 07/07/2020
    // for posting undo
    private void postUndoJSON() {

        Log.d("postJSON", "called, matchID : " + matchID);
        Log.d("postJSON", "called, jsonUndoArray : " + jsonUndoArray);

        boolean matchSync = false, playerSync = false, tossSync = false;



        int msync = 0, psync = 0, tsync = 0, osync = 0;
        String capA = null, vcA = null, wkA = null, capB = null, vcB = null, wkB = null,
                umpire1_v = "", umpire2_v = "",  umpire3_v = "", umpire4_v = "", match_referee_v = "";
        boolean post = false, player_post = false;

        Match match = realm.where(Match.class).
                equalTo("matchid", matchid).findFirst();
        Log.d("matchid", "postJSON : " + matchid);
        Log.d("match", "postJSON : " + match);

        if (isNetworkAvailable()) {


            JSONObject jsonball2 = new JSONObject();
            try {
                jsonball2.put("ball", jsonUndoArray);

            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject jsonbbb2 = new JSONObject();
            try {
                jsonbbb2.put("ballbyball", jsonball2);
            } catch (JSONException e) {
                e.printStackTrace();
            }


            JSONObject jsonmatchid = new JSONObject();
            try {
                jsonmatchid.put("matchID", matchID);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONArray arrayAddBBB2 = new JSONArray();
            arrayAddBBB2.put(jsonmatchid);
            arrayAddBBB2.put(jsonbbb2);


            // adding values into feed
            JSONObject jsonFeed = new JSONObject();
            try {
                jsonFeed.put("UndoBBB", arrayAddBBB2);
//                    jsonFeed.put("UndoBBB", jsonUndoArray);     //Added on 24/11/2021
//                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
//        Log.e("scoring", "jsonFeed : "+jsonFeed);

            //adding values to postparams
            JSONObject postparams = new JSONObject();
            try {
                postparams.put("title", "CHASE_POST");
                postparams.put("feed", jsonFeed);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            Log.d("jsonUndoArray", "post() 8 , postparams : " + postparams);

//        Log.e("scoring", "postparams : "+postparams);

            JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                    Constants.CHASE_CRICKET_MATCH_UNDO_API,
                    postparams,
                    new Response.Listener<JSONObject>() {
                        @Override
                        public void onResponse(JSONObject response) {


                            Log.e("UndoBBB", "response : " + response);

                            // added on 11/07/2020
                            try {

                                undo_count  = 0;

                                int eventid = response.getInt("eventid");
                                Undo undo1 = realm.where(Undo.class).
                                        equalTo("matchid", matchid).
                                        equalTo("eventID", eventid).
                                        findFirst();
                                Log.e("UndoBBB", "undo1 : " + undo1);

                                if (undo1 != null) {

                                    if (!realm.isInTransaction()) {
                                        realm.beginTransaction();
                                    }

                                    undo1.deleteFromRealm();
                                    realm.commitTransaction();
                                }
                                updateUndo2();
                                post(9);    // Added on 26/11/2021

                                /*// Added on 23/11/2021
                                RealmResults<Undo> results = realm.where(Undo.class).
                                        equalTo("matchid", matchid).
                                        findAll();

                                Log.e("UndoBBB", "results : " + results.toString());*/


                                // === till here
                                /* Commented on 23/11/2021
                                JSONArray array = response.getJSONArray("eventid");
                                Log.e("scoring", "array : " + array);
                                if (array.length() > 0) {

                                    for (int i = 0; i < array.length(); i++) {
                                        Log.d("array", " : " + array.get(i));
                                        Integer tempID = (Integer) array.get(i);
                                        Undo undo1 = realm.where(Undo.class).
                                                equalTo("matchid", matchid).
                                                equalTo("eventID", (Integer) array.get(i)).
                                                findFirst();

                                        if (undo1 != null) {
                                            if (!realm.isInTransaction()) {
                                                realm.beginTransaction();
                                            }

                                            undo1.deleteFromRealm();
                                            realm.commitTransaction();
                                        }
                                    }
                                    updateUndo2();
//                                    serverSync(); Commented on 13/11/2021
                                }*/

                            } catch (JSONException e) {
                                e.printStackTrace();
//                                serverSync();  Commented on 13/11/2021
                            }
                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {

                            Log.e("volley", "postundo, onError Response  : " + error);
                            Log.e("volley", "postundo, jsonUndoArraye  : " + jsonUndoArray.toString());
                            updateUndo2();
//                            serverSync();  Commented on 13/11/2021

                        }
                    });

            MyApplicationClass.getInstance(getApplicationContext()).addToRequestQueue(jsonObjReq, "postRequest");
            Log.d("scoring", "jsonObjReq  : " + jsonObjReq);
            Log.d("scoring", "postparams  : " + postparams);
        }

    }




    private void resetJSONUndoArray () {

//        for (int i = 0; i < jsonUndoArray.length(); i++) {
//
//        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            for (int i = jsonUndoArray.length() - 1; i >= 0; --i) {
                jsonUndoArray.remove(i);
            }
        }

        else
            jsonUndoArray = new JSONArray();

    }




    private void resetJSONEventArray() {

        Log.d("json1", "resetJSONEventArray method called");

        count = 0;
        undo_count = 0;

//        if (isNetworkAvailable()) {     // added on 27/04/20

        // inserting undo array in resetJSONEventArray()
        jsonUndoArray = new JSONArray();
        jsonEventArray = new JSONArray();
        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);

        RealmResults<Events> result = realm.where(Events.class).
                equalTo("matchid", matchid).
                equalTo("syncstatus", 1).findAll();

        if (result.isEmpty()) {
//            jsonEventArray = new JSONArray();

            RealmResults<Events> results = realm.where(Events.class).
                    equalTo("matchid", matchid).findAll();

            for (Events event : results) {

//                    if (count <= 2){//50) {//10) {  // commented on 0/07/2021
                if (count <= 2){
                    ++count;

                    Log.d("jsonEventArray", "event 1 : " + event);
                    if (event.getSyncstatus() == 0) {
                        jsonEventArray.put(setEventJSON(event));
                        Log.d("jsonEventArray", "resetJSONEventArray 1 : " + jsonEventArray);
                    }
                }
                else
                    break;
            }
        } else {

            Events events = result.last();

            RealmResults<Events> results = realm.where(Events.class).
                    equalTo("matchid", matchid).
                    greaterThan("eventID", events.getEventID()).findAll();

            for (Events event : results) {

//                    if (count <= 2){//50) {//10) {  // commented on 0/07/2021
                if (count <= 2){
                    ++count;

                    if (event.getSyncstatus() == 0) {
                        Log.d("jsonEventArray", "event 2 : " + event);
                        jsonEventArray.put(setEventJSON(event));
                        Log.d("jsonEventArray", "resetJSONEventArray 2 : " + jsonEventArray);
                    }
                }

                else
                    break;
            }

        }
    }


    // set event details in JSON format

    public JSONObject setEventJSON(Events events){

        int b = 0, lb = 0, wd = 0, nb = 0, p = 0, wk = 0;
        Match match = realm.where(Match.class).
                equalTo("matchid", matchid).
                findFirst();


        //for bowler

        // commented on 16/05/2020

        JSONObject jsoncurrentbowler = new JSONObject();
        try {
            jsoncurrentbowler.put("id", events.getBowlerID());
            jsoncurrentbowler.put("d4sid", events.getBowlerD4SID());   // Added on 13/11/2021
            jsoncurrentbowler.put("run", events.getBowlerRuns());
            jsoncurrentbowler.put("over", events.getBowlerOver());
            jsoncurrentbowler.put("balls", events.getBowlerBalls());
            jsoncurrentbowler.put("wicket", events.getBowlerWicket());
//            if (bow != null) {    // commented on 16/05/2020
            jsoncurrentbowler.put("dots", events.getBowlerDots());//bow.getDots());
            jsoncurrentbowler.put("maiden", events.getBowlerMO());//bow.getMaidenOver());
            jsoncurrentbowler.put("wide", events.getBowlerWides());//bow.getWides());
            jsoncurrentbowler.put("noball", events.getBowlerNoball());//bow.getNoBalls());
            /*}     // commented on 16/05/2020

            else {
                jsoncurrentbowler.put("dots", 0);
                jsoncurrentbowler.put("maiden", 0);
                jsoncurrentbowler.put("wide", 0);
                jsoncurrentbowler.put("noball", 0);
            }*/
        } catch (JSONException e) {
            e.printStackTrace();
        }



        JSONObject jsonotherendbowler = new JSONObject();

        if (events.getPrevBowlerID() != 0) {

            // commented on 16/05/2020
            /*bow = realm.where(Bowler.class).
                    equalTo("matchid", events.getMatchid()).//matchid).
                    equalTo("innings", events.getInnings()).//currentInnings).
                    equalTo("team", events.getFieldingTeamNo()).//fieldingTeamNo).
                    equalTo("playerID", events.getPrevBowlerID()).findFirst();*/
            try {
                jsonotherendbowler.put("id", events.getPrevBowlerID());
                jsonotherendbowler.put("d4sid", events.getPrevBowlerD4SID());   // Added on 13/11/2021
                jsonotherendbowler.put("run", events.getPreBowlerRuns());
                jsonotherendbowler.put("over", events.getPreBowlerOver());
                jsonotherendbowler.put("balls", events.getPreBowlerBalls());
                jsonotherendbowler.put("wicket", events.getPreBowlerWicket());
//                if (bow != null) {    // commented on 16/05/2020
                jsonotherendbowler.put("dots", events.getPreBowlerDots());//bow.getDots());
                jsonotherendbowler.put("maiden", events.getPreBowlerMO());//bow.getMaidenOver());
                jsonotherendbowler.put("wide", events.getPreBowlerWides());//bow.getWides());
                jsonotherendbowler.put("noball", events.getPreBowlerNoball());//bow.getNoBalls());
                /*}     // commented on 16/05/2020
                else {
                    jsonotherendbowler.put("dots", 0);
                    jsonotherendbowler.put("maiden", 0);
                    jsonotherendbowler.put("wide", 0);
                    jsonotherendbowler.put("noball", 0);
                }*/
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        else {
            try {
                jsonotherendbowler.put("id", 0);
                jsonotherendbowler.put("d4sid", 0);   // Added on 13/11/2021
                jsonotherendbowler.put("run", 0);
                jsonotherendbowler.put("over", 0);
                jsonotherendbowler.put("balls", 0);
                jsonotherendbowler.put("wicket", 0);
                jsonotherendbowler.put("dots", 0);
                jsonotherendbowler.put("maiden", 0);
                jsonotherendbowler.put("wide", 0);
                jsonotherendbowler.put("noball", 0);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }


        JSONObject jsonbowler = new JSONObject();
        try {
            jsonbowler.put("current", jsoncurrentbowler);
            jsonbowler.put("otherend", jsonotherendbowler);
        } catch (JSONException e) {
            e.printStackTrace();
        }


        // for batsman

        // Added on 13/09/2021
        // Updated Striker - Non striker data
        JSONObject jsonstriker = new JSONObject();
        JSONObject jsonnonstriker = new JSONObject();

        try {
            int balltype = events.getBallType();
            int dismissedid = events.getDismissedPlayerID();
            Log.d("SEJ", "events.getBallType() = " + events.getBallType());
            Log.d("SEJ", "events.getDismissedPlayerID() = " + events.getDismissedPlayerID());
            Log.d("SEJ", "events.getStrikerID() = " + events.getStrikerID());
            Log.d("SEJ", "events.getNonStrikerID() = " + events.getNonStrikerID());
            if ((balltype == 4 || balltype == 5) && (dismissedid > 0)) {
                if (dismissedid == events.getStrikerID()) {
                    // Striker details
                    jsonstriker.put("id", 0);
                    jsonstriker.put("d4sid", 0);   // Added on 13/11/2021
                    jsonstriker.put("run", 0);
                    jsonstriker.put("ball", 0);
                    jsonstriker.put("battingorder", 0);
                    jsonstriker.put("dots", 0);
                    jsonstriker.put("fours", 0);
                    jsonstriker.put("sixes", 0);
                    jsonstriker.put("striker_outtype", -1);
                    jsonstriker.put("notoutindicator_striker", "y");

                    // Non-Striker details
                    jsonnonstriker.put("id", events.getNonStrikerID());
                    jsonnonstriker.put("d4sid", events.getNonStrikerD4SID());   // Added on 13/11/2021
                    jsonnonstriker.put("run", events.getNonStrikerRuns());
                    jsonnonstriker.put("ball", events.getNonStrikerBalls());
                    if (events.getNonStrikerBattingOrder() == 100)
                        jsonnonstriker.put("battingorder", 0);
                    else
                        jsonnonstriker.put("battingorder", events.getNonStrikerBattingOrder());
                    jsonnonstriker.put("dots", events.getNonStrikerDots());
                    jsonnonstriker.put("fours", events.getNonStrikerF4s());
                    jsonnonstriker.put("sixes", events.getNonStrikerS6s());
                    jsonnonstriker.put("nonstriker_outtype", events.getNonStrikerOutType());
                    if (events.getNonStrikerOutType() == -1)
                        jsonnonstriker.put("notoutindicator_nonstriker", "y");
                    else
                        jsonnonstriker.put("notoutindicator_nonstriker", "n");

                } else if (dismissedid == events.getNonStrikerID()) {
                    // Striker details
                    jsonstriker.put("id", events.getStrikerID());
                    jsonstriker.put("d4sid", events.getStrikerD4SID());   // Added on 13/11/2021
                    jsonstriker.put("run", events.getStrikerRuns());
                    jsonstriker.put("ball", events.getStrikerBalls());
                    if (events.getStrikerBattingOrder() == 100)
                        jsonstriker.put("battingorder", 0);
                    else
                        jsonstriker.put("battingorder", events.getStrikerBattingOrder());
                    jsonstriker.put("dots", events.getStrikerDots());
                    jsonstriker.put("fours", events.getStrikerF4s());
                    jsonstriker.put("sixes", events.getStrikerS6s());
                    jsonstriker.put("striker_outtype", events.getStrikerOutType());
                    if (events.getStrikerOutType() == -1)
                        jsonstriker.put("notoutindicator_striker", "y");
                    else
                        jsonstriker.put("notoutindicator_striker", "n");

                    // Non-Striker details
                    jsonnonstriker.put("id", 0);
                    jsonnonstriker.put("d4sid", 0);   // Added on 13/11/2021
                    jsonnonstriker.put("run", 0);
                    jsonnonstriker.put("ball", 0);
                    jsonnonstriker.put("battingorder", 0);
                    jsonnonstriker.put("dots", 0);
                    jsonnonstriker.put("fours", 0);
                    jsonnonstriker.put("sixes", 0);
                    jsonnonstriker.put("nonstriker_outtype", -1);
                    jsonnonstriker.put("notoutindicator_nonstriker", "y");

                }

            } else {

                // Striker details
                jsonstriker.put("id", events.getStrikerID());
                jsonstriker.put("d4sid", events.getStrikerD4SID());   // Added on 13/11/2021
                jsonstriker.put("run", events.getStrikerRuns());
                jsonstriker.put("ball", events.getStrikerBalls());
                if (events.getStrikerBattingOrder() == 100)
                    jsonstriker.put("battingorder", 0);
                else
                    jsonstriker.put("battingorder", events.getStrikerBattingOrder());
                jsonstriker.put("dots", events.getStrikerDots());
                jsonstriker.put("fours", events.getStrikerF4s());
                jsonstriker.put("sixes", events.getStrikerS6s());
                jsonstriker.put("striker_outtype", events.getStrikerOutType());
                if (events.getStrikerOutType() == -1)
                    jsonstriker.put("notoutindicator_striker", "y");
                else
                    jsonstriker.put("notoutindicator_striker", "n");

                // Non-Striker details
                jsonnonstriker.put("id", events.getNonStrikerID());
                jsonnonstriker.put("d4sid", events.getNonStrikerD4SID());   // Added on 13/11/2021
                jsonnonstriker.put("run", events.getNonStrikerRuns());
                jsonnonstriker.put("ball", events.getNonStrikerBalls());
                if (events.getNonStrikerBattingOrder() == 100)
                    jsonnonstriker.put("battingorder", 0);
                else
                    jsonnonstriker.put("battingorder", events.getNonStrikerBattingOrder());
                jsonnonstriker.put("dots", events.getNonStrikerDots());
                jsonnonstriker.put("fours", events.getNonStrikerF4s());
                jsonnonstriker.put("sixes", events.getNonStrikerS6s());
                jsonnonstriker.put("nonstriker_outtype", events.getNonStrikerOutType());
                if (events.getNonStrikerOutType() == -1)
                    jsonnonstriker.put("notoutindicator_nonstriker", "y");
                else
                    jsonnonstriker.put("notoutindicator_nonstriker", "n");
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        // === till here

        JSONObject jsonbatsman = new JSONObject();
        try {
            jsonbatsman.put("striker", jsonstriker);
            jsonbatsman.put("nonstriker", jsonnonstriker);

        } catch (JSONException e) {
            e.printStackTrace();
        }



        // for adding total extras on events

        // commented on 16/05/2020
        /*ExtraCard extraCard = realm.where(ExtraCard.class).
                equalTo("matchid", events.getMatchid()).//matchid).
                equalTo("innings", events.getInnings()).//currentInnings).
                findFirst();
        Log.d("ScoreCard", "setEventJSON, extracard : "+extraCard);
        if (extraCard != null){*/

        b = events.getExtraBye();//extraCard.getByes();
        lb = events.getExtraLb();//extraCard.getLb();
        wd = events.getExtraWd();//extraCard.getWide();// * wideRun;
        nb = events.getExtraNb();//extraCard.getNoBall();// * noballRun;
        p = events.getExtraP();//extraCard.getPenalty();// * penaltyRun;

        /*}     // commented on 16/05/2020

        else {
            b = 0;
            lb = 0;
            wd = 0;
            nb = 0;
            p = 0;
        }*/

        JSONObject jsonExtra = new JSONObject();
        try {
//            jsonExtra.put("inningsextras", (b + lb + (wd * wideRun) + (nb * noballRun) + (p * penaltyRun)));
            jsonExtra.put("inningsextras",
                    (b +
                            lb +
                            (wd * match.getWiderun()) +
                            (nb * match.getNoballrun()) +
                            (p * match.getPenaltyrun())));
            jsonExtra.put("byes", b);
            jsonExtra.put("legbyes", lb);
            jsonExtra.put("wide", wd);
            jsonExtra.put("noball", nb);
            jsonExtra.put("penalty", (p * match.getPenaltyrun()));   //p);

        } catch (JSONException e) {
            e.printStackTrace();
        }


        // adding inningssummary

        JSONObject jsonSummery = new JSONObject();
        try {
//            jsonSummery.put("innings", events.getInnings());
            if (events.isSUPER_OVER()) {
                if (events.getInnings() == 99)
                    jsonSummery.put("innings", 1);
                else if (events.getInnings() == 100)
                    jsonSummery.put("innings", 2);
            }

            else
                jsonSummery.put("innings", events.getInnings());
            jsonSummery.put("totalovers", Double.parseDouble(
                    new DecimalFormat("###.#").format(events.getOvers())));
            jsonSummery.put("totalscore", events.getTotalRuns());
            jsonSummery.put("totalwicket", events.getWicket());
            jsonSummery.put("extras", jsonExtra);
        } catch (JSONException e) {
            e.printStackTrace();
        }


        // adding over summary
        JSONObject jsonOverSummary = new JSONObject();
        try {
            jsonOverSummary.put("runs", events.getMo());
        }
        catch (JSONException e) {
            e.printStackTrace();
        }



        // getting fielderIDs
        JSONArray arrayFielder = new JSONArray();
        if (events.getOutType() == 1 || events.getOutType() == 3) {
//            arrayFielder.put(Integer.parseInt(events.getFielderID()));     Commented on 14/12/2021
            Player fielder = realm.where(Player.class)
                    .equalTo("matchid", matchid)
                    .equalTo("playerID", (Integer.parseInt(events.getFielderID())))
                    .findFirst();
            if (fielder != null)
                arrayFielder.put(fielder.getD4s_playerid());
            else
                arrayFielder.put(Integer.parseInt(events.getFielderID()));
        } else
        if (events.getOutType() == 2) {
            String[] arrSplit = events.getFielderID().split(", ");
            for (int i = 0; i < arrSplit.length; i++) {
//                    arrayFielder.put(arrSplit[i]);    Commented on 14/12/2021
                Player fielder = realm.where(Player.class)
                        .equalTo("matchid", matchid)
                        .equalTo("playerID", (Integer.parseInt(arrSplit[i])))
                        .findFirst();
                if (fielder != null)
                    arrayFielder.put(fielder.getD4s_playerid());
                else
                    arrayFielder.put(arrSplit[i]);
            }
        }
        Log.d("fielderids", "setEventJSON, arrayFielder : " + arrayFielder);

        /*else
            arrayFielder.put();*/





        /*else if (ballType == 3 && outType == 10)
            wk = wicket + 1;*/

        if ((events.getBallType() == 3) && (events.getOutType() != 10))//ballType == 3 && outType != 10)
            wk = events.getWicket();//wicket;
        else
            wk = events.getWicket() + 1;//wicket + 1;

        Log.d("Partnership", "setEventJSON : newPartnership : " + newPartnership);
        Log.d("Partnership", "setEventJSON : wicket : " + wicket);
        Log.d("Partnership", "setEventJSON : wk : " + wk);



        //commented on 18/05/2020
        /*RealmResults<Partnership> results = realm.where(Partnership.class).
                equalTo("matchid", events.getMatchid()).//matchid).
                equalTo("innings", events.getInnings()).//currentInnings).
                equalTo("wicket", wk).findAll();

        Log.d("Partnership", "results.isEmpty : " + results.isEmpty());*/

        JSONObject jsonFOW = new JSONObject();
        /*if (results.isEmpty()) {      //commented on 18/05/2020
            Log.d("Partnership", "results: " + results);
            try {
                jsonFOW.put("wicketno", wk);
                jsonFOW.put("partnershipsequence", 1);
                jsonFOW.put("partnershipruns", 0);
                jsonFOW.put("partnershipballs", 1);
                jsonFOW.put("partnershipover", Float.parseFloat(
                        new DecimalFormat("###.#").format(0)));
//                jsonFOW.put("player1id", 0);
//                jsonFOW.put("player2id", 0);
                if (strID > 0)
                    jsonFOW.put("player1id", strID);
                else
                    jsonFOW.put("player1id", nstrID);
                jsonFOW.put("player2id", 1);
                jsonFOW.put("dismissedplayerid", 0);//-1);
                jsonFOW.put("player1contributedruns", 0);
                jsonFOW.put("player1contributedballs", 0);
                jsonFOW.put("player2contributedruns", 0);
                jsonFOW.put("player2contributedballs", 0);
                jsonFOW.put("partnershipbroken", "no");
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        else {
            for (Partnership ps : results)
                Log.d("Partnership", "setEventJSON 111 : " + ps);
            Partnership partnership = results.last();
            Log.d("Partnership", "setEventJSON : " + partnership);*/
        try {
//                if (partnership != null) {        //commented on 18/05/2020
            jsonFOW.put("wicketno", events.getP_wicket_no());//partnership.getWicket());
            jsonFOW.put("partnershipsequence", events.getP_sequence_no());//partnership.getPartnershipSequence());
            jsonFOW.put("partnershipruns", events.getP_run());//partnership.getPartnershipRuns());
                    /*if (events.getP_ball() == 0)
                        jsonFOW.put("partnershipballs", 1);//partnership.getPartnershipBalls());
                    else*/
            jsonFOW.put("partnershipballs", events.getP_ball());//partnership.getPartnershipBalls());
//                    jsonFOW.put("partnershipover", Float.parseFloat(
//                            new DecimalFormat("###.#").format(events.getP_over())));//partnership.getPartnershipOver())));
            jsonFOW.put("partnershipover", events.getP_over());//partnership.getPartnershipOver())));
            jsonFOW.put("player1id", events.getP_p1Id());//partnership.getPlayer1ID());
            jsonFOW.put("player2id", events.getP_p2Id());//partnership.getPlayer2ID());

            if ((events.getBallType() != 5) && (events.getBallType() != 4)) // added condition on 15/09/2021
                jsonFOW.put("dismissedplayerid", events.getP_disId());

            jsonFOW.put("player1contributedruns", events.getP_p1cr());//partnership.getPlayer1ContributionRuns());
                    /*if (events.getP_p1cb() == 0)
                        jsonFOW.put("player1contributedballs", 1);//partnership.getPlayer1ContributionBalls());
                    else*/
            jsonFOW.put("player1contributedballs", events.getP_p1cb());//partnership.getPlayer1ContributionBalls());
            jsonFOW.put("player2contributedruns", events.getP_p2cr());//partnership.getPlayer2ContributionRuns());
            jsonFOW.put("player2contributedballs", events.getP_p2cb());//partnership.getPlayer2ContributionBalls());

                   /* Commented on 15/09/2021if (events.getBallType() != 3) {
                        jsonFOW.put("partnershipbroken", "n");  // no
                    } else {
                        if (events.getOutType() == 10)
                            jsonFOW.put("partnershipbroken", "n");  //no
                        else if (events.getOutType() != 10)
                            jsonFOW.put("partnershipbroken", "y");  //
                    }*/

            // added on 15/09/2021
            if (events.getP_disId() == 0) {
                jsonFOW.put("partnershipbroken", "n");  // no
            } else {
                jsonFOW.put("partnershipbroken", "y");  //
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }




        //adding session details
        JSONObject jsonSession = new JSONObject();
        try {
//            if (events.getBallType() == 13) {
            if (events.getSessionId() == 7 || events.getSessionId() == 9 || events.getSessionId() == 11)
                jsonSession.put("type", "end");

            else if (events.getSessionId() == 8 || events.getSessionId() == 10 ||
                    events.getSessionId() == 12 || events.getSessionId() == 6)
                jsonSession.put("type", "start");

            if (events.getSessionId() == 7 || events.getSessionId() == 12 || events.getSessionId() == 6)
                jsonSession.put("number", 1);
            else if (events.getSessionId() == 8 || events.getSessionId() == 9)
                jsonSession.put("number", 2);
            else if (events.getSessionId() == 10 || events.getSessionId() == 11)
                jsonSession.put("number", 3);

//                if (events.isInning_started())
//                    jsonSession.put("inningsstarted", events.isInning_started());//"yes");
//                else
//                    jsonSession.put("inningsstarted", "no");
/*           }

            else {

                jsonSession.put("type", "");
                jsonSession.put("number", 0);
//                jsonSession.put("inningsstarted", events.isInning_started());
//                if (events.isInning_started())
//                    jsonSession.put("inningsstarted", "yes");
//                else
//                    jsonSession.put("inningsstarted", "no");
            }*/
        } catch (JSONException e) {
            e.printStackTrace();
        }



        //adding interval details
        JSONObject jsonInterval = new JSONObject();
        try {
            if (events.getBallType() == 12)
                jsonInterval.put("id", events.getIntervalId());
            else
                jsonInterval.put("id", 0);
        }
        catch (JSONException e) {
            e.printStackTrace();
        }

        // for substituion and concussion
        JSONObject jsonSubstitution = new JSONObject();
        if (events.getBallType() == 18 || events.getBallType() == 19) {
            /*Substitution substitution = realm.where(Substitution.class).
                    equalTo("matchid", events.getMatchid()).
                    equalTo("innings", events.getInnings()).
                    equalTo("subID", events.getSubstitutionID()).findFirst();

            if (substitution != null) {*/
            try {

                jsonSubstitution.put("team", events.getSub_team());//substitution.getTeam());
//                    jsonSubstitution.put("innings", substitution.getInnings());
                jsonSubstitution.put("playerout_id", events.getSub_playerout_id());//substitution.getPlayer_OUT_ID());
                jsonSubstitution.put("playerin_id", events.getSub_playerin_id());//substitution.getPlayer_IN_ID());
//                    jsonSubstitution.put("playerout", substitution.getPlayer_OUT_ID());
//                    jsonSubstitution.put("playerin", substitution.getPlayer_IN_ID());

            } catch (JSONException e) {
                e.printStackTrace();
            }
//            }
        }


        JSONObject jsonPowerplay = new JSONObject();
        // commented on 18/05/2020
        /*if (events.getBallType() == 21 || events.getBallType() == 22 || events.getBallType() == 23) {
            Power power = realm.where(Power.class).
                    equalTo("matchid", events.getMatchid()).
                    equalTo("innings", events.getInnings()).
                    equalTo("id", events.getPower_id()).findFirst();

            if (power != null) {*/
        try {
            jsonPowerplay.put("start_over", events.getPower_start_over());//power.getStart());
            jsonPowerplay.put("end_over", events.getPower_end_over());//power.getEnd());
            jsonPowerplay.put("type", null);//power.getType());
//                    jsonPowerplay.put("innings", power.getInnings());
            jsonPowerplay.put("sequence", events.getPower_sequence());//power.getCount());

        }  catch (JSONException e) {
            e.printStackTrace();
        }
            /*}     // commented on 18/05/2020
        }*/

        // added on 18/03/2021
        JSONObject jsonChangeWk = new JSONObject();
        try {
            jsonChangeWk.put("wkid", events.getWkID());
        }  catch (JSONException e) {
            e.printStackTrace();
        }

        JSONObject jsonChangeSubWk = new JSONObject();
        try {
            jsonChangeSubWk.put("wkid", events.getWkID());
        }  catch (JSONException e) {
            e.printStackTrace();
        }

        // ========= till here


        // adding event details

        JSONObject jsonEvent = new JSONObject();
        try {
            jsonEvent.put("eventid", events.getEventID());
            jsonEvent.put("superover", events.isSUPER_OVER());
            if (events.isSUPER_OVER()) {
                if (events.getInnings() == 99)
                    jsonEvent.put("innings", 1);
                else if (events.getInnings() == 100)
                    jsonEvent.put("innings", 2);
            }

            else
                jsonEvent.put("innings", events.getInnings());
            jsonEvent.put("battingteam", events.getBattingTeamNo());
            jsonEvent.put("over", (int) events.getOvers());
            jsonEvent.put("ball", events.getCurrentOverBalls());
            jsonEvent.put("strikerid", events.getStrikerID());
            jsonEvent.put("nonstrikerid", events.getNonStrikerID());
            jsonEvent.put("bowlerid", events.getBowlerID());
            jsonEvent.put("balltype", events.getBallType());

            //Added on 15/09/2021
            if ((events.getBallType() == 5) || (events.getBallType() == 4))
                jsonEvent.put("endofover", "y");
            else
                jsonEvent.put("endofover", "n");
            // === till here

            // Added on 22/9/2021
            if (events.getBall_count() == 0)
                jsonEvent.put("ballcount", "n");
            else
                jsonEvent.put("ballcount", "y");

            if (events.getDismissedPlayerID() <= 0)
                jsonEvent.put("dismissedbatsmanid", 0);
            else
                jsonEvent.put("dismissedbatsmanid", events.getDismissedPlayerID());
            jsonEvent.put("disnewbatsmanid", events.getDisNewBatsmanID());

//            if (events.getBallType() != 4 && events.getBallType() != 5) {   // condition added on 13/09/2021
            jsonEvent.put("outtype", events.getOutType());
//            }

            /* Commented on 13/12/2021
            if (arrayFielder.length() == 0) {
                Log.d("fielderids", "setEventJSON 2, arrayFielder : " + arrayFielder);
                Log.d("fielderids", "setEventJSON 2, arrayFielder.length() : " + arrayFielder.length());
                jsonEvent.put("fielderids", 0);
            }
            else
                if (arrayFielder.length() > 0) {
                    jsonEvent.put("fielderids", arrayFielder);
            }*/

            // Updated on 13/12/2021
            if (events.getBallType() == 3) {
                if ((events.getOutType() == 1) || (events.getOutType() == 2) || (events.getOutType() == 3)) {
                    jsonEvent.put("fielderids", arrayFielder);

                /* COMMENTED ON 14/12/2021
                   jsonEvent.put("fielderids", Integer.parseInt(events.getFielderID()));
                else if (events.getOutType() == 2) {
//                    jsonEvent.put("fielderids", arrayFielder);
                    String[] arrSplit = events.getFielderID().split(", ");
//                    for (int i = 0; i < arrSplit.length; i++) {
//                        arrayFielder.put(arrSplit[i]);
//                    }
                    jsonEvent.put("fielderids", Integer.parseInt(arrSplit[0]));*/
                } else
                    jsonEvent.put("fielderids", 0);
            } else
                jsonEvent.put("fielderids", 0);

            jsonEvent.put("extratype", events.getExtraType());
            jsonEvent.put("freehit", events.isFreeHit());
            if (events.getPenaltyType() == 1 || events.getPenaltyType() == 2)
                jsonEvent.put("penaltybool", 1);
            else
                jsonEvent.put("penaltybool", 0);

            jsonEvent.put("penaltytype", events.getPenaltyType());
            jsonEvent.put("runs", events.getCurrentRun());
            jsonEvent.put("extras", events.getExtraRuns());
            if (events.getPenaltyType() > 0)
                jsonEvent.put("penalty", events.getPenaltyRuns());
            else
                jsonEvent.put("penalty", 0);

            if (events.getCommentary() != null)//.matches(""))
                jsonEvent.put("commentary", events.getCommentary());
            else
                jsonEvent.put("commentary", null);

            jsonEvent.put("strokedirection", events.getStrokeDirection());

//            if ((events.getBallType() != 4) && (events.getBallType() != 5))   // Added comment on 14/09/2021
            jsonEvent.put("bowler", jsonbowler);
//            if (events.getBallType() != 4 && events.getBallType() != 5) {   // condition added on 13/09/2021
            jsonEvent.put("batsman", jsonbatsman);
//            }
            jsonEvent.put("inningssummary", jsonSummery);

            if (events.getBallType() == 4 || events.getBallType() == 5)
                jsonEvent.put("oversummary", jsonOverSummary);

//            if (events.getBallType() == 3 && events.getDismissedPlayerID() > -1)
            jsonEvent.put("fallofwickets", jsonFOW);
            jsonEvent.put("session", jsonSession);
            jsonEvent.put("interval", jsonInterval);

//            if (events.getBallType() == 18 || events.getBallType() == 19) {
            if (events.getBallType() == 18)
                jsonEvent.put("substitution", jsonSubstitution);
            else if (events.getBallType() == 19)
                jsonEvent.put("concussion", jsonSubstitution);

            else if (events.getBallType() == 21 || events.getBallType() == 22 || events.getBallType() == 23)
                jsonEvent.put("powerplay", jsonPowerplay);

            else if (events.getBallType() == 20) {
                jsonEvent.put("rainruleused", "y");
                jsonEvent.put("reducedovers", events.getReducedOver());//match.getOver());
                jsonEvent.put("rainrulemethod", events.getAppliedRainRule());
//                if (events.getInnings() == 2) {
                jsonEvent.put("revisedtarget", events.getRevisedTarget());
//                    jsonEvent.put("rainrulemethod", events.getAppliedRainRule());
//                }

            }

            // Added on 18/03/2021
            else if (events.getBallType() == 24 ){
                jsonEvent.put("changewk", jsonChangeWk);
            }

            else if (events.getBallType() == 25) {
                jsonEvent.put("changesubwk", jsonChangeSubWk);
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        Log.e("jsonEventArray", "setEventJSON, jsonEvent : "+ jsonEvent);

        return jsonEvent;//jsonCurrentEvent;
    }

    private boolean isNetworkAvailable(){
        ConnectivityManager connectivityManager
                = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        Log.d("internet", "scoring, activeNetworkInfo : " + activeNetworkInfo);
        if (activeNetworkInfo != null)
            Log.d("internet", "scoring, activeNetworkInfo.isConnected() : " + activeNetworkInfo.isConnected());
        NetworkInfo wifiInfo = connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
        Log.d("internet", "scoring, wifiInfo : " + wifiInfo);
        if (wifiInfo != null)
            Log.d("internet", "scoring, wifiInfo.isConnected() : " + wifiInfo.isConnected());
        return ((activeNetworkInfo != null && activeNetworkInfo.isConnected()) || (wifiInfo != null && wifiInfo.isConnected()));
    }





   /* @Override
    public void onSaveInstanceState(Bundle savedInstanceState) {
        super.onSaveInstanceState(savedInstanceState);
        // Save UI state changes to the savedInstanceState.
        // This bundle will be passed to onCreate if the process is
        // killed and restarted.
//        savedInstanceState.putBoolean("osi_", true);
//        savedInstanceState.putDouble("myDouble", 1.9);
//        savedInstanceState.putInt("MyInt", 1);

        savedInstanceState.putString("osi_teamA", teamA);
        savedInstanceState.putString("osi_teamA", teamA);
        savedInstanceState.putString("osi_teamB", teamB);
        savedInstanceState.putString("osi_battingTeam", battingTeam);
        savedInstanceState.putString("osi_fieldingTeam", fieldingTeam);
        savedInstanceState.putInt("osi_batTNo", battingTeamNo);
        savedInstanceState.putInt("osi_fieldTNo", fieldingTeamNo);
        savedInstanceState.putInt("osi_currentInnings", currentInnings);
        savedInstanceState.putString("osi_inningsType", innings);
        savedInstanceState.putString("osi_matchType", matchtype);
        savedInstanceState.putInt("osi_totalOver", totalOver);
        savedInstanceState.putInt("osi_ballsPerOver", ballsPerOver);
        savedInstanceState.putInt("osi_remainingRuns", remainingRuns);
        savedInstanceState.putInt("osi_remainingBalls", remainingBalls);
        savedInstanceState.putInt("osi_currentRuns", currentRuns);
        savedInstanceState.putFloat("osi_currentOver", currentOver);updatedIDs = response.getJSONArray("updatedIDs");
        savedInstanceState.putInt("osi_currentBalls", currentBalls);
        savedInstanceState.putInt("osi_currentWicket", wicket);
        savedInstanceState.putString("osi_player1", player1);
        savedInstanceState.putString("osi_player2", player2);
        savedInstanceState.putString("osi_striker", striker);
        savedInstanceState.putString("osi_nstriker", nonStriker);
        savedInstanceState.putInt("osi_player1Runs", player1Runs);
        savedInstanceState.putInt("osi_player2Runs", player2Runs);
        savedInstanceState.putInt("osi_player1Balls", player1Balls);
        savedInstanceState.putInt("osi_player2Balls", player2Balls);
        savedInstanceState.putString("osi_bowler", bowler);
        savedInstanceState.putFloat("osi_bowlerOver", bowlerOver);

        savedInstanceState.putInt("osi_bowlerMO", bowlerMO);
        savedInstanceState.putInt("osi_bowlerRuns", bwRun);
        savedInstanceState.putInt("osi_bowlerWicket", bowlerWicket);

        savedInstanceState.putInt("osi_currentExtras", currentExtras);
        savedInstanceState.putInt("osi_totalExtras", totalExtras);
        savedInstanceState.putInt("ins_nextEventID", eventId + 1);

        // etc.
    }




    @Override
    public void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        // Restore UI state from the savedInstanceState.
        // This bundle has also been passed to onCreate.
//        boolean myBoolean = savedInstanceState.getBoolean("MyBoolean");
//        double myDouble = savedInstanceState.getDouble("myDouble");
//        int myInt = savedInstanceState.getInt("MyInt");
//        String myString = savedInstanceState.getString("MyString");

        teamA = savedInstanceState.getString("osi_teamA", null);
        teamB = savedInstanceState.getString("osi_teamB", null);
        battingTeam = savedInstanceState.getString("osi_battingTeam", null);
        fieldingTeam = savedInstanceState.getString("osi_fieldingTeam", null);
        battingTeamNo = savedInstanceState.getInt("osi_batTNo", 0);
        fieldingTeamNo = savedInstanceState.getInt("osi_fieldTNo", 0);
        currentInnings = savedInstanceState.getInt("osi_cInng", 0);
        innings = savedInstanceState.getString("osi_inningsType", null);
        matchtype = savedInstanceState.getString("osi_matchType", null);
        currentOver = savedInstanceState.getFloat("osi_currentOver", 0.0f);
//        ballsPerOver =
        remainingRuns = savedInstanceState.getInt("osi_remainingRuns", 0);
        remainingBalls = savedInstanceState.getInt("osi_remainingBalls", 0);
        currentRuns = savedInstanceState.getInt("osi_currentRuns", 0);
        currentOver = savedInstanceState.getFloat("osi_currentOver", 0.0f);
        currentBalls = savedInstanceState.getInt("osi_remainingBalls", 0);
        wicket = savedInstanceState.getInt("osi_currentWicket", 0);
        player1 = savedInstanceState.getString("osi_player1", null);
        player2 = savedInstanceState.getString("osi_player2", null);

        striker = savedInstanceState.getString("osi_striker", null);
        nonStriker = savedInstanceState.getString("osi_nstriker", null);

        totalRuns = savedInstanceState.getInt("osi_totalRuns", 0);

        player1Runs = savedInstanceState.getInt("osi_player1Runs", 0);
        player2Runs = savedInstanceState.getInt("osi_player2Runs", 0);
        player1Balls = savedInstanceState.getInt("osi_player1Balls", 0);
        player2Balls = savedInstanceState.getInt("osi_player2Balls", 0);
        bowler = savedInstanceState.getString("osi_bowler", null);
        bowlerOver = savedInstanceState.getFloat("osi_bowlerOver", 0.0f);
        bowlerMO = savedInstanceState.getInt("osi_bowlerMO", 0);
        bwRun = savedInstanceState.getInt("osi_bowlerRuns", 0);
        bowlerWicket = savedInstanceState.getInt("osi_bowlerWicket", 0);
        currentExtras = savedInstanceState.getInt("osi_currentExtras", 0);
        totalExtras = savedInstanceState.getInt("osi_totalExtras", 0);
        eventId = savedInstanceState.getInt("osi_nextEventID", 0);


        setDisplay();
    }*/



    @Override
    protected void onPause() {

        super.onPause();
//        Toast.makeText(getApplicationContext(), "onPause called", Toast.LENGTH_LONG).show();
        Log.d("OnPause", "OnPause called");
        Log.d("OnPause", " matchid : "+matchid);
//        stop = true;
        editor = sharedPreferences.edit();


        editor.putInt("op_matchid", matchid);
        editor.putString("op_matchID", matchID);
        editor.putString("sp_status", status);
        editor.putBoolean("sp_just_started", just_started);
        editor.putInt("sp_total_innings", totalInnings);
        editor.putInt("sp_current_innings", currentInnings);

        editor.apply();

        updateMatch(matchid, endOfInnings);

    }



    private void updateMatch(int matchid, boolean endOfInnings) {

        Log.d("updateMatch", "updateMatch,endOfInnings : " + endOfInnings);

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm realm) {

                    try {

                        Match match = realm.where(Match.class).
                                equalTo("matchid", matchid).findFirst();
//                        match.setAddPlayers(false);
//                        match.setCaptain(false);
//                        match.setToss(false);
                        match.setOpeners(false);
                        match.setScoring(true);
                        match.setEndOfInnings(endOfInnings);
//                        match.setScoreCard(false);
//                        match.setPulledMatch(false);
//                        match.setSelectAXI(false);
//                        match.setSelectBXI(false);
                        match.setJustStarted(just_started);
                        match.setPlayingInnings(currentInnings);
                        if (endOfInnings){
                            match.setScoreCard(true);
                            match.setScoring(false);
                            if (currentInnings == 1)
                                match.setInnings1Runs(currentRuns);
                            else if (currentInnings == 2)
                                match.setInnings2Runs(currentRuns);
                            else if (currentInnings == 3)
                                match.setInnings3Runs(currentRuns);
                            else if (currentInnings == 4)
                                match.setInnings4Runs(currentRuns);
                            else if (currentInnings == 99)
                                match.setSuper_over_innings1runs(currentRuns);
                            else if (currentInnings == 100)
                                match.setSuper_over_innings2runs(currentRuns);
                        }
                        realm.copyToRealmOrUpdate(match);

                        Log.d("updateMatch", " match : " + match);
                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("scoring", "onclick, Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }
    }




    @Override
    protected void onStop() {

        super.onStop();
//        Toast.makeText(getApplicationContext(), "onStop called", Toast.LENGTH_LONG).show();
        Log.d("Scoring", "onStop called");
        Log.d("Scoring", " matchid : "+matchid);

        editor = sharedPreferences.edit();
        editor.putInt("op_matchid", matchid);
        editor.putString("op_matchID", matchID);


        editor.apply();

    }



//    @Override
//    protected void onRestart() {
//
//        super.onResume();
//        Toast.makeText(getApplicationContext(), "onResumed called", Toast.LENGTH_LONG).show();
//        Log.d("OnResume", "OnResume called");
//        Log.d("OnResume", " matchid : "+matchid);
//        Log.d("OnResume", "out "+out);
//        Log.d("OnResume", "extras "+extras);
//
//
////        if (out || extras) {
////            Log.d("onResume", "out : "+out);
////            Log.d("onResume", "extras : "+extras);
//        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
//
//        teamA = sharedPreferences.getString("op_teamA", null);
//        teamB = sharedPreferences.getString("op_teamB", null);
//        battingTeam = sharedPreferences.getString("op_battingTeam", null);
//        fieldingTeam = sharedPreferences.getString("op_fieldingTeam", null);
//        battingTeamNo = sharedPreferences.getInt("op_batTNo", 0);
//        fieldingTeamNo = sharedPreferences.getInt("op_fieldTNo", 0);
//        currentInnings = sharedPreferences.getInt("op_cInng", 0);
//        innings = sharedPreferences.getString("op_inningsType", null);
//        matchtype = sharedPreferences.getString("op_matchType", null);
//        currentOver = sharedPreferences.getFloat("op_currentOver", 0.0f);
////        ballsPerOver =
//        remainingRuns = sharedPreferences.getInt("op_remainingRuns", 0);
//        remainingBalls = sharedPreferences.getInt("op_remainingBalls", 0);
//        currentRuns = sharedPreferences.getInt("op_currentRuns", 0);
//        currentOver = sharedPreferenceextras.getFloat("op_currentOver", 0.0f);
//        currentBalls = sharedPreferences.getInt("op_remainingBalls", 0);
//        wicket = sharedPreferences.getInt("op_currentWicket", 0);
//        player1 = sharedPreferences.getString("op_player1", null);
//        player2 = sharedPreferences.getString("op_player2", null);
//
//        striker = sharedPreferences.getString("op_striker", null);
//        nonStriker = sharedPreferences.getString("op_nstriker", null);
//
//        totalRuns = sharedPreferences.getInt("op_totalRuns", 0);
//
//        player1Runs = sharedPreferences.getInt("op_player1Runs", 0);
//        player2Runs = sharedPreferences.getInt("op_player2Runs", 0);
//        player1Balls = sharedPreferences.getInt("op_player1Balls", 0);
//        player2Balls = sharedPreferences.getInt("op_player2Balls", 0);
//        bowler = sharedPreferences.getString("op_bowler", null);
//        bowlerOver = sharedPreferences.getFloat("op_bowlerOver", 0.0f);
//        bowlerMO = sharedPreferences.getInt("op_bowlerMO", 0);
//        bwRun = sharedPreferences.getInt("op_bowlerRuns", 0);
//        bowlerWicket = sharedPreferences.getInt("op_bowlerWicket", 0);
//        currentExtras = sharedPreferences.getInt("op_currentExtras", 0);
//        totalExtras = sharedPreferences.getInt("op_totalExtras", 0);
//        eventId = sharedPreferences.getInt("op_nextEventID", 0);
//
//
//        setDisplay();
////        }
//
////        if (out)
////            setOut();
////
////        if (extras)
////            setExtra();
//
//    }





    public void setCommentry(int flag){

        comBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        comBuilder.setIcon(R.drawable.ball);
        comBuilder.setCancelable(false);
        if (flag == 1)
            comBuilder.setTitle("Enter ball by ball commentary");
        else
        if (flag == 2)
            comBuilder.setTitle("Enter other commentary");

        final EditText input = new EditText(this);

        input.setInputType(InputType.TYPE_CLASS_TEXT);
        comBuilder.setView(input);
        comBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {

            //            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();

                if ((input.getText().toString().equals(null)) || (input.getText().toString().matches(""))){
                    Toast.makeText(getApplicationContext(),
                            "Please enter the Run", Toast.LENGTH_SHORT).show();
                }

                else {
                    commentary = input.getText().toString();
                    Log.d("Test", "BuilderText : " + commentary);

                    savetoDB(flag, commentary);

                    postCommentary(flag, commentary);


/*                  Commented on 15/12/2021
                    if (!commentary.matches("")){
                        tvCommentry.setText(commentary);
                        Log.d("so_inninngs1Runs","setCommentry20 , : "+so_inninngs1Runs);

                    }
                    else {
                        Log.d("Test","buildertext = null");
                    }*/
                }
            }
        });

        comBuilder.setNegativeButton("CANCEL", null);

        AlertDialog alert = comBuilder.create();
        alert.show();

    }


    void alert() {

        AlertDialog.Builder builder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        builder.setIcon(R.drawable.ball);
        builder.setCancelable(false);
        builder.setTitle("Can not continue the match");
        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            //            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });

        AlertDialog alert = builder.create();
        alert.show();
    }


    void playerOUT(){

        boolean temp_out = true;
        int temp_total = player_count;
        commentary = "";
        wk_flag = false;



        Log.d("newBatsman", "playerOUT newBatsman :"+newBatsman);
//        Log.d("playerOUT", " matchid :"+matchid);
//        Log.d("playerOUT", " matchID :"+matchID);

        LayoutInflater layoutInflater = (LayoutInflater)
                UpdatedScoringActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View customViewOUT = layoutInflater.inflate(R.layout.out,null);

        btn_out_back = customViewOUT.findViewById(R.id.out_back);
        btn_out_Type = customViewOUT.findViewById(R.id.btn_outtype);
        btn_out_batsman = customViewOUT.findViewById(R.id.btn_batsman);
        btn_out_fielder = customViewOUT.findViewById(R.id.btn_fielder);
//        btn_out_crossed = customViewOUT.findViewById(R.id.btn_crossed);
        btn_out_extra = customViewOUT.findViewById(R.id.btn_extra);
        btn_out_extra_type = customViewOUT.findViewById(R.id.btn_out_extra_type);
//        btn_out_penalty = customViewOUT.findViewById(R.id.btn_out_penalty);
//        btn_out_change_penalty_run = customViewOUT.findViewById(R.id.btn_out_change_penalty_run);
//        btn_out_next_striker = customViewOUT.findViewById(R.id.btn_next_striker);
        btn_out_com = customViewOUT.findViewById(R.id.btn_out_com);
        btn_out_next = customViewOUT.findViewById(R.id.bt_out_next);

        tv_outType = customViewOUT.findViewById(R.id.txt_outtype);
        tv_outBatsman = customViewOUT.findViewById(R.id.txt_batsman);
        tv_fielder = customViewOUT.findViewById(R.id.txt_fielder);
//        tv_crossed = customViewOUT.findViewById(R.id.txt_crossed);
        tv_extraType = customViewOUT.findViewById(R.id.txt_out_extra_Type);
//        tv_out_penalty = customViewOUT.findViewById(R.id.txt_out_penalty);
//        tv_nextStriker = customViewOUT.findViewById(R.id.txt_next_striker);
        tv_com = customViewOUT.findViewById(R.id.txt_out_com);
//        tv_extra = customViewOUT.findViewById(R.id.txt_out_extra_Type);
        et_out_run = customViewOUT.findViewById(R.id.edit_out_run); // runs (normal)
        et_runsOffBat_out = customViewOUT.findViewById(R.id.edit_run_off_bat_out);  // runs off bat along with extra
        et_extra_run_out = customViewOUT.findViewById(R.id.edit_extra_run_out); // extra runs ak\long with extra

        rb_crossed = customViewOUT.findViewById(R.id.rb_crossed);
        rb_not_crossed = customViewOUT.findViewById(R.id.rb_not_crossed);

        ll_batsman = customViewOUT.findViewById(R.id.layout_batsman);
        ll_fielder = customViewOUT.findViewById(R.id.layout_fielder);
        ll_crossed = customViewOUT.findViewById(R.id.layout_crossed);
        ll_extra = customViewOUT.findViewById(R.id.layout_extra); // layout which contains Extra button and out_run edittext
        ll_extras = customViewOUT.findViewById(R.id.layout_extras); // layout which containd extratypes and penalty
        ll_extra_runs = customViewOUT.findViewById(R.id.layout_extra_run);
//        ll_penalty = customViewOUT.findViewById(R.id.layout_penalty);
        ll_ballcount = customViewOUT.findViewById(R.id.layout_out_ballcount);

        cb_ball_count = customViewOUT.findViewById(R.id.cb_out_ballcount);

        out_run = 0;

//        crossed = false;
//        ll_nextStriker = customViewOUT.findViewById(R.id.layout_next_striker);

//        tv_nextStriker.setVisibility(View.GONE);

//        if (allOUT)
//            ll_nextStriker.setVisibility(View.GONE);




        //instantiate OUT popup window
        popupOUT = new PopupWindow(customViewOUT, LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.MATCH_PARENT);
        popupOUT.setFocusable(true);
        popupOUT.setOutsideTouchable(isRestricted());
        popupOUT.update();


        //display the OUT popup window
        popupOUT.showAtLocation(linearLayout, Gravity.CENTER, 500, 500);


        Log.e("playerOUT", " out : "+out);

        RealmResults<Player> player_result = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", fieldingTeamNo).
                equalTo("retired", false).findAll();
        if (player_result.isEmpty())
            temp_total = player_count;
        else
            temp_total = player_result.size();
        substitute = false;
        fielderss = new String[temp_total];
        checkedFielders = new boolean[temp_total];


        setVisibity();
        outType = -1;
        ballType = -1;
        bCount = 0; // Added on 22/09/2021
        dismissedPlayer = "";
        single = false;
        multi = false;
        retired = false;
        ve_flag = 0;

//        tv_outType.setVisibility(View.GONE);

        /*if (rb_not_crossed.isSelected()){
            crossed = false;
            Log.d("scoring", "playerOUT, rb_not_crossed crossed : "+crossed);
        }

        else if (rb_crossed.isSelected()){
            crossed = true;
            Log.d("scoring", "playerOUT, rb_crossed crossed : "+crossed);
            if (outType == 2)
                btn_out_batsman.setVisibility(View.VISIBLE);

            else if (outType == 3 || outType == 8) {
                ll_extra.setVisibility(View.VISIBLE);
            }
        }*/


        btn_out_back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                out = false;
//                confirm_out = false;
                outType = -1;
                ballType = -1;
                bCount = 0; // Added on 22/09/2021
                dismissedPlayer = "";
                single = false;
                multi = false;
                retired = false;
                popupOUT.dismiss();


                if (ball >= ballsPerOver) {
                    /*  Commented on 26/07/2021
                        // updated on 24/07/2021
                    if (HUNDRED)
                        callBallsCompleted();
                    else*/
                    callEndOfOverAlert();
                }
            }
        });


        btn_out_Type.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectOutType();
            }
        });



        btn_out_batsman.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectDismissedPlayer();
            }
        });


        btn_out_fielder.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectFielder();
            }
        });


        /*btn_out_crossed.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkStrikerCrossed();
            }
        });*/

        btn_out_extra.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkViewExtra();
            }
        });


        btn_out_extra_type.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkOutExtraType();
            }
        });


        // Added on 09/09/2021
/*
        if (et_out_run.hasFocus()) {//getVisibility() == 0) {
            et_out_run.addTextChangedListener(new TextWatcher() {
                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    Log.d("US", "playerOUT, b4 et_out_run = " + et_out_run.getText().toString());
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                    Log.d("US", "playerOUT, on et_out_run = " + et_out_run.getText().toString());
                }

                @Override
                public void afterTextChanged(Editable s) {
                    int i = Integer.parseInt(et_out_run.getText().toString());
                    Log.d("US", "playerOUT, aftr i = " + i);
                    checkExtra(i, 0);
                }
            });
        }
*/

        if ((et_out_run.getVisibility()) == View.VISIBLE) {
            Log.d("US", "playerOUT, et_out_run is visible");
            et_out_run.addTextChangedListener(new TextWatcher() {
                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    Log.d("US", "playerOUT, b4 et_out_run = " + et_out_run.getText().toString());
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                    Log.d("US", "playerOUT, on et_out_run = " + et_out_run.getText().toString());
                }

                @Override
                public void afterTextChanged(Editable s) {
                    String str = s.toString();
                    Log.d("US", "playerOUT, aftr str = " + str);
                    if ((str.matches("")) || (str == null)) {
                        Log.d("US", "playerOUT, aftr 1 str = " + str);
                    } else {
                        int i = Integer.parseInt(str);
                        Log.d("US", "playerOUT, aftr i = " + i);
                        if (noBall)
                            checkExtra(i + noballRun);
                        else
                            checkExtra(i);
                    }
                }
            });
        }


        if (et_runsOffBat_out.getVisibility() == View.VISIBLE) {

            et_runsOffBat_out.addTextChangedListener(new TextWatcher() {
                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    Log.d("US", "playerOUT, b4 et_runsOffBat_out = " + et_runsOffBat_out.getText().toString());
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                    Log.d("US", "playerOUT, on et_runsOffBat_out = " + et_runsOffBat_out.getText().toString());
                }

                @Override
                public void afterTextChanged(Editable s) {
                    String str = s.toString();
                    Log.d("US", "playerOUT, aftr str = " + str);
                    if ((str.matches("")) || (str == null)) {
                        Log.d("US", "playerOUT, aftr 1 str = " + str);
                    } else {
                        int i = Integer.parseInt(str);
                        Log.d("US", "playerOUT, aftr i = " + i);
                        if (noBall)
                            checkExtra(i + noballRun);
                        else
                            checkExtra(i);
                    }
                }
            });
        }

        if (et_extra_run_out.getVisibility() == View.VISIBLE) {

            et_extra_run_out.addTextChangedListener(new TextWatcher() {
                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    Log.d("US", "playerOUT, b4 et_extra_run_out = " + et_extra_run_out.getText().toString());
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                    Log.d("US", "playerOUT, on et_extra_run_out = " + et_extra_run_out.getText().toString());
                }

                @Override
                public void afterTextChanged(Editable s) {
                    String str = s.toString();
                    Log.d("US", "playerOUT, aftr str = " + str);
                    if ((str.matches("")) || (str == null)) {
                        Log.d("US", "playerOUT, aftr 1 str = " + str);
                    } else {
                        int i = Integer.parseInt(str);
                        Log.d("US", "playerOUT, aftr i = " + i);
                        if (noBall)
                            checkExtra(i + noballRun);
                        else
                            checkExtra(i);
                    }
                }
            });
        }
        //=== till here


//        btn_out_penalty.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                setPenalty();
//            }
//        });


//        btn_out_change_penalty_run.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                changePenaltyRun();
//            }
//        });

//        btn_out_next_striker.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//
//                changeBatsman(-1);
//            }
//        });


        btn_out_com.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                editOutCommentary();
            }
        });


//        cb_ball_count.setOnCheckedChangeListener((CompoundButton.OnCheckedChangeListener) this);
        cb_ball_count.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                CheckBox checkBox = (CheckBox) view;
                if (checkBox.isChecked()) {
                    out_ball_not_count = true;
                    bCount = 0;
                } else {
                    out_ball_not_count = false;
                    bCount = 1;
                }
                /*if (cb_ball_count.isChecked())
                    out_ball_not_count = true;
                else
                    out_ball_not_count = false;*/
                Log.e("Scoring", "playerOUT, out_ball_not_count : " + out_ball_not_count);
            }
        });





        btn_out_next.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

//                displayProgress();

                Log.e("Scoring", "playerOUT, btn_out_next out_ball_not_count : " + out_ball_not_count);
//                Log.e("Scoring", "playerOUT, btn_out_next striker : "+striker);
//                Log.e("Scoring", "playerOUT, btn_out_next strID : "+strID);
//                Log.e("Scoring", "playerOUT, btn_out_next strikerRuns : "+strikerRuns);
//                Log.e("Scoring", "playerOUT, btn_out_next strikerBalls : "+strikerBalls);
//                Log.e("Scoring", "playerOUT, btn_out_next strikerF4s : "+strikerF4s);
//                Log.e("Scoring", "playerOUT, btn_out_next strikerS6s : "+strikerS6s);
//
//                Log.e("Scoring", "playerOUT, btn_out_next nonStriker : "+nonStriker);
//                Log.e("Scoring", "playerOUT, btn_out_next nstrID : "+nstrID);
//                Log.e("Scoring", "playerOUT, btn_out_next nonStrikerRuns : "+nonStrikerRuns);
//                Log.e("Scoring", "playerOUT, btn_out_next nonStrikerBalls : "+nonStrikerBalls);
//                Log.e("Scoring", "playerOUT, btn_out_next nonStrikerF4s : "+nonStrikerF4s);
//                Log.e("Scoring", "playerOUT, btn_out_next nonStrikerS6s : "+nonStrikerS6s);
//
//                Log.e("Scoring", "outToScoring, btn_out_next player1 : "+player1);
//                Log.e("Scoring", "outToScoring, btn_out_next player1ID : "+player1ID);
//                Log.e("Scoring", "outToScoring, btn_out_next player1Runs : "+player1Runs);
//                Log.e("Scoring", "outToScoring, btn_out_next player1Balls : "+player1Balls);
//                Log.e("Scoring", "outToScoring, btn_out_next player1F4s : "+player1F4s);
//                Log.e("Scoring", "outToScoring, btn_out_next player1S6s : "+player1S6s);
//
//                Log.e("Scoring", "outToScoring, btn_out_nextp player2 : "+player2);
//                Log.e("Scoring", "outToScoring, btn_out_next player2ID : "+player2ID);
//                Log.e("Scoring", "outToScoring, btn_out_next player2Runs : "+player2Runs);
//                Log.e("Scoring", "outToScoring, btn_out_next player2Balls : "+player2Balls);
//                Log.e("Scoring", "outToScoring, btn_out_next player2F4s : "+player2F4s);
//                Log.e("Scoring", "outToScoring, btn_out_nextp player2S6s : "+player2S6s);


                Log.e("Scoring", "outToScoring, btn_out_next dismissedPlayer : "+dismissedPlayer);
                Log.e("Scoring", "outToScoring, btn_out_next outType : "+outType + ", ectraType : " +extraType);
                Log.e("Scoring", "outToScoring, btn_out_next fielderPlayerID : "+fielderPlayerID);
                Log.e("Scoring", "outToScoring, btn_out_next fielders : "+fielders);
                Log.e("Scoring", "outToScoring, btn_out_next fielders : "+fielders.length);

                if ((dismissedPlayer == null) || (dismissedPlayer.matches("")) || (outType == -1)){
//                    outAlert(1);
                    outAlert(1, "Please select dismissed player");
                }

                else if (!message.matches(""))
                    displayError(message);



                else {

                    Log.d("b4 setExtra", "2 ballType : " + ballType + ", outextras : " + outextras);
                    Log.d("b4 setExtra", "2 extras : " + extras + ",extraType : " + extraType +
                            ", extra : " + extra + ", extraRun : " + extraRun + ", runsOffBat : " + runsOffBat);
                    Log.d("b4 setExtra", "2 out : " + out + ", outType : " + outType + ", out_run : " + out_run);
                    Log.d("b4 setExtra", "2 strID : " + strID + ", strikerRuns : " + strikerRuns +
                            ", strikerBalls : " + strikerBalls);
                    Log.d("b4 setExtra", "2 nstrID : " + nstrID + ", nonStrikerRuns : " + nonStrikerRuns +
                            ", nonStrikerBalls : " + nonStrikerBalls);
                    Log.d("b4 setExtra", "2 player1ID : " + player1ID + ", player1Runs : " + player1Runs +
                            ", player1Balls : " + player1Balls);
                    Log.d("b4 setExtra", "2 player2ID : " + player2ID + ", player2Runs : " + player2Runs +
                            ", player2Balls : " + player2Balls);
                    Log.d("b4 setExtra", "2 psRuns : " + psRuns + ", psBalls : " + psBalls + ", psOver : " + psOver);
                    Log.d("b4 setExtra", "2 ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
                    Log.d("b4 setExtra", "2 ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);

                    just_started = false;
                    if (status.matches("start")) {
                        status = "resume";
                        updateMatch(matchid, false);
                    }

                    if (et_out_run.isShown()) {
                        String temp = et_out_run.getText().toString();

                        if (temp.matches(""))
                            out_run = 0;
                        else
                            out_run = Integer.parseInt(temp);


                    }

                    if (et_extra_run_out.isShown()) {
                        String str = et_extra_run_out.getText().toString();
                        if (str.matches(""))
                            extraRun = 0;
                        else
                            extraRun = Integer.parseInt(str);
                        if (noBall)
                            extra = extraRun + noballRun;
                        else if (wide)
                            extra = extraRun + wideRun;
                    }

                    if (et_runsOffBat_out.isShown()) {

                        String str2 = et_runsOffBat_out.getText().toString();
                        if (str2.matches(""))
                            runsOffBat = 0;
                        else
                            runsOffBat = Integer.parseInt(str2);
                    }

                    if (/*outType != 7 && */outType != 9 && outType != 10 && outType != 11 && outType != 12) {
                        if (wide || out_ball_not_count) {  // working {
                            Log.d("out", "wide : " + wide);
//                            bCount = 0;
                        } else {
//                            bCount = 1;
                            ++strikerBalls;
                            if (strID == ps1ID) {
                                ++p1CB;
                            } else if (strID == ps2ID) {
                                ++p2CB;
                            }
                        }

                    }
                    Log.d("Scoring", "btn_out_next, runs : " + runs + ", runsOffBat : " + runsOffBat);
                    strikerRuns = strikerRuns + out_run + runsOffBat;
                    if (strID == player1ID) {

                        player1Balls = strikerBalls;
                        player1Runs = strikerRuns;
                    } else if (strID == player2ID) {

                        player2Balls = strikerBalls;
                        player2Runs = strikerRuns;
                    }

                    if (strID == ps1ID) {
                        p1CR = p1CR + runsOffBat + out_run;
                    } else if (strID == ps2ID) {
                        p2CR = p2CR + runsOffBat + out_run;
                    }

                    bwRun = bwRun + out_run + runsOffBat;
                    currentRuns = currentRuns + out_run + runsOffBat;
                    psRuns = psRuns + out_run + runsOffBat;
                    leadingRuns = leadingRuns + out_run + runsOffBat;

                    if (remainingRuns > 0) {
                        remainingRuns = remainingRuns - out_run - runsOffBat;
                        tvRemainingRuns.setText(String.valueOf(remainingRuns));
                    }
//                    else if (totalInnings == 4 && leadingRuns >= 0) {
                    if (leadingRuns > remainingRuns && totalInnings == 4) {
                        tvRemainingRuns.setText(String.valueOf(leadingRuns));
                        tvRemainingRunsText.setText("Leading Runs : ");
                    }


                    Log.d("Scoring", "btn_out_next, remainingRuns : " + remainingRuns);
                    Log.d("Scoring", "btn_out_next, leadingRuns : " + leadingRuns);

//                    if (strID == player1ID) {
//                        ++player1Balls;
//                        player1Runs = runs + runsOffBat;
//                    }
//                    else if (strID == player2ID) {
//
//                        ++player2Balls;
//                        player1Runs = runs + runsOffBat;
//                    }

                    if (out_ball_not_count) {// working
                        Log.d("out", "outtype : " + outType + ", out_ball_not_count : " + out_ball_not_count);
//                        bCount = 0;
                    } else {

                        if (runsOffBat == 0 && out_run == 0) {

                            if (strID == player1ID) {
                                ++player1Dots;
                                strikerDots = player1Dots;
                            }
                            if (strID == player2ID) {
                                ++player2Dots;
                                strikerDots = player2Dots;
                            }

                            if (retired || outType == 10 || outType == 12)
                                Log.d("Test", "retired");
                            else
                                ++bowlerDots;
                        }

                        if (runsOffBat == 4 || out_run == 4) {

                            if (strID == player1ID) {
                                ++player1F4s;
                                strikerF4s = player1F4s;
                            }
                            if (strID == player2ID) {
                                ++player2F4s;
                                strikerF4s = player2F4s;
                            }
                            ++bowlerF4s;
                        } else if (runsOffBat == 6 || out_run == 6) {

                            if (strID == player1ID) {
                                ++player1S6s;
                                strikerS6s = player1S6s;
                            }
                            if (strID == player2ID) {
                                ++player2S6s;
                                strikerS6s = player2S6s;
                            }
                        }
                    }


/*
                     else if (penalty) {

                         if (penaltyType == 1) {

//                savePenalty(penaltyType, penaltyRunTeam, true, battingTeamNo);
                             // didn't removed it when both undo & cancel
                             totalExtras = totalExtras + penaltyRun;

                             currentRuns = currentRuns + penaltyRun;
                             psRuns = psRuns + penaltyRun;
                             setInningsRuns(currentInnings, currentRuns);

                             if (currentInnings > 1 && currentInnings != 99) {
                                 ll_remainings.setVisibility(View.VISIBLE);
//                                        penaltyType = 1;
                                 leadingRuns = leadingRuns + penaltyRun;
                                 if (remainingRuns > 0) {

                                     remainingRuns = remainingRuns - penaltyRun;
//                                            leadingRuns = leadingRuns + penaltyRun;
                                     tvRemainingRuns.setText(String.valueOf(remainingRuns));

                                 }

                                 if (leadingRuns > remainingRuns && totalInnings == 4) {
                                     tvRemainingRuns.setText(String.valueOf(leadingRuns));
                                     tvRemainingRunsText.setText("Leading Runs : ");
                                 }

                             }
                             else {
                                 ll_remainings.setVisibility(View.GONE);
                             }
                         }

                         else if (penaltyType == 2) {

                             if (totalInnings == currentInnings) {
                                 remainingRuns = remainingRuns + penaltyRun;
//                    savePenalty(penaltyType, penaltyRunTeam, true, fieldingTeamNo);
                                 if (currentInnings == 2) {
                                     innings1Runs = innings1Runs + penaltyRun;
                                 }
                                 else {
                                     if (!followon)
                                         innings3Runs = innings3Runs + penaltyRun;
                                 }
                                 // didn't removed it when both undo & cancel
                             }

                             else if (SUPER_OVER) {

                                 remainingRuns = remainingRuns + penaltyRun;
//                    savePenalty(penaltyType, penaltyRunTeam, true, fieldingTeamNo);
                                 if (currentInnings == 100) {
                                     so_inninngs1Runs = so_inninngs1Runs + penaltyRun;
                                     Log.d("so_inninngs1Runs","setPenalty22 , : "+so_inninngs1Runs);
                                 }
                             }
                         }

                         */
/*if (ballCount) {

                             if (bowball) {
                                 ++bowlerBalls;
//                        bowlerOver = bowlerOver + 0.1f;
                                 setOver(0);
//                        strikerBalls++;
                                 penaltyBallCount = 1;
                                 if (striker.matches(player1)) {
                                     player1Balls++;
                                     strikerBalls = player1Balls;
                                     tvPlayer1Balls.setText(String.valueOf(player1Balls));
                                 }
                                 if (striker.matches(player2)) {
                                     player2Balls++;
                                     strikerBalls = player2Balls;
                                     tvPlayer2Balls.setText(String.valueOf(player2Balls));
                                 }

                                 if (strID == ps1ID) {
                                     ++p1CB;
                                 } else if (strID == ps2ID) {
                                     ++p2CB;
                                 }
                             } else if (batsball) {
                                 if (striker.matches(player1)) {
                                     player1Balls++;
                                     strikerBalls = player1Balls;
                                     tvPlayer1Balls.setText(String.valueOf(player1Balls));
                                 }
                                 if (striker.matches(player2)) {
                                     player2Balls++;
                                     strikerBalls = player2Balls;
                                     tvPlayer2Balls.setText(String.valueOf(player2Balls));
                                 }

                                 if (strID == ps1ID) {
                                     ++p1CB;
                                 } else if (strID == ps2ID) {
                                     ++p2CB;
                                 }
                             }
                         }*//*



                         if (penaltyType == 1)
                             savePenalty(penaltyType, penaltyRunTeam, true, battingTeamNo, ballCount, bowball, batsball);

                         else if (penaltyType == 2) {

                             if ((totalInnings == currentInnings) || SUPER_OVER)
                                 savePenalty(penaltyType, penaltyRunTeam, true, fieldingTeamNo, ballCount, bowball, batsball);

                             else
                                 savePenalty(penaltyType, penaltyRunTeam, false, fieldingTeamNo, ballCount, bowball, batsball);
                         }
                     }
*/


                    /*Log.e("Scoring", "playerOUT, b4 outToScoring striker : "+striker);
                    Log.e("Scoring", "playerOUT, b4 outToScoring strID : "+strID);
                    Log.e("Scoring", "playerOUT, b4 outToScoring strikerRuns : "+strikerRuns);
                    Log.e("Scoring", "playerOUT, b4 outToScoring strikerBalls : "+strikerBalls);
                    Log.e("Scoring", "playerOUT, b4 outToScoring strikerF4s : "+strikerF4s);
                    Log.e("Scoring", "playerOUT, b4 outToScoring strikerS6s : "+strikerS6s);

                    Log.e("Scoring", "playerOUT, b4 outToScoring nonStriker : "+nonStriker);
                    Log.e("Scoring", "playerOUT, b4 outToScoring nstrID : "+nstrID);
                    Log.e("Scoring", "playerOUT, b4 outToScoring nonStrikerRuns : "+nonStrikerRuns);
                    Log.e("Scoring", "playerOUT, b4 outToScoring nonStrikerBalls : "+nonStrikerBalls);
                    Log.e("Scoring", "playerOUT, b4 outToScoring nonStrikerF4s : "+nonStrikerF4s);
                    Log.e("Scoring", "playerOUT, b4 outToScoring nonStrikerS6s : "+nonStrikerS6s);

                    Log.e("Scoring", "outToScoring, b4 outToScoring player1 : "+player1);
                    Log.e("Scoring", "outToScoring, b4 outToScoring player1ID : "+player1ID);
                    Log.e("Scoring", "outToScoring, b4 outToScoring player1Runs : "+player1Runs);
                    Log.e("Scoring", "outToScoring, b4 outToScoring player1Balls : "+player1Balls);
                    Log.e("Scoring", "outToScoring, b4 outToScoring player1F4s : "+player1F4s);
                    Log.e("Scoring", "outToScoring, b4 outToScoring player1S6s : "+player1S6s);

                    Log.e("Scoring", "outToScoring, b4 outToScoring player2 : "+player2);
                    Log.e("Scoring", "outToScoring, b4 outToScoring player2ID : "+player2ID);
                    Log.e("Scoring", "outToScoring, b4 outToScoring player2Runs : "+player2Runs);
                    Log.e("Scoring", "outToScoring, b4 outToScoring player2Balls : "+player2Balls);
                    Log.e("Scoring", "outToScoring, b4 outToScoring player2F4s : "+player2F4s);
                    Log.e("Scoring", "outToScoring, b4 outToScoring player2S6s : "+player2S6s);*/



                    outToScoring();
                }
            }
        });
    }




    // Updated on 19/04/2021
    void outAlert(int i, String warning){//int i) {

        Log.d("OUTALERT", "i : " + i);
        /*// Added on 19/04/2021
        String warning = "";
        if (i == 1)
            warning = "Please select dismissed player";
        else if (i == 2)
            warning = "Please select fielder";
        else if (i == 3)
            warning = "Please enter required fields";*/


//        progress.dismiss();
        AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        alertDialog.setIcon(R.drawable.ball);
        alertDialog.setCancelable(false);
        alertDialog.setTitle(warning);
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();

                    }
                });
        alertDialog.show();
    }



    void noballAlert(String message) {

        AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        alertDialog.setIcon(R.drawable.ball);
        alertDialog.setCancelable(false);
        alertDialog.setTitle(message);
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
//                        runsOffBat = 0;
                    }
                });
        alertDialog.show();
    }






    // set the visibile of the OUT layouts
    void setVisibity(){


        ll_batsman.setVisibility(View.GONE);
        ll_fielder.setVisibility(View.GONE);
        ll_crossed.setVisibility(View.GONE);
        ll_extra.setVisibility(View.GONE);
        ll_extras.setVisibility(View.GONE);
        ll_extra_runs.setVisibility(View.GONE);
//        ll_penalty.setVisibility(View.GONE);
        ll_ballcount.setVisibility(View.GONE);
//        tv_out_penalty.setVisibility(View.GONE);    // Added on 18/03/2021
//        ll_nextStriker.setVisibility(View.GONE);

//        checkAllOut();

        // Added on 18/03/2021
        tv_outType.setVisibility(View.INVISIBLE);
        tv_outBatsman.setVisibility(View.INVISIBLE);
        tv_fielder.setVisibility(View.INVISIBLE);
        tv_extraType.setVisibility(View.INVISIBLE);
//        tv_out_penalty.setVisibility(View.INVISIBLE);
        tv_com.setVisibility(View.GONE);

    }


//    void checkAllOut(){
//
//        if (wicket >= player_count - 2)
//            ll_nextStriker.setVisibility(View.GONE);
//        else
//            ll_nextStriker.setVisibility(View.VISIBLE);
//    }




    void selectOutType(){

//        applySubstitution();
        resetOUT();
        Log.e("OUTT", "1,  tv_outType.getVisibility() : "+tv_outType.getVisibility());
        outtypeBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        outtypeBuilder.setIcon(R.drawable.ball);
        outtypeBuilder.setCancelable(false);
        outtypeBuilder.setTitle("Out Type");
        outtypeBuilder.setSingleChoiceItems(R.array.outTypeList, checkedItem , new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                switch (which){

                    case 0:
                        outType = 0;
                        break;

                    case 1:
                        outType = 1;
//                        crossed = true;
                        break;

                    case 2:
                        outType = 2;
                        break;

                    case 3:
                        outType = 3;
                        break;

                    case 4:
                        outType = 4;
                        break;

                    case 5:
                        outType = 5;
                        break;

                    case 6:
                        outType = 6;
                        break;

                    case 7:
                        outType = 7;
                        break;

                    case 8:
                        outType = 9;
                        break;

                    case 9:
                        outType = 10;
                        break;

                    case 10:
//                        outType = 11; Commented on 03/03/2021
                        outType = 12;
                        break;

                    /*case 11:
                        outType = 12;
                        break;*/

                    /*case 12:
                        outType = 12;
                        break;*/

                    default:
                        Toast.makeText(getApplicationContext(), "please Select one Out Type",
                                Toast.LENGTH_SHORT).show();
                        break;
                }
                Toast.makeText(getApplicationContext(), oType + " selected", Toast.LENGTH_SHORT).show();

            }

        });


        outtypeBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                Log.e("selectOutType", "ok,  out : "+out);
                Log.e("OUTT", "ok,  outType : "+outType);
                Log.e("OUTT", "ok,  tv_outType.getVisibility() : "+tv_outType.getVisibility());

//                ++wicket;
//                ballType = 3;

                if (outType == -1) {
                    Toast.makeText(UpdatedScoringActivity.this, "Select a out type", Toast.LENGTH_SHORT).show();
                    tv_outType.setVisibility(View.INVISIBLE);
                }

                else {

                    if (outType == 0) {

                        oType = "Bowled";
                        ll_batsman.setVisibility(View.VISIBLE);
                        tv_outBatsman.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                        et_out_run.setVisibility(View.GONE);
                        et_runsOffBat_out.setVisibility(View.GONE);
                        ll_fielder.setVisibility(View.GONE);
                        ll_crossed.setVisibility(View.GONE);
                        ll_extra.setVisibility(View.GONE);
                        ll_extras.setVisibility(View.GONE);
                        ll_extra_runs.setVisibility(View.GONE);
//                        ll_penalty.setVisibility(View.GONE);
                        ll_ballcount.setVisibility(View.GONE);
                        btn_out_batsman.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.GONE);
//                    Log.d("Bowled", "strkr : "+strkr);
                        tv_outBatsman.setText(striker);
                        dismissedPlayer = striker;
                        single = false;
                        multi = false;
                        lastWicket = false;
                    } else if (outType == 1) {

                        oType = "Caught";

                        ll_batsman.setVisibility(View.VISIBLE);
                        ll_fielder.setVisibility(View.VISIBLE);
                        ll_crossed.setVisibility(View.VISIBLE);
                        tv_outBatsman.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                        et_runsOffBat_out.setVisibility(View.GONE);
                        et_out_run.setVisibility(View.GONE);
                        btn_out_batsman.setVisibility(View.GONE);
                        ll_extra.setVisibility(View.GONE);
                        ll_extras.setVisibility(View.GONE);
                        ll_extra_runs.setVisibility(View.GONE);
//                        ll_penalty.setVisibility(View.GONE);
                        ll_ballcount.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.GONE);
                        tv_outBatsman.setText(striker);
                        tv_fielder.setText("");
                        dismissedPlayer = striker;
                        single = true;
                        multi = false;
                        lastWicket = false;
//                    dismissedList.add(striker);
//                    bowlerWicket++;
                    } else if (outType == 2) {

                        oType = "Run Out";
                        ll_batsman.setVisibility(View.VISIBLE);
                        ll_fielder.setVisibility(View.VISIBLE);
                        ll_crossed.setVisibility(View.VISIBLE);
//                    et_runsOffBat_out.setVisibility(View.VISIBLE);
                        btn_out_batsman.setVisibility(View.VISIBLE);
                        ll_extra.setVisibility(View.VISIBLE);
                        et_out_run.setVisibility(View.VISIBLE);
                        ll_extra_runs.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.GONE);
                        et_runsOffBat_out.setVisibility(View.GONE);
//                        ll_penalty.setVisibility(View.VISIBLE);
                        ll_ballcount.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                        ll_extras.setVisibility(View.GONE);
                        tv_outBatsman.setText("");
                        tv_fielder.setText("");
//                    et_out_run.setText("");
                        et_out_run.setText("");
                        single = false;
                        multi = true;
                        lastWicket = false;

                        int i = 0;

                        RealmResults<Player> results = realm.where(Player.class).
                                equalTo("matchid", matchid).
                                equalTo("team", fieldingTeamNo).
                                equalTo("retired_concussion", false).    // added on 27/02/2021
                                        equalTo("retired", false).findAll();
//                            equalTo("substitute", substitute).findAll(); COMMENTED ON 26/02/2021
//                                btn_batsman.setVisibility(View.VISIBLE);
                        results.load();
                        Log.d("scoring", "fielderss, results.size() : " + results.size());
                        fielderss = new String[results.size()];

                        for (Player player : results) {
                            fielderss[i] = player.getPlayerName();
                            checkedFielders[i] = false;
//
//                            Log.d("Scoring", "selectFielder, fielders[i] : " + fielders[i] +
//                                    ", checkedFielders[i] : " + checkedFielders[i] + ", i : " + i); //commented on 28-10-2022 jipin
                            ++i;
                        }
                        fieldersList.clear();
                    } else if (outType == 3) {

                        oType = "Stumped";
                        fielderPlayerID = "";
                        tv_fielder.setVisibility(View.VISIBLE); // Added on 18/03/2021
                        tv_fielder.setText(wicketkeeper);
                        ll_batsman.setVisibility(View.VISIBLE);
                        ll_fielder.setVisibility(View.VISIBLE);
                        ll_extra.setVisibility(View.VISIBLE);
                        et_out_run.setVisibility(View.GONE);
                        tv_outBatsman.setVisibility(View.VISIBLE);
                        ll_extras.setVisibility(View.GONE);
                        ll_extra_runs.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.GONE);
//                    ll_extra_runs.setVisibility(View.VISIBLE);
//                    ll_penalty.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                        et_runsOffBat_out.setVisibility(View.GONE);
                        btn_out_batsman.setVisibility(View.GONE);
                        ll_crossed.setVisibility(View.GONE);
                        ll_ballcount.setVisibility(View.GONE);
                        tv_outBatsman.setText(striker);
//                    tv_fielder.setText("");
                        dismissedPlayer = striker;
                        single = true;
                        multi = false;
                        lastWicket = false;
                        fieldersList.add(wicketkeeper);

                        Player fielder = realm.where(Player.class).
                                equalTo("matchid", matchid).
                                equalTo("team", fieldingTeamNo).
                                equalTo("retired", false).
                                equalTo("playerName", wicketkeeper).findFirst();
                        if (fielder != null)
                            fielderPlayerID = String.valueOf(fielder.getPlayerID());
                        if (fielder.getPlayerID() == wk_id)
                            wk_flag = true;
                        else
                            wk_flag = false;
//                    dismissedList.add(striker);
//                    bowlerWicket++;
                    } else if (outType == 4) {

                        oType = "LBW";
                        ll_batsman.setVisibility(View.VISIBLE);
                        tv_outBatsman.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                        et_out_run.setVisibility(View.GONE);
                        btn_out_batsman.setVisibility(View.GONE);
                        ll_fielder.setVisibility(View.GONE);
                        ll_crossed.setVisibility(View.GONE);
                        ll_extra.setVisibility(View.GONE);
                        ll_extras.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.GONE);
                        et_runsOffBat_out.setVisibility(View.GONE);
                        ll_extra_runs.setVisibility(View.GONE);
//                        ll_penalty.setVisibility(View.GONE);
                        ll_ballcount.setVisibility(View.GONE);
                        tv_outBatsman.setText(striker);
                        dismissedPlayer = striker;
                        single = false;
                        multi = false;
                        lastWicket = false;
//                    dismissedList.add(striker);
//                    bowlerWicket++;
                    } else if (outType == 5) {

                        oType = "Hit Wicket";
                        ll_batsman.setVisibility(View.VISIBLE);
                        ll_extra.setVisibility(View.VISIBLE);
                        tv_outBatsman.setVisibility(View.VISIBLE);
                        ll_extra_runs.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.GONE);
                        et_runsOffBat_out.setVisibility(View.GONE);
//                        ll_penalty.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                        ll_extras.setVisibility(View.GONE);
                        btn_out_batsman.setVisibility(View.GONE);
                        ll_fielder.setVisibility(View.GONE);
                        ll_crossed.setVisibility(View.GONE);
                        ll_ballcount.setVisibility(View.GONE);
                        et_out_run.setVisibility(View.GONE);
                        tv_outBatsman.setText(striker);
                        dismissedPlayer = striker;
                        single = false;
                        multi = false;
                        lastWicket = false;
//                    dismissedList.add(striker);
//                    bowlerWicket++;
                    } else if (outType == 6) {

                        oType = "Hit the Ball Twice";
                        ll_batsman.setVisibility(View.VISIBLE);
                        ll_extra.setVisibility(View.VISIBLE);
                        et_out_run.setVisibility(View.GONE);
                        ll_extra_runs.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.GONE);
                        et_runsOffBat_out.setVisibility(View.GONE);
//                        ll_penalty.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                        tv_outBatsman.setVisibility(View.VISIBLE);
                        ll_extras.setVisibility(View.GONE);
                        btn_out_batsman.setVisibility(View.GONE);
                        ll_fielder.setVisibility(View.GONE);
                        ll_crossed.setVisibility(View.GONE);
                        ll_ballcount.setVisibility(View.GONE);
                        tv_outBatsman.setText(striker);
                        dismissedPlayer = striker;
                        single = false;
                        multi = false;
                        lastWicket = false;
//                    dismissedList.add(striker);
                    } else if (outType == 7) {

                        oType = "Obstructing the Field";
                        ll_batsman.setVisibility(View.VISIBLE);
                        ll_crossed.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                        et_out_run.setVisibility(View.VISIBLE);
                        btn_out_batsman.setVisibility(View.VISIBLE);
                        ll_fielder.setVisibility(View.GONE);
                        ll_extra.setVisibility(View.VISIBLE);
                        ll_extras.setVisibility(View.GONE);
                        ll_extra_runs.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.GONE);
                        et_runsOffBat_out.setVisibility(View.GONE);
//                        ll_penalty.setVisibility(View.VISIBLE);
                        ll_ballcount.setVisibility(View.GONE);
                        tv_outBatsman.setText("");
                        et_out_run.setText("");
                        single = false;
                        multi = false;
                        lastWicket = false;
                    }

                /*if (outType == 8){

                    oType = "Handled the Ball";
                    ll_batsman.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                    tv_outBatsman.setVisibility(View.VISIBLE);
                    btn_out_batsman.setVisibility(View.GONE);
                    ll_fielder.setVisibility(View.GONE);
                    ll_crossed.setVisibility(View.GONE);
                    ll_extra.setVisibility(View.GONE);
                    ll_extras.setVisibility(View.GONE);
                    ll_extra_runs.setVisibility(View.GONE);
                    ll_penalty.setVisibility(View.GONE);
                    tv_outBatsman.setText(striker);
                    dismissedPlayer = striker;
//                    dismissedList.add(striker);
                }*/

                    else if (outType == 9) {

                        oType = "Timed out";
                        if (strikerBalls > 0 && nonStrikerBalls > 0) {
                            oType = "";
                            outType = -1;
                            displayError("Timed out not possible");
                        } else {
                            ll_batsman.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                            et_out_run.setVisibility(View.GONE);
                            tv_outBatsman.setVisibility(View.VISIBLE);
                            ll_extras.setVisibility(View.GONE);
                            btn_out_batsman.setVisibility(View.GONE);
                            ll_fielder.setVisibility(View.GONE);
                            ll_crossed.setVisibility(View.GONE);
                            ll_extra.setVisibility(View.GONE);
                            ll_extras.setVisibility(View.GONE);
                            ll_extra_runs.setVisibility(View.GONE);
//                            ll_penalty.setVisibility(View.GONE);
                            et_extra_run_out.setVisibility(View.GONE);
                            ll_ballcount.setVisibility(View.GONE);
                            et_runsOffBat_out.setVisibility(View.GONE);
                            if (striker.matches(newBatsman)) {
                                if (strikerBalls == 0) {
                                    dismissedPlayer = striker;
                                    tv_outBatsman.setText(striker);
                                }
                            } else if (nonStriker.matches(newBatsman)) {
                                if (nonStrikerBalls == 0) {
                                    dismissedPlayer = nonStriker;
                                    tv_outBatsman.setText(nonStriker);
                                }
                            }
                            single = false;
                            multi = false;
                            lastWicket = false;
                        }
                    } else if (outType == 10) {

                        oType = "Retired Hurt";
                        retired = true;
                        ll_batsman.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                        et_out_run.setVisibility(View.GONE);
                        btn_out_batsman.setVisibility(View.VISIBLE);
                        ll_fielder.setVisibility(View.GONE);
                        ll_crossed.setVisibility(View.GONE);
                        ll_extra.setVisibility(View.GONE);
                        ll_extras.setVisibility(View.GONE);
                        ll_ballcount.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.GONE);
                        et_runsOffBat_out.setVisibility(View.GONE);
//                    ll_extra_runs.setVisibility(View.GONE);
//                    ll_penalty.setVisibility(View.GONE);
                        tv_outBatsman.setText("");
                        single = false;
                        multi = false;

                        // added on 01/01/2021
                        if (wicket == (player_count - 2)) {
                            lastWicket = true;
                        }
                    } else if (outType == 11) {

                        oType = "Absent";
//                    retired = true;
                        ll_batsman.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                        btn_out_batsman.setVisibility(View.VISIBLE);
                        et_out_run.setVisibility(View.GONE);
                        ll_fielder.setVisibility(View.GONE);
                        ll_crossed.setVisibility(View.GONE);
                        ll_extra.setVisibility(View.GONE);
                        ll_extras.setVisibility(View.GONE);
                        ll_extra_runs.setVisibility(View.GONE);
//                        ll_penalty.setVisibility(View.GONE);
                        ll_ballcount.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.GONE);
                        et_runsOffBat_out.setVisibility(View.GONE);
                        tv_outBatsman.setText("");
                        single = false;
                        multi = false;
                        lastWicket = false;
                    } else if (outType == 12) {

                        oType = "Retired Out";
//                    retired = true;
                        ll_batsman.setVisibility(View.VISIBLE);
//                    ll_nextStriker.setVisibility(View.GONE);
                        btn_out_batsman.setVisibility(View.VISIBLE);
                        et_out_run.setVisibility(View.GONE);
                        ll_fielder.setVisibility(View.GONE);
                        ll_crossed.setVisibility(View.GONE);
                        ll_extra.setVisibility(View.GONE);
                        ll_extras.setVisibility(View.GONE);
                        ll_extra_runs.setVisibility(View.GONE);
//                        ll_penalty.setVisibility(View.GONE);
                        ll_ballcount.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.GONE);
                        et_runsOffBat_out.setVisibility(View.GONE);
                        tv_outBatsman.setText("");
                        single = false;
                        multi = false;
                        lastWicket = false;
                    }


//                checkAllOut();


//                if (out)
                    tv_outType.setVisibility(View.VISIBLE); // Added on 18/03/2021
                    tv_outType.setText(oType);
//                tvTotalWicket.setText(String.valueOf(wicket));
//                Toast.makeText(getApplicationContext(), type + " confirmed", Toast.LENGTH_SHORT).show();



                    // Added on 09/09/2021
                    Log.d("US", "playerOUT, et_out_run.getVisibility() = " + (et_out_run.getVisibility()));
                    Log.d("US", "playerOUT, et_runsOffBat_out.getVisibility() = " + (et_runsOffBat_out.getVisibility()));
                    Log.d("US", "playerOUT, et_extra_run_out.getVisibility() = " + (et_extra_run_out.getVisibility()));

                    // == till here
                }

            }
        });

        outtypeBuilder.setNegativeButton("CANCEL", null);

        // create and show the alert dialog
        AlertDialog dialog = outtypeBuilder.create();
        dialog.show();


    }


    void selectDismissedPlayer(){

//        if (outType != 9) { // Added on 06/03/2021

        String[] players = {player1, player2};

        selectDismissedBuilder = new AlertDialog.Builder(this);
        selectDismissedBuilder.setIcon(R.drawable.ball);
        selectDismissedBuilder.setCancelable(false);
        selectDismissedBuilder.setTitle("Select Dismissed player");
        selectDismissedBuilder.setSingleChoiceItems(players, checkedItem, new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int position) {

                final String s = Arrays.asList(players).get(position);
                dismissedPlayer = s;
                tv_outBatsman.setVisibility(View.VISIBLE); // Added on 18/03/2021
                tv_outBatsman.setText(dismissedPlayer);
            }

        });
        selectDismissedBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {

                Log.e("selectDismissedPlayer", "ok,  out : " + out);
//                    dialog.dismiss();
                if (dismissedPlayer == null || dismissedPlayer.matches(""))
                    Toast.makeText(UpdatedScoringActivity.this, "Select dismissed player", Toast.LENGTH_SHORT).show();
                else
                    dialog.dismiss();
            }
        });
        selectDismissedBuilder.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                dismissedPlayer = "";
                tv_outBatsman.setVisibility(View.INVISIBLE); // Added on 18/03/2021
                tv_outBatsman.setText(null);
            }
        });
        AlertDialog alert = selectDismissedBuilder.create();
        alert.show();

        //=========== Added on 06/03/2021 ====================
      /*  }

        else {


//            selectFielder();

            RealmResults<Batsman> results = realm.where(Batsman.class).
                    equalTo("matchid", matchid).
                    equalTo("innings", currentInnings).
                    equalTo("toBeBatted", true).
                    equalTo("out", false).
                    equalTo("playing", false).
                    equalTo("retired", false).
                    findAll();

            if (results.size() > 0) {

                ArrayList<Integer> playerIDs = new ArrayList<Integer>();

                final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(ScoringActivity.this,
                        android.R.layout.select_dialog_singlechoice);

                for (Batsman batsman : results) {
                    Player player = realm.where(Player.class).
                            equalTo("matchid", matchid).
                            equalTo("playerID", batsman.getBatsman_pID()).findFirst();
                    if (player != null) {
                        arrayAdapter.add(player.getPlayerName());
                        playerIDs.add(batsman.getBatsman_pID());
                    }
                }

                AlertDialog.Builder dismissedBuilder = new AlertDialog.Builder(ScoringActivity.this);
                dismissedBuilder.setIcon(R.drawable.ball);
                dismissedBuilder.setCancelable(false);
                dismissedBuilder.setTitle("Select Dismissed player");
                dismissedBuilder.setNegativeButton("cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        dismissedPlayer = "";
                        disPID = 0;
                        tv_outBatsman.setText("");
                    }
                });
                dismissedBuilder.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        String strName = arrayAdapter.getItem(which);
                        int id = playerIDs.get(which);
                        dismissedPlayer = strName;
//                        dismissedPlayrID = id;
                        disPID = id;
                        tv_outBatsman.setText(dismissedPlayer);


                       *//* AlertDialog.Builder builderInner = new AlertDialog.Builder(ScoringActivity.this);
                        builderInner.setIcon(R.drawable.ball);
                        builderInner.setCancelable(false);
                        dialog.dismiss();
                        builderInner.setMessage(strName);
                        builderInner.setTitle("Selected fielder is ");

                        builderInner.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                Log.e("selectFielder", "ok,  out : " + out);
                                fielderPlayer = strName;
                                fieldersList.add(fielderPlayer);
                                tv_fielder.setText(fielderPlayer);
                                dialog.dismiss();


                                Player fielder = realm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", fieldingTeamNo).
                                        equalTo("retired", false).
                                        equalTo("retired_concussion", false).    // added on 27/02/2021
                                        equalTo("playerName", fielderPlayer).findFirst();
                                if (fielder != null)
                                    fielderPlayerID = String.valueOf(fielder.getPlayerID());

                            }
                        });
                        builderInner.show();*//*
                    }
                });

//                dismissedBuilder.setNegativeButton("Cancel", null);

                dismissedBuilder.show();
            }
            else {
                displayError("No batsman left");
            }
        }

        // ========= till here =====================*/
    }




    void resetOUT() {

        ll_extras.setVisibility(View.GONE);
        tv_outBatsman.setText("");
        ll_fielder.setVisibility(View.GONE);
        ll_ballcount.setVisibility(View.GONE);
//        et_out_run.setVisibility(View.VISIBLE);   Commented on 09/09/2021
        et_out_run.setVisibility(View.GONE);
//        et_out_run.setText("");   Commented on 09/09/2021

        // Added on 18/03/2021
        tv_outType.setVisibility(View.INVISIBLE);
        tv_outBatsman.setVisibility(View.INVISIBLE);
        tv_fielder.setVisibility(View.INVISIBLE);
        tv_extraType.setVisibility(View.INVISIBLE);
//        tv_out_penalty.setVisibility(View.INVISIBLE);
        outType = -1;
    }





    void selectFielder(){


        int i = 0;


//        applySubstitution();
        Log.d("selectFielder", " matchid :"+matchid);
        Log.d("selectFielder", " matchID :"+matchID);


//        int i = 0;
        final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(UpdatedScoringActivity.this,
                android.R.layout.select_dialog_singlechoice);
        Log.d("Test", "Inside Select Fielder");




        RealmResults<Player> results = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", fieldingTeamNo).
                equalTo("retired_concussion", false).
                equalTo("retired", false).findAll();
//                equalTo("substitute", substitute).findAll();

        if (outType == 1 || outType == 2 || outType == 3){

            if (SUPER_OVER){

                results = realm.where(Player.class).
                        equalTo("matchid", matchid).
                        equalTo("team", fieldingTeamNo).
                        equalTo("retired", false).
                        equalTo("substitute", false).findAll();
            }

            else {

                results = realm.where(Player.class).
                        equalTo("matchid", matchid).
                        equalTo("team", fieldingTeamNo).
                        equalTo("retired", false).findAll();
            }
        }

        Log.d("Scoring", "selectFielder, fielders  : "+results);



        results.load();
//        if (single) {
//
//                //fielders.add(player.getPlayerName());
////            Toast.makeText(getApplicationContext(), "player : "+player.getPlayerName(), Toast.LENGTH_SHORT).show();
////            Log.d("Test", "player "+ player.getPlayerName());
////            fielders[i] = player.getPlayerName();
////            Log.d("Test", "array of player "+ fielders[i]);
////            i++;
////            checkedFielders.add(false);
//
//
//        }


//        else if (multi) {
//
//
//
//        }

        Log.d("Scoring", "selectFielder, single : "+single+", multi : "+multi);

//        Log.d("Scoring", "selectFielder, checkedFielders  : "+checkedFielders);
//        Log.d("Scoring", "selectFielder, fieldersArrayadapter  : "+arrayAdapter);

        if (single) {


            for (Player player : results) {
                arrayAdapter.add(player.getPlayerName());
            }

            fielderBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
            fielderBuilder.setIcon(R.drawable.ball);
            fielderBuilder.setCancelable(false);
            //Toast.makeText(getApplicationContext(), "inside builder", Toast.LENGTH_SHORT).show();
//        Log.d("TAG", "AlertDialog.Builder created");
            fielderBuilder.setTitle("Select Fielder");
//        Log.d("Test", "Title created");
            fielderBuilder.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            });
            fielderBuilder.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    String strName = arrayAdapter.getItem(which);
//                dialog.dismiss();
                    AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
                    builderInner.setIcon(R.drawable.ball);
                    builderInner.setCancelable(false);
                    dialog.dismiss();
                    builderInner.setMessage(strName);
                    builderInner.setTitle("Selected fielder is ");

                    builderInner.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Log.e("selectFielder", "ok,  out : " + out);
                            fielderPlayer = strName;
                            fieldersList.add(fielderPlayer);
                            tv_fielder.setVisibility(View.VISIBLE); // Added on 18/03/2021
                            tv_fielder.setText(fielderPlayer);
                            dialog.dismiss();


                            Player fielder = realm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", fieldingTeamNo).
                                    equalTo("retired", false).
                                    equalTo("retired_concussion", false).    // added on 27/02/2021
                                            equalTo("playerName", fielderPlayer).findFirst();
                            if (fielder != null) {
                                fielderPlayerID = String.valueOf(fielder.getPlayerID());
                                if (fielder.getPlayerID() == wk_id)
                                    wk_flag = true;
                                else
                                    wk_flag = false;
                            }

                        }
                    });
//
                    builderInner.show();
//                dialog.dismiss();
                }
            });

//            fielderBuilder.setNegativeButton("Cancel", null);


            fielderBuilder.show();
        }

        else if (multi) {

            t = 0;
            Log.d("Scoring", "selectFielder, t : " + t);
            Log.d("Scoring", "selectFielder, fielderss.length : " + fielderss.length);
            for (int x = 0; x < fielderss.length ; x++)
                Log.d("Scoring", "selectFielder, fielderss : " + fielderss[x]);

            /*for (Player player : results) {
                fielderss[i] = player.getPlayerName();
                checkedFielders[i] = false;

                Log.d("Scoring", "selectFielder, fielders[i] : "+fielders[i]+
                        ", checkedFielders[i] : "+checkedFielders[i]+", i : "+i);
                ++i;
            }

            fieldersList.clear();*/

            fielderBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
            fielderBuilder.setIcon(R.drawable.ball);
            fielderBuilder.setCancelable(false);
            fielderBuilder.setTitle("Select Fielder");
            fielderBuilder.setMultiChoiceItems(fielderss, checkedFielders,
                    new DialogInterface.OnMultiChoiceClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which, boolean isChecked) {

//                    checkedFielders

                  /*  for (int j = 0; j < checkedFielders.length; j++) {

                        boolean checked = checkedFielders[j];
                        if (checked) {

                        }
                    }*/

                        }
                    });

            fielderBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {

                    Log.d("FIELDER", "1, checkedFielders.length = " + checkedFielders.length);
                    Log.d("FIELDER", "2, checkedFielders = " + checkedFielders.toString());

                    /*if (checkedFielders.length == 0) {

                        Toast.makeText(ScoringActivity.this, "Select Fielder", Toast.LENGTH_SHORT).show();
                        tv_fielder.setVisibility(View.INVISIBLE);
                    }

                    else {*/

                    tv_fielder.setText("");
                    tv_fielder.setVisibility(View.VISIBLE); // Added on 18/03/2021

                    for (int j = 0; j < checkedFielders.length; j++) {
                        boolean checked = checkedFielders[j];
                        if (checked) {
                            fieldersList.add(fielderss[j]);
                            Log.d("fielderPlayerID", " t : " + t + " , : " + fielderPlayerID);

                           /* if (fieldersList.size() == 0)
                                tv_fielder.setText(fielderss[j]);

                            else if (fieldersList.size() > 0)
                                tv_fielder.setText(tv_fielder.getText() + ", "+fielderss[j]);
//                            tv.setText(tv.getText() + colorsList.get(i) + "\n");*/

                            if (t == 0) {
                                tv_fielder.setText(fielderss[j]);
                                /*fielderPlayerID =  String.valueOf(realm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", fieldingTeamNo).
                                        equalTo("playerName", fieldersList.get(t)).findFirst().getPlayerID());*/

                                Player fielder = realm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", fieldingTeamNo).
                                        equalTo("retired", false).
                                        equalTo("playerName", fieldersList.get(t)).findFirst();
                                if (fielder != null)
                                    fielderPlayerID = "" + fielder.getPlayerID();

                            } else if (t > 0) {
                                tv_fielder.setText(tv_fielder.getText() + ", " + fielderss[j]);
                                /*fielderPlayerID = fielderPlayerID + ", " + realm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", fieldingTeamNo).
                                        equalTo("playerName", fieldersList.get(t)).findFirst().getPlayerID();*/

                                Player fielder = realm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", fieldingTeamNo).
                                        equalTo("retired", false).
                                        equalTo("playerName", fieldersList.get(t)).findFirst();
                                if (fielder != null) {
                                    fielderPlayerID = fielderPlayerID + ", " + fielder.getPlayerID();
                                }
                            }


                            ++t;
                        }
                    }
                    t = 0;
                    Log.d("Scoring", "selectFielder, fieldersList  : " + fieldersList);
                    Log.d("fielderList", "fielder, fieldersList : " + fieldersList +
                            ", fielderPlayerID : " + fielderPlayerID);
//                    }
                }
            });

            fielderBuilder.setNegativeButton("CANCEL", null);
            fielderBuilder.show();
        }


//        else
//            syncBatsmann(matchid, matchID, dismissedPlayer, bowler, null, true);
//        AlertDialog dialog = fielderBuilder.create();
//        dialog.show();


    }



    void checkViewExtra(){

        if (ve_flag == 0){


            ve_flag = 1;
            ll_extras.setVisibility(View.VISIBLE);
//            et_out_run.setVisibility(View.GONE);
            ll_extra_runs.setVisibility(View.GONE);
            et_extra_run_out.setVisibility(View.GONE);
            et_runsOffBat_out.setVisibility(View.GONE);
//            ll_penalty.setVisibility(View.VISIBLE);
            tv_extraType.setVisibility(View.INVISIBLE); // Added on 18/03/2021
            Log.e("checkViewExtra", "display extras");
        }
        else {
            Log.e("checkViewExtra", "hide extras");

            ve_flag = 0;
            ll_extras.setVisibility(View.GONE);
            tv_extraType.setVisibility(View.INVISIBLE); // Added on 18/03/2021
//            eType = "";

        }
    }






    void checkOutExtraType() {

        ll_extra_runs.setVisibility(View.GONE);

        runsOffBat = 0;
        outExtraTypeBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        outExtraTypeBuilder.setIcon(R.drawable.ball);
        outExtraTypeBuilder.setCancelable(false);
        outExtraTypeBuilder.setTitle("Extra Type");
        outExtraTypeBuilder.setSingleChoiceItems(R.array.extraTypeList, checkedItem, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

//                Log.d("test", "inside override method");
                switch (which) {

                    case 0:

//                        extras = true;
//                        outextras = true;
                        bye = true;
                        lb = false;
                        wide = false;
                        noBall = false;
                        byeNB = false;
                        lbNB = false;
                        penalty = false;
                        ll_extra_runs.setVisibility(View.VISIBLE);
                        et_extra_run_out.setVisibility(View.VISIBLE);
                        et_runsOffBat_out.setVisibility(View.INVISIBLE);
                        break;

                    case 1:

//                        extras = true;
//                        outextras = true;
                        bye = false;
                        lb = true;
                        wide = false;
                        noBall = false;
                        byeNB = false;
                        lbNB = false;
                        penalty = false;
                        ll_extra_runs.setVisibility(View.VISIBLE);
                        et_extra_run_out.setVisibility(View.VISIBLE);
                        et_runsOffBat_out.setVisibility(View.INVISIBLE);
                        break;

                    case 2:

//                        outextras = true;
//                        extras = true;
                        bye = false;
                        lb = false;
                        wide = true;
                        noBall = false;
                        byeNB = false;
                        lbNB = false;
                        penalty = false;
                        ll_extra_runs.setVisibility(View.VISIBLE);
                        et_extra_run_out.setVisibility(View.VISIBLE);
                        et_runsOffBat_out.setVisibility(View.INVISIBLE);
                        break;

                    case 3:

//                        outextras = true;
//                        extras = true;
                        bye = false;
                        lb = false;
                        wide = false;
                        noBall = true;
                        byeNB = false;
                        lbNB = false;
                        penalty = false;
                        ll_extra_runs.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.GONE);
                        et_runsOffBat_out.setVisibility(View.GONE);
                        break;

                    default:
                        Toast.makeText(getApplicationContext(), "please Select an extra",
                                Toast.LENGTH_SHORT).show();
                        break;

                }
            }
        });

        outExtraTypeBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                Log.e("checkOutExtraType", "ok,  out : "+out);
                Log.e("checkOutExtraType", "ok,  bye : "+bye + ", lb : " + lb + ", wide " +wide +
                        ", noball : " +noBall + ", byeNB : " + byeNB + ", lbNB : " + lbNB);

                Log.d("b4 setExtra", "3 ballType : " + ballType);
                Log.d("b4 setExtra", "3 extras : " + extras + ",extraType : " + extraType +
                        ", extra : " + extra + ", extraRun : " + extraRun + ", runsOffBat : "+ runsOffBat);
                Log.d("b4 setExtra", "3 out : " + out + ", outType : " + outType + ", out_run : " + out_run);
                Log.d("b4 setExtra", "3 strID : " + strID + ", strikerRuns : " + strikerRuns +
                        ", strikerBalls : " + strikerBalls);
                Log.d("b4 setExtra", "3 nstrID : " + nstrID + ", nonStrikerRuns : " + nonStrikerRuns +
                        ", nonStrikerBalls : " + nonStrikerBalls);
                Log.d("b4 setExtra", "3 player1ID : " + player1ID + ", player1Runs : " + player1Runs +
                        ", player1Balls : " + player1Balls);
                Log.d("b4 setExtra", "3 player2ID : " + player2ID + ", player2Runs : " + player2Runs +
                        ", player2Balls : " + player2Balls);
                Log.d("b4 setExtra", "3 psRuns : " + psRuns + ", psBalls : " + psBalls + ", psOver : " + psOver);
                Log.d("b4 setExtra", "3 ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
                Log.d("b4 setExtra", "3 ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);
                Log.d("b4 setExtra", "3 bye : " + bye + ", lb : " + lb + ", wide : " + wide);
                Log.d("b4 setExtra", "3 noBall : " + noBall + ", eType : " + eType);


                if (bye){

                    eType = "Byes";

                    if (outType == 3 || outType == 5 || outType == 6) {
                        message = oType + " is not a valid dismissal for Byes";
                        displayError(message);
                    }

                    else {


                        et_runsOffBat_out.setVisibility(View.INVISIBLE);
                        et_extra_run_out.setVisibility(View.VISIBLE);
                        extraType = 0;
//                    ballType = 9;

                        if (/*outextras) {*/extras) {
                            if (strID == player1ID) {
                                ++player1Balls;
                                strikerBalls = player1Balls;
                            }

                            if (strID == player2ID) {
                                ++player2Balls;
                                strikerBalls = player2Balls;
                            }

                            if (strID == ps1ID) {
                                ++p1CB;
                            } else if (strID == ps2ID) {
                                ++p2CB;
                            }
                        }
                    }

                }

                else if (lb){

                    eType = "Leg Byes";

                    if (outType == 3 || outType == 5 || outType == 6) {
                        message = oType + " is not a valid dismissal for Legbyes";
                        displayError(message);
                    }

                    else {

                        et_runsOffBat_out.setVisibility(View.INVISIBLE);
                        et_extra_run_out.setVisibility(View.VISIBLE);
                        extraType = 1;

                        if (/*outextras) {*/extras) {
                            if (strID == player1ID) {
                                ++player1Balls;
                                strikerBalls = player1Balls;
                            }
                            if (strID == player2ID) {
                                ++player2Balls;
                                strikerBalls = player2Balls;
                            }

                            if (strID == ps1ID) {
                                ++p1CB;
                            } else if (strID == ps2ID) {
                                ++p2CB;
                            }
                        }
                    }
                }

                else if (wide){

                    eType = "Wide";

                    if (outType == 6) {
                        message = oType + " is not a valid dismissal for Wide";
                        displayError(message);
                    }

                    else {
                        message = "";
                        if (outType == 3) {
                            ll_extra_runs.setVisibility(View.GONE);
                            et_runsOffBat_out.setVisibility(View.GONE);
                            et_extra_run_out.setVisibility(View.GONE);
                        }
                        else if (outType == 5) {
                            ll_extra_runs.setVisibility(View.GONE);
                            et_runsOffBat_out.setVisibility(View.GONE);
                            et_extra_run_out.setVisibility(View.GONE);
                        }
                        else {
                            et_runsOffBat_out.setVisibility(View.INVISIBLE);
                            et_extra_run_out.setVisibility(View.VISIBLE);
                        }

                        extraType = 4;
                    }

                }

                else if (noBall){

                    eType = "Noball";

                    if (outType == 3 || outType == 5) {
                        message = oType + " is not a valid dismissal for Noball";
                        displayError(message);
                    }

                    else {
                        message = "";
                        setNoball();
                    }

                }

                if (extras) {
                    tvExtrasType.setVisibility(View.VISIBLE);
                    tvExtrasType.setText(eType);
                }

                else if (out) {
                    tv_extraType.setVisibility(View.VISIBLE);
                    tv_extraType.setText(eType);
                    ll_extras.setVisibility(View.VISIBLE);
                    // Added on 09/09/2021
                    if (wide)
                        checkExtra(wideRun);
                }

                if (extras) {
                    if (bye || lb) {

                        ++ball;
                        ++totalBalls;
                        ++psBalls;
                        ++psTBalls;     //Added on 28/07/2021
                        if (psBalls >= ballsPerOver) {
                            ++psOver;
                            if (psBalls == ballsPerOver)
                                psBalls = 0;
                            else if (psBalls == (ballsPerOver + 1))
                                psBalls = 1;
                        }

                        currentOver = currentOver + 0.1f;

//                        remainingOver = setRemainingOver(remainingOver);

                        if (currentInnings > 1) {// && remainingRuns > 0){
//                            remainingOver = remainingOver - 0.1f;
                            float temp_ro = (remainingOver - (int)remainingOver);
                            if (temp_ro > .1f && temp_ro <= (.1f * ballsPerOver))
                                remainingOver = remainingOver - .1f;
                            else if ((int)(temp_ro * 10) == 0) {
                                remainingOver = remainingOver - 1;
                                remainingOver = remainingOver + (.1f * (ballsPerOver - 1));
                            }
                            --remainingBalls;

                        }
                    }
                }



                Log.d("b4 setExtra", "4 ballType : " + ballType);
                Log.d("b4 setExtra", "4 extras : " + extras + ",extraType : " + extraType +
                        ", extra : " + extra + ", extraRun : " + extraRun + ", runsOffBat : "+ runsOffBat);
                Log.d("b4 setExtra", "4 out : " + out + ", outType : " + outType + ", out_run : " + out_run);
                Log.d("b4 setExtra", "4 strID : " + strID + ", strikerRuns : " + strikerRuns + ", strikerBalls : " + strikerBalls);
                Log.d("b4 setExtra", "4 nstrID : " + nstrID + ", nonStrikerRuns : " + nonStrikerRuns +
                        ", nonStrikerBalls : " + nonStrikerBalls);
                Log.d("b4 setExtra", "4 player1ID : " + player1ID + ", player1Runs : " + player1Runs +
                        ", player1Balls : " + player1Balls);
                Log.d("b4 setExtra", "4 player2ID : " + player2ID + ", player2Runs : " + player2Runs +
                        ", player2Balls : " + player2Balls);
                Log.d("b4 setExtra", "4 psRuns : " + psRuns + ", psBalls : " + psBalls + ", psOver : " + psOver);
                Log.d("b4 setExtra", "4 ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
                Log.d("b4 setExtra", "4 ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);

            }
        });

        outExtraTypeBuilder.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                dialog.dismiss();


                et_runsOffBat_out.setVisibility(View.GONE);
                et_extra_run_out.setVisibility(View.GONE);

            }
        });

        // create and show the alert dialog

        AlertDialog dialog = outExtraTypeBuilder.create();
        dialog.show();

    }




    void editOutCommentary(){


        outComBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        outComBuilder.setIcon(R.drawable.ball);
        outComBuilder.setCancelable(false);
        outComBuilder.setTitle("Enter the commentary");

        final EditText input = new EditText(this);

        input.setInputType(InputType.TYPE_CLASS_TEXT);
        outComBuilder.setView(input);
        input.setText(commentary);
//        Log.d("Test", "inside setCommentry()");
        outComBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {

            //            @Override
            public void onClick(DialogInterface dialog, int which) {

                if (input.getText().toString().equals("") || input.getText().toString() == null){
                    Toast.makeText(getApplicationContext(),
                            "Please enter commentary", Toast.LENGTH_SHORT).show();
                }

                else {
                    commentary = input.getText().toString();
//                    Log.d("Test", "BuilderText : " + commentary);


                    if (!commentary.matches("")){
                        tv_com.setVisibility(View.VISIBLE); // Added on 18/03/2021
                        tv_com.setText(commentary);

                    }
                    else {
                        Log.d("Test","buildertext = null");
                    }

                }
            }
        });

        outComBuilder.setNegativeButton("CANCEL", null);
        AlertDialog alert = outComBuilder.create();
        alert.show();

    }





    void outToScoring() {
        Log.d("b4 setExtra", "1 out_ball_not_count : " + out_ball_not_count);
        Log.d("b4 setExtra", "1 ballType : " + ballType);
        Log.d("b4 setExtra", "1 extras : " + extras + ",extraType : " + extraType +
                ", extra : " + extra + ", extraRun : " + extraRun + ", runsOffBat : "+ runsOffBat);
        Log.d("b4 setExtra", "1 out : " + out + ", outType : " + outType + ", out_run : " + out_run);
        Log.d("b4 setExtra", "1 strID : " + strID + ", strikerRuns : " + strikerRuns + ", strikerBalls : " + strikerBalls);
        Log.d("b4 setExtra", "1 nstrID : " + nstrID + ", nonStrikerRuns : " + nonStrikerRuns +
                ", nonStrikerBalls : " + nonStrikerBalls);
        Log.d("b4 setExtra", "1 player1ID : " + player1ID + ", player1Runs : " + player1Runs +
                ", player1Balls : " + player1Balls);
        Log.d("b4 setExtra", "1 player2ID : " + player2ID + ", player2Runs : " + player2Runs +
                ", player2Balls : " + player2Balls);
        Log.d("b4 setExtra", "1 psRuns : " + psRuns + ", psBalls : " + psBalls + ", psOver : " + psOver);
        Log.d("b4 setExtra", "1 ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
        Log.d("b4 setExtra", "1 ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);

        Log.e("Scoring", "outToScoring, dismissedList : "+dismissedList);
        Log.e("Scoring", "outToScoring, retiredList : "+retiredList);

       /* Log.e("Scoring", "outToScoring, starting striker : "+striker);
        Log.e("Scoring", "outToScoring, starting strID : "+strID);
        Log.e("Scoring", "outToScoring, starting strikerRuns : "+strikerRuns);
        Log.e("Scoring", "outToScoring, starting strikerBalls : "+strikerBalls);
        Log.e("Scoring", "outToScoring, starting strikerF4s : "+strikerF4s);
        Log.e("Scoring", "outToScoring, starting strikerS6s : "+strikerS6s);

        Log.e("Scoring", "outToScoring, starting nonStriker : "+nonStriker);
        Log.e("Scoring", "outToScoring, starting nstrID : "+nstrID);
        Log.e("Scoring", "outToScoring, starting nonStrikerRuns : "+nonStrikerRuns);
        Log.e("Scoring", "outToScoring, starting nonStrikerBalls : "+nonStrikerBalls);
        Log.e("Scoring", "outToScoring, starting nonStrikerF4s : "+nonStrikerF4s);
        Log.e("Scoring", "outToScoring, starting nonStrikerS6s : "+nonStrikerS6s);

        Log.e("Scoring", "outToScoring, starting player1 : "+player1);
        Log.e("Scoring", "outToScoring, starting player1ID : "+player1ID);
        Log.e("Scoring", "outToScoring, starting player1Runs : "+player1Runs);
        Log.e("Scoring", "outToScoring, starting player1Balls : "+player1Balls);
        Log.e("Scoring", "outToScoring, starting player1F4s : "+player1F4s);
        Log.e("Scoring", "outToScoring, starting player1S6s : "+player1S6s);

        Log.e("Scoring", "outToScoring, starting player2 : "+player2);
        Log.e("Scoring", "outToScoring, starting player2ID : "+player2ID);
        Log.e("Scoring", "outToScoring, starting player2Runs : "+player2Runs);
        Log.e("Scoring", "outToScoring, starting player2Balls : "+player2Balls);
        Log.e("Scoring", "outToScoring, starting player2F4s : "+player2F4s);
        Log.e("Scoring", "outToScoring, starting player2S6s : "+player2S6s);*/


       /*if (flag == 0){
            tv_crossed.setText("YES");
            crossed = true;
            if (outType == 2)
                btn_out_batsman.setVisibility(View.VISIBLE);

            else if (outType == 3 || outType == 8) {
                ll_extra.setVisibility(View.VISIBLE);
            }

            flag = 1;
            Log.e("checkStrikerCrossed", "yes,  out : "+out);
        }
        else {
            Log.e("checkStrikerCrossed", "no,  out : "+out);
            tv_crossed.setText("NO");
            crossed = false;
            flag = 0;
        }*/



       /*if (rb_not_crossed.isSelected()){
           crossed = false;
       }

       else {
           crossed = true;
           if (outType == 2)
               btn_out_batsman.setVisibility(View.VISIBLE);

           else if (outType == 3 || outType == 8) {
               ll_extra.setVisibility(View.VISIBLE);
           }
       }*/

        newPartnership = false;

        if (noBall)
            ++bowlerNoBall;

        Log.e("Partnership", "outToScoring, newPartnership : "+newPartnership);


        if ((outType == 1 || outType == 2 || outType == 3) && (fieldersList.size() <= 0)) {
//            outAlert(2);
            outAlert(2, "Please select fielder");
        }

        else {


            ballType = 3;
            // Added on 22/09/2021
            if (noBall || wide || out_ball_not_count || ballCount)
                bCount = 0;
            else
                bCount = 1;
            // ===== till here

            firstbowler = false;


//        Log.d("outToScoring", " matchid :"+matchid);
//        Log.d("outToScoring", " matchID :"+matchID);

            if (!retired || outType != 10)
                ++wicket;


//            if (retiredList.size() == 0) {    COMMENTED ON 01/01/2021
            if (wicket == (player_count - 1)) {
                allOUT = true;
                tvTotalWicket.setVisibility(View.INVISIBLE);
                tvdiv.setVisibility(View.INVISIBLE);
            }
            /* COMMENTED ON 01/01/2021
            } else if (retiredList.size() > 0) {

                if ((wicket + retiredList.size()) == (player_count - 1)) {
                    allOUT = true;
                    tvTotalWicket.setVisibility(View.INVISIBLE);
                    tvdiv.setVisibility(View.INVISIBLE);
                }

            }*/

            if (retired && lastWicket && (wicket == (player_count - 2))) {
                allOUT = true;
//                tvTotalWicket.setVisibility(View.INVISIBLE);
//                tvdiv.setVisibility(View.INVISIBLE);
            }


//            Log.e("Partnership", "outToScoring, retired 1 : " + retired);
//            Log.e("Partnership", "outToScoring, newPartnership 1 : " + newPartnership);
//            Log.e("outToScoring", "outToScoring, retired : " + retired);
//            Log.e("outToScoring", "outToScoring, wicket : " + wicket);
//            Log.e("outToScoring", "outToScoring, player_count : " + player_count);
//            Log.e("outToScoring", "outToScoring, allOUT : " + allOUT);
            Log.e("outToScoring11", "outToScoring 11, outType : " + outType);
            Log.e("outToScoring11", "outToScoring 11, retired : " + retired);
            Log.e("outToScoring11", "outToScoring 11, wicket : " + wicket);
            Log.e("outToScoring11", "outToScoring 11, player_count : " + player_count);


            tvTotalWicket.setText(String.valueOf(wicket));

            if (outType >= 0 && outType <= 7) {

                Log.d("out", "outToScorig, outType : " + outType);
                if (wide || noBall || out_ball_not_count)
                    Log.d("out", "outToScorig, outType : " + outType +
                            ", wide : " + wide + ", noBall : " + noBall + ", out_ball_not_count : " + out_ball_not_count);
                else {
                    ++bowlerBalls;
                    ++bt_balls; // Added on 26/07/2021
                }
                // commented on 26/06/2020
                /*if (!wide && !noBall)
                    ++bowlerBalls;*/

            }


            if (outType >= 0 && outType <= 5 && outType != 2)
                ++bowlerWicket;
            tvBowlerWicket.setText(String.valueOf(bowlerWicket));

//            if (crossed || ((out_run % 2) != 0) || ((runsOffBat % 2) != 0))
//                swap();


            Log.e("outToScoring", "dismissedPlayer : " + dismissedPlayer);
            Log.e("outToScoring", "disPID : " + disPID);
            int dismissedPlayerID = 0;
//        if (!retired) {

           /* // Added on 06/3/2021
            if (outType == 9)
                dismissedPlayerID = newBatsID;//dismissedPlayrID;
            else    // till here*/
            dismissedPlayerID = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", battingTeamNo).
                    equalTo("playerName", dismissedPlayer).findFirst().getPlayerID();


            //        }

            Log.e("Scoring", "outToScoring, fielderPlayer : " + fielderPlayer);
            Log.e("Scoring", "outToScoring, dismissedPlayer : " + dismissedPlayer);
            Log.e("Scoring", "outToScoring, dismissedPlayerID : " + dismissedPlayerID);


//        if (!fielderPlayer.matches("")){
//
//            if (single) {
//
//                fielderPlayerID = "" + realm.where(Player.class).
//                        equalTo("matchid", matchid).
//                        equalTo("team", fieldingTeamNo).
//                        equalTo("playerName", fielderPlayer).findFirst().getPlayerID();
//
//            }
//
//            else if (multi) {
//
//                // get each player from arraylist and find their ids
//                if (fieldersList.size()>0) {
//
//                    for (int i = 0; i < fieldersList.size(); i++) {
//
//                        fielderPlayerID = fielderPlayerID + realm.where(Player.class).
//                                equalTo("matchid", matchid).
//                                equalTo("team", fieldingTeamNo).
//                                equalTo("playerName", fieldersList.get(i)).findFirst().getPlayerID()
//                                + ", ";
//
//                    }
//                }
//
//            }
//        }
//
//
//        else {
//
//            fielderPlayerID = null;
//        }

            if (!retired) {
                dismissedList.add(dismissedPlayerID);
//                newPartnership = false;
            }
            else {
                retiredList.add(dismissedPlayerID);
                newPartnership = true;
            }


            Log.e("Partnership", "outToScoring, retired 2 : " + retired);
            Log.e("Partnership", "outToScoring, newPartnership 2 : " + newPartnership);
            Log.e("Scoring", "outToScoring, dismissedPlayerID : " + dismissedPlayerID);
            Log.e("Scoring", "outToScoring, dismissedList : " + dismissedList);
            Log.e("Scoring", "outToScoring, retiredList : " + retiredList);
            Log.e("Scoring", "outToScoring, fielderPlayerID : " + fielderPlayerID);
            Log.e("Scoring", "outToScoring, outType : " + outType);

            Log.d("b4 setExtra", "ballType : " + ballType);
            Log.d("b4 setExtra", "extras : " + extras + ",extraType : " + extraType +
                    ", extra : " + extra + ", extraRun : " + extraRun + ", runsOffBat : "+ runsOffBat);
            Log.d("b4 setExtra", "out : " + out + ", outType : " + outType + ", out_run : " + out_run);
            Log.d("b4 setExtra", "strID : " + strID + ", strikerRuns : " + strikerRuns + ", strikerBalls : " + strikerBalls);
            Log.d("b4 setExtra", "nstrID : " + nstrID + ", nonStrikerRuns : " + nonStrikerRuns +
                    ", nonStrikerBalls : " + nonStrikerBalls);
            Log.d("b4 setExtra", "player1ID : " + player1ID + ", player1Runs : " + player1Runs +
                    ", player1Balls : " + player1Balls);
            Log.d("b4 setExtra", "player2ID : " + player2ID + ", player2Runs : " + player2Runs +
                    ", player2Balls : " + player2Balls);
            Log.d("b4 setExtra", "psRuns : " + psRuns + ", psBalls : " + psBalls + ", psOver : " + psOver);
            Log.d("b4 setExtra", "ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
            Log.d("b4 setExtra", "ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);

            setExtras();
            syncBowler();

            if (outType >= 1 && outType <= 3)
                syncBatsmann(dismissedPlayerID, bowlerID, fielderPlayerID, true, outType,
                        false, false, wk_flag);

            else if ((outType == 0) || ((outType >= 4) && (outType < 9)))
                syncBatsmann(dismissedPlayerID, bowlerID, null, true, outType,
                        false, false, false);

            else if (outType == 10)
                syncBatsmann(dismissedPlayerID, 0, null, false, 10,
                        true, false, false);

            else if (outType == 9 || outType == 11 || outType == 12)
                syncBatsmann(dismissedPlayerID, 0, null, true, outType,
                        false, false, false);

            // Added on 17/09/2021
            if (strID != dismissedPlayerID)
                syncBatsmann(strID,0, null, false, -1, false,
                        false, false);
            else //if (nstrID != dismissedPlayerID)
                syncBatsmann(nstrID,0, null, false, -1, false,
                        false, false);
            Log.e("Scoring", "outToScoring, b4 setExtras striker : "+striker);
            Log.e("Scoring", "outToScoring, b4 setExtras strID : "+strID);
            Log.e("Scoring", "outToScoring, b4 setExtras strikerRuns : "+strikerRuns);
            Log.e("Scoring", "outToScoring, b4 setExtras strikerBalls : "+strikerBalls);
            Log.e("Scoring", "outToScoring, b4 setExtras strikerF4s : "+strikerF4s);
            Log.e("Scoring", "outToScoring, b4 setExtras strikerS6s : "+strikerS6s);

            Log.e("Scoring", "outToScoring, b4 setExtras nonStriker : "+nonStriker);
            Log.e("Scoring", "outToScoring, b4 setExtras nstrID : "+nstrID);
            Log.e("Scoring", "outToScoring, b4 setExtras nonStrikerRuns : "+nonStrikerRuns);
            Log.e("Scoring", "outToScoring, b4 setExtras nonStrikerBalls : "+nonStrikerBalls);
            Log.e("Scoring", "outToScoring, b4 setExtras nonStrikerF4s : "+nonStrikerF4s);
            Log.e("Scoring", "outToScoring, b4 setExtras nonStrikerS6s : "+nonStrikerS6s);

            Log.e("Scoring", "outToScoring, b4 setExtras player1 : "+player1);
            Log.e("Scoring", "outToScoring, b4 setExtras player1ID : "+player1ID);
            Log.e("Scoring", "outToScoring, b4 setExtras player1Runs : "+player1Runs);
            Log.e("Scoring", "outToScoring, b4 setExtras player1Balls : "+player1Balls);
            Log.e("Scoring", "outToScoring,  b4 setExtras player1F4s : "+player1F4s);
            Log.e("Scoring", "outToScoring, b4 setExtras player1S6s : "+player1S6s);

            Log.e("Scoring", "outToScoring, b4 setExtras player2 : "+player2);
            Log.e("Scoring", "outToScoring, b4 setExtras player2ID : "+player2ID);
            Log.e("Scoring", "outToScoring, b4 setExtras player2Runs : "+player2Runs);
            Log.e("Scoring", "outToScoring, b4 setExtras player2Balls : "+player2Balls);
            Log.e("Scoring", "outToScoring, b4 setExtras player2F4s : "+player2F4s);
            Log.e("Scoring", "outToScoring, b4 setExtras player2S6s : "+player2S6s);



            // updated and entered below on 30/06/2020
            /*  if (!retired && !wide && !noBall && outType > -1 && outType <= 8 *//*outType != 7 &&*//* *//* && outType != 11 || outType != 12)*//*) {

                setOver(12345);                                 // valid ball, but not a run, this s a wicket,
                // so not to count or display the run
            } else if (wide || noBall || out_ball_not_count) {

                setOver(537);
            }*/


            // here

            if (wide || noBall || out_ball_not_count) {
                Log.d("Partnership","outToScoring 1, out_ball_not_count : " + out_ball_not_count);
                setOver(537);
            }
            else if (!retired && outType > -1 && outType <= 8) {

                setOver(12345);                                 // valid ball, but not a run, this s a wicket,
                // so not to count or display the run
            }

            Log.d("Partnership","outToScoring 1, out : " + out);
            Log.d("Partnership","outToScoring 1, extras : " + extras);
            Log.d("Partnership","outToScoring 1, wicket : " + wicket);
            Log.d("Partnership","outToScoring 1, outType : " + outType);
            Log.d("Partnership","outToScoring 1, psRuns : " + psRuns);
            Log.d("Partnership","outToScoring 1, psBalls : " + psBalls);
            Log.d("Partnership","outToScoring 1, player1ID : " + player1ID);
            Log.d("Partnership","outToScoring 1, ps1ID : " + ps1ID);
            Log.d("Partnership","outToScoring 1, p1CR : " + p1CR);
            Log.d("Partnership","outToScoring 1, p1CB : " + p1CB);
            Log.d("Partnership","outToScoring 1, player2ID: "+player2ID);
            Log.d("Partnership","outToScoring 1, ps2ID : " + ps2ID);
            Log.d("Partnership","outToScoring 1, p2CR : " + p2CR);
            Log.d("Partnership","outToScoring 1, p2CB : " + p2CB);
            Log.d("Partnership","outToScoring 1, dismissedPlayerID : " + dismissedPlayerID);
            Log.d("Partnership","outToScoring 1, newPartnership  3: " + newPartnership);
            Log.d("Partnership","outToScoring 1, retired 3 : " + retired);
            Log.d("Partnership","outToScoring 1, noneNB 3 : " + noneNB);
            if (newPartnership)
                syncPartnership(wicket + 1, outType, dismissedPlayerID, false, false);
            else
                syncPartnership(wicket, outType, dismissedPlayerID, false, false);

//        modified = tvCurrentOver.getText().toString();
            udisplay = modified;

            Log.d("Partnership","outToScoring 1, noneNB 4 : " + noneNB);
            if (runsOffBatNB) {
                Log.d("Partnership","outToScoring 1, runsOffBatNB 5 : " + runsOffBatNB);
                modified = modified + "\t\t W(" + runsOffBat + ")";
                if (runsOffBat > 0)
                    maiden = false;
            }
            else if (noneNB) {
                Log.d("Partnership","outToScoring 1, noneNB 5 : " + noneNB);
                modified = modified + "\t\t W(nb)";
                maiden = false;
            }
            else if (outType == 2 && out_run > 0) {
                Log.d("Partnership","outToScoring 1, out_run 5 : " + out_run);
                modified = modified + "\t\t W(" + out_run + ")";
                if (out_run > 0)
                    maiden = false;
            } else if (retired) {
                Log.d("Partnership","outToScoring 1, retired 5 : " + retired);
                modified = modified + "";
                Log.d("modified4", modified);
                Log.d("udisplay4", udisplay);
            } else {
                Log.d("Partnership","outToScoring 1, else 5 : W");
                modified = modified + "\t\t W";

                Log.d("modified5", modified);
                Log.d("udisplay5", udisplay);
            }

            // Added on 01/12/2021
            if (penalty && penaltyType == 1)
                modified = modified + "p(" + penaltyRun + ")";
            // === till here


            tvCurrentOver.setText(modified);
            //Updated on 27/07/2021
            if (HUNDRED)
                tvBowlerOver.setText(String.valueOf(bt_balls));
            else
                tvBowlerOver.setText(String.valueOf(new
                        DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));
            //Updated on 27/07/2021
            if (HUNDRED)
                tvPlayingOver.setText(String.valueOf(totalBalls));
            else
                tvPlayingOver.setText(String.valueOf(new DecimalFormat("##.#").format(currentOver)));


            if (currentInnings == 1 || currentInnings == 99)
                ll_remainings.setVisibility(View.GONE);

            else {

                ll_remainings.setVisibility(View.VISIBLE);
                if (remainingRuns > 0) {

//                remainingRuns = remainingRuns - run;
                    tvRemainingRuns.setText(String.valueOf(remainingRuns));
                } else {

//                if (remaining_run_flag){
//                    remaining_run_flag = false;
//                    leadingRuns = run - remainingRuns;
//                }
//
//                leadingRuns = leadingRuns + run;

                    tvRemainingRunsText.setText("Leading Runs : ");
                    tvRemainingRuns.setText(String.valueOf(leadingRuns));

                }

                Log.e("Scoring", "outTOScoring, remainingRuns : " + remainingRuns);
                Log.e("Scoring", "outTOScoring, leadingRuns : " + leadingRuns);

                if (tvRemainingOversBallsText.isShown()) {
                    if (remainingBalls > 100) {

                        tvRemainingOversBallsText.setText(", Overs : ");
                        tvRemainingOversBalls.setText(String.valueOf(new DecimalFormat("##.#").format(remainingOver)));
                    } else {

                        tvRemainingOversBallsText.setText(", Balls : ");
                        Log.e("Scoring", "outTOScoring, remainingBalls : " + remainingBalls);
                        tvRemainingOversBalls.setText(String.valueOf(remainingBalls));
                    }
                }

                if (innings.matches("single")) {

                    tvRemainingRunsText.setText("Remaining Runs : ");
                } else {

                    if (remainingRuns > 0) {
                        if (currentInnings == 4)
                            tvRemainingRunsText.setText("Remaining Runs : ");
                        else
                            tvRemainingRunsText.setText("Trial Runs : ");
                    } else
                        tvRemainingRunsText.setText("Lead Runs : ");
                }

            }


            if (innings.matches("multi") && totalOver == 1000) {

                tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
                tvRemainingOversBalls.setVisibility(View.INVISIBLE);
            } else {

                tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                tvRemainingOversBalls.setVisibility(View.VISIBLE);
            }


            tvTotalRuns.setText(String.valueOf(currentRuns));


            tvBowlerWicket.setText(String.valueOf(bowlerWicket));

            if (!retired) {
                if (noBall || wide || out_ball_not_count)
                    setFOW(dismissedPlayerID, true);
                else
                    setFOW(dismissedPlayerID, false);
            }

            //save extra details to Extracard
            setExtraCard();
            saveOutEvent(dismissedPlayerID);


            tvTotalRuns.setText(String.valueOf(currentRuns));
            tvPlayer1Runs.setText(String.valueOf(player1Runs));
            tvPlayer1Balls.setText(String.valueOf(player1Balls));
            tvPlayer2Runs.setText(String.valueOf(player2Runs));
            tvPlayer2Balls.setText(String.valueOf(player2Balls));
            tvBowlerRuns.setText(String.valueOf(bwRun));
            //Updated on 27/07/2021
            if (HUNDRED)
                tvBowlerOver.setText(String.valueOf(bt_balls));
            else
                tvBowlerOver.setText(String.valueOf(new
                        DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));

            Log.e("outToScoring", "outToScoring, allOUT : " + allOUT);
            Log.e("outToScoring", "outToScoring, retired : " + retired);
            Log.e("outToScoring", "outToScoring, newPartnership : " + newPartnership);
            Log.e("outToScoring", "outToScoring10, dismissedPlayer : " + dismissedPlayer);
            Log.e("outToScoring", "outToScoring10, dismissedPlayerID : " + dismissedPlayerID);

            popupOUT.dismiss();

            // Added on 31/08/2021
            if (dismissedPlayerID == player1ID) {
                tvPlayer1.setText("");
                tvPlayer1Runs.setText("0");
                tvPlayer1Balls.setText("0");
            }
            else if (dismissedPlayerID == player2ID) {
                tvPlayer2.setText("");
                tvPlayer2Runs.setText("0");
                tvPlayer2Balls.setText("0");
            }
            //===== till here

            dismissedPlayerDetails(dismissedPlayerID);
            resetOutValues();

            dismissedPlayer = null;
            dismissedPlayerID = 0;
            ballType = -1;
            bCount = 0; // Added on 22/09/2021
//            newBatsman = null;


            Log.e("Partnership", "outToScoring, retired 4 : " + retired);
            Log.e("partnership", "outToScoring, newPartnership 4 : " + newPartnership);
            Log.e("Scoring", "outToScoring, retired : " + retired);
            Log.e("Scoring", "outToScoring, retiredList : " + retiredList);
            Log.e("Scoring", "outToScoring, dismissedList : " + dismissedList);
            Log.e("Scoring", "outToScoring, player_count : " + player_count);
//            Log.e("Scoring", "outToScoring, subst : " + subst);
            Log.e("Scoring", "outToScoring, allOUT : " + allOUT);
            Log.e("newBatsman", "outToScoring, newBatsman : " + newBatsman);

        }
    }




    void resetOutValues(){

        outType = 0;
        oType = "";
        fielderPlayer = "";
        runsOffBat = 0;
        checkedItem = -1;
        bye = false;
        lb = false;
        wide = false;
        noBall = false;
        byeNB = false;
        lbNB = false;
        boundaryNB = false;
        runsOffBatNB = false;
        noneNB = false;
        eType = null;
        extraType = -1;
        ballType = -1;
        bCount = 0; // Added on 22/09/2021
        extraRun = 0;
        extras = false;
//        out = false;
        penalty = false;
        ballCount = false;
        bCount = 0;
        penaltyBallCount = 0;
        bowball = false;
        batsball = false;
        crossed = false;
        retired = false;

        strike = false;
        endOfOver = false;
    }




    void saveOutEvent(int dismissedPlayerID) {

        Log.d("saveout","saveOUTEvent21 , : "+so_inninngs1Runs);
        // save the OUT event
        Log.d("DISPLAY", "34 modified = " + modified);
        Log.d("DISPLAY", "34 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket, ball,
                0, preInningsRuns, remainingRuns, remainingBalls, remainingOver, leadingRuns,
                innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo, fieldingTeamNo,
                player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID,
                (runsOffBat + out_run), ballType, bCount, extraType, extra, outType, dismissedPlayerID,
                fielderPlayerID, 0, disNewBatsmanBattingOrder, penaltyType, penaltyRun,
                penaltyRunTeam, ballCount, penaltyBallCount, commentary, 0, mo, maiden, modified,
                udisplay, tco,0, sessionType, sessionID, endOfDay, SUPER_OVER,
                so_inninngs1Runs, so_inninngs2Runs, declared, freeHit, false, inning_started,
                0, 0, 0, null, pre_out, callBowlerAlert,
                wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team, forfeit_innings,
                CONCEDE, conceded_team, forceEndingType, lunch_flag, tea_flag, dinner_flag);


        setExtraSwap(/*extraRun*/);

        if (wheel) {
            setWagonWheelRegion(eventID);
        }



    }





    void setExtra() {

//        Log.d("setExtra", " matchid :"+matchid);
//        Log.d("setExtra", " matchID :"+matchID);
        commentary = "";

        LayoutInflater layoutInflater = (LayoutInflater)
                UpdatedScoringActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View customViewEXTRA = layoutInflater.inflate(R.layout.extra,null);

        btn_extra_back = customViewEXTRA.findViewById(R.id.extra_back);
        btn_extra_type = customViewEXTRA.findViewById(R.id.btn_extras_type);
//        btn_extra_penalty = customViewEXTRA.findViewById(R.id.btn_extras_penalty);
//        btn_extra_change_penalty_run = customViewEXTRA.findViewById(R.id.btn_exrtas_change_penalty_run);
        btn_extra_com = customViewEXTRA.findViewById(R.id.btn_extras_com);
        btn_extra_next = customViewEXTRA.findViewById(R.id.bt_extras_next);
        ll_extra_extra = customViewEXTRA.findViewById(R.id.ll_e_extras);

        tvExtrasType = customViewEXTRA.findViewById(R.id.txt_extras_type);
//        tv_extra_penalty = customViewEXTRA.findViewById(R.id.txt_extras_penalty);
//        tvExtraRuns = customViewEXTRA.findViewById(R.id.txt_extra_runs);
//        tvExtraRunsOffBat = customViewEXTRA.findViewById(R.id.txt_runs_off_bat);
        tvExtrasCom = customViewEXTRA.findViewById(R.id.txt_extras_com);

        et_extra_run_extra = customViewEXTRA.findViewById(R.id.edit_extra_run_extra);
        et_runsOffBat_extra = customViewEXTRA.findViewById(R.id.edit_run_off_bat_extra);
//        tvCom = findViewById(R.id.txt_extras_com);
//        cbExtraPenalty = customViewEXTRA.findViewById(R.id.check_penalty);

        et_extra_run_extra.setVisibility(View.GONE);
        et_runsOffBat_extra.setVisibility(View.GONE);
//        et_extra_run_extra.setVisibility(View.GONE);

        //instantiate EXTRA popup window
        popupExtra = new PopupWindow(customViewEXTRA,
                LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
        popupExtra.setFocusable(true);
        popupExtra.setOutsideTouchable(true);//isRestricted());
        popupExtra.update();

        //Added on 18/03/2021
        tvExtrasType.setVisibility(View.INVISIBLE);
//        tv_extra_penalty.setVisibility(View.INVISIBLE);
        ll_extra_extra.setVisibility(View.GONE);
        tvExtrasCom.setVisibility(View.GONE);
        // ==== till here

        /*// Added on 16/03/2021
        tvExtrasType.setVisibility(View.INVISIBLE);*/




        //display the EXTRA popup window
        popupExtra.showAtLocation(linearLayout, Gravity.CENTER, 500, 500);
        Log.d("MODIFIED", "setExtra() 1, modified : " + modified);
        Log.d("MODIFIED", "setExtra() 1, udisplay : " + udisplay);


        btn_extra_back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                extras = false;

                ballType = -1;
                bCount = 0; // Added on 22/09/2021
                extraType = -1;
                bye = false;
                lb = false;
                wide = false;
                noBall = false;
                byeNB = false;
                lbNB = false;
                penalty = false;
                bCount = 0; // Added on 22/09/2021
//                modified = modified + ""; COMMENTED ON 01/03/2021
                popupExtra.dismiss();
                Log.d("MODIFIED", "setExtra() 2, modified : " + modified);
                Log.d("MODIFIED", "setExtra() 2, udisplay : " + udisplay);

            }
        });



        btn_extra_type.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkExtraType();
            }
        });

//        btn_extra_penalty.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                Log.d("MODIFIED", "setExtra() 3, modified : " + modified);
//                Log.d("MODIFIED", "setExtra() 3, udisplay : " + udisplay);
//                bye = false;  Commented on 01/12/2021
//                lb = false;  Commented on 01/12/2021
//                wide = false;  Commented on 01/12/2021
//                noBall = false;  Commented on 01/12/2021
//                byeNB = false;  Commented on 01/12/2021
//                lbNB = false;  Commented on 01/12/2021
//                penalty = true;
//                setPenalty();
//            }
//        });


        btn_extra_com.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                editExtraCommentary();
            }
        });


        btn_extra_next.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                Log.d("runsOffBat", "btn_extra_next1, " + runsOffBat);
                Log.d("penalty", "setExtra, penalty, " + penalty);

                runsOffBat = 0;
                extraRun = 0;
                if (et_runsOffBat_extra.isShown()) {
                    String s = et_runsOffBat_extra.getText().toString();
                    if (s.matches(""))
                        runsOffBat = 0;
                    else
                        runsOffBat = Integer.parseInt(s);
                    Log.d("runsOffBat", "btn_extra_next2, " + runsOffBat);
//                    noballAlert("Please enter valid Extra Run");
                }

                else if (et_extra_run_extra.isShown()) {
                    str = et_extra_run_extra.getText().toString();
                    Log.d("extrarun", "str : " + str);
                    Log.d("extrarun", "bye : " + bye);
                    Log.d("extrarun", "lb : " + lb);
                    Log.d("extrarun", "byeNB : " + byeNB);
                    Log.d("extrarun", "lbNB : " + lbNB);
                    Log.d("extrarun", " extraType : " + extraType);

                    if (str.matches("") && (bye || lb || byeNB || lbNB)) {
//                        noballAlert("Please enter extra run");
                        Log.d("NEXT", "setExtra Please enter extra run");
                    }
                    else {

                        if (str.matches(""))
                            extraRun = 0;
                        else
                            extraRun = Integer.parseInt(str);
                    }
                    Log.d("extrarun", "extraRun : " + extraRun);
                }


                /*else if (str.matches("")) {

//                        extraRun = 0;
                        noballAlert("Please enter extra run");
//                    else {
//                        extraRun = Integer.parseInt(str);
//                    }
                }*/

//                else

                Log.d("USA", "setExtra, extraType = " + extraType);
                Log.d("USA", "setExtra, boundaryNB = " + boundaryNB);
                Log.d("USA", "setExtra, runsOffBat = " + runsOffBat);
                Log.d("USA", "setExtra, runsOffBatNB = " + runsOffBatNB);
                Log.d("USA", "setExtra, extraType = " + extraType);
                if (extraType == -1) {
//                        outAlert(3); // Commente on 19/04/2021
                    outAlert(3, "Please enter required fields");
                }

                else if (boundaryNB && (runsOffBat != 4 && runsOffBat != 6)) {
                    noballAlert("Please enter boundary values");
                    Log.d("runsOffBat", "btn_extra_next3, " + runsOffBat);
                    Log.d("runsOffBat", "boundaryNB, " + boundaryNB);
                }

                else if (runsOffBatNB && (runsOffBat == 0))
                    noballAlert("Please enter valid Extra Run");

                else if ((lb || bye || lbNB || byeNB) && extraRun == 0) {
                    Log.d("extrarun", "2 bye : " + bye);
                    Log.d("extrarun", "2 lb : " + lb);
                    Log.d("extrarun", "2 byeNB : " + byeNB);
                    Log.d("extrarun", "2 lbNB : " + lbNB);
                    Log.d("extrarun", "2 extraRun : " + extraRun);
                    Log.d("extrarun", "2 extraType : " + extraType);
                    noballAlert("Please enter valid Extra Run");
                }

                /*else if (runsOffBatNB && (runsOffBat == 4 || runsOffBat == 6)) {
                    noballAlert("Please enter proper values");
                    Log.d("runsOffBat", "btn_extra_next4, " + runsOffBat);
                }*/


                else {

                    Log.d("runsOffBat", "btn_extra_next5, " + runsOffBat);
                    String str = "";
                    firstbowler = false;
                    just_started = false;
                    if (status.matches("start")) {
                        status = "resume";
                        updateMatch(matchid, false);
                    }

                    /*if (et_extra_run_extra.isShown()) {
                        str = et_extra_run_extra.getText().toString();
                    }
                    if (str.matches(""))
                        extraRun = 0;
                    else {
                        extraRun = Integer.parseInt(str);
                    }*/

                    extraToScoring();

                }
            }
        });
    }





    void checkExtraType(){

//        selectOutType();


        extraTypeBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        extraTypeBuilder.setIcon(R.drawable.ball);
        extraTypeBuilder.setCancelable(false);
        extraTypeBuilder.setTitle("Extra Type");
        extraTypeBuilder.setSingleChoiceItems(R.array.extraTypeList, checkedItem, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                switch (which){

                    case 0:

                        bye = true;
                        lb = false;
                        wide = false;
                        noBall = false;
                        byeNB = false;
                        lbNB = false;
                        penalty = false;
                        ll_extra_extra.setVisibility(View.VISIBLE);
                        et_extra_run_extra.setVisibility(View.VISIBLE);
//                        et_extra_run_extra.setText(0);
                        et_runsOffBat_extra.setVisibility(View.INVISIBLE);
                        break;

                    case 1:

                        bye = false;
                        lb = true;
                        wide = false;
                        noBall = false;
                        byeNB = false;
                        lbNB = false;
                        penalty = false;
                        ll_extra_extra.setVisibility(View.VISIBLE);
                        et_extra_run_extra.setVisibility(View.VISIBLE);
//                        et_extra_run_extra.setText(0);
                        et_runsOffBat_extra.setVisibility(View.INVISIBLE);
                        break;

                    case 2:

                        bye = false;
                        lb = false;
                        wide = true;
                        noBall = false;
                        byeNB = false;
                        lbNB = false;
                        penalty = false;
                        ll_extra_extra.setVisibility(View.VISIBLE);
                        et_extra_run_extra.setVisibility(View.VISIBLE);
//                        et_extra_run_extra.setText(wideRun);
                        et_runsOffBat_extra.setVisibility(View.INVISIBLE);
//                        et_extra_run_extra.setText(String.valueOf(wideRun));
                        break;

                    case 3:

                        bye = false;
                        lb = false;
                        wide = false;
                        noBall = true;
                        byeNB = false;
                        lbNB = false;
                        penalty = false;
                        ll_extra_extra.setVisibility(View.VISIBLE);
                        et_extra_run_extra.setVisibility(View.INVISIBLE);
                        et_runsOffBat_extra.setVisibility(View.VISIBLE);
//                        et_extra_run_extra.setText(String.valueOf(noballRun));
                        break;

                    default:
                        Toast.makeText(getApplicationContext(), "please Select an extra type",
                                Toast.LENGTH_SHORT).show();
                        break;

                }
            }
        });

        extraTypeBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                ballType = 8;

                if (bye){
                    eType = "Byes";
                    extraType = 0;
                }

                else if (lb){
                    eType = "Leg Byes";
                    extraType = 1;
                }

                else if (wide){

                    eType = "Wide";
                    runsOffBat = 0;
                    extraType = 4;

                    Log.d("Scoring", "setExtra, wide : "+wide);
                    Log.d("Scoring", "setExtra, eType : "+eType);
                }

                else if (noBall){

                    eType = "Noball";
//                    ++bowlerNoBall;
                    setNoball();

                }

                if (extras) {
                    tvExtrasType.setVisibility(View.VISIBLE);
                    tvExtrasType.setText(eType);
                }

                else if (out) {
                    tv_extraType.setText(eType);
                    tv_extraType.setVisibility(View.VISIBLE);
                }

            }
        });

        extraTypeBuilder.setNegativeButton("CANCEL", null);

        // create and show the alert dialog
        AlertDialog dialog = extraTypeBuilder.create();
        dialog.show();

    }




    public void setNoball() {

        noballBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        noballBuilder.setIcon(R.drawable.ball);
        noballBuilder.setCancelable(false);
        noballBuilder.setTitle("Noball Type");
        noballBuilder.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                extraType = -1;
                bye = false;
                lb = false;
                wide = false;
                noBall = false;
                byeNB = false;
                lbNB = false;
                noneNB = false;

                if (out) {
                    checkOutExtraType();
                }
                else {
                    checkExtraType();
                }
            }
        });
        noballBuilder.setSingleChoiceItems(R.array.expandNoBallList, checkedItem, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                switch (which) {

                    case 0:
                        byeNB = true;
                        lbNB = false;
                        runsOffBatNB = false;
                        boundaryNB = false;
                        noneNB = false;
                        penalty = false;

                        if (extras) {
//                            ll_extra_extra.setVisibility(View.VISIBLE);
//                            et_extra_run_extra.setVisibility(View.INVISIBLE);
//                            et_runsOffBat_extra.setVisibility(View.VISIBLE);
                            et_extra_run_extra.setVisibility(View.VISIBLE);
                            et_runsOffBat_extra.setVisibility(View.INVISIBLE);
//                            ballType = 8; Commented on 02/07/2021
                        }
                        else if (out) {
                            ll_extra_runs.setVisibility(View.VISIBLE);
                            et_extra_run_out.setVisibility(View.VISIBLE);
                            et_runsOffBat_out.setVisibility(View.INVISIBLE);
//                            ballType = 3; Commented on 02/07/2021
                        }
                        extraType = 3;
                        eType = "Noball + Byes";
                        break;

                    case 1:
                        lbNB = true;
                        byeNB = false;
                        runsOffBatNB = false;
                        boundaryNB = false;
                        noneNB = false;
                        penalty = false;

                        if (extras) {
                            et_extra_run_extra.setVisibility(View.VISIBLE);
                            et_runsOffBat_extra.setVisibility(View.INVISIBLE);
//                            ballType = 8; Commented on 02/07/2021
                        }
                        else if (out) {
                            ll_extra_runs.setVisibility(View.VISIBLE);
                            et_extra_run_out.setVisibility(View.VISIBLE);
                            et_runsOffBat_out.setVisibility(View.INVISIBLE);
//                            ballType = 3; Commented on 02/07/2021
                        }
                        extraType = 6;
                        eType = "Noball + LegByes";
                        break;

                    case 2:
                        runsOffBatNB = true;
                        byeNB = false;
                        lbNB = false;
                        boundaryNB = false;
                        noneNB = false;
                        penalty = false;

                        if (extras) {
                            et_extra_run_extra.setVisibility(View.INVISIBLE);
                            et_runsOffBat_extra.setVisibility(View.VISIBLE);
//                            ballType = 8; Commented on 02/07/2021
                        }
                        else if (out) {
                            ll_extra_runs.setVisibility(View.VISIBLE);
                            et_extra_run_out.setVisibility(View.INVISIBLE);
                            et_runsOffBat_out.setVisibility(View.VISIBLE);
//                            ballType = 3; Commented on 02/07/2021
                        }
                        extraType = 7;//2;  Updated on 23/09/2021
                        eType = "Noball";
                        break;

                    case 3:
                        boundaryNB = true;
                        byeNB = false;
                        lbNB = false;
                        runsOffBatNB = false;
                        noneNB = false;
                        penalty = false;

                        if (extras) {
                            et_extra_run_extra.setVisibility(View.INVISIBLE);
                            et_runsOffBat_extra.setVisibility(View.VISIBLE);
//                            ballType = 8; Commented on 02/07/2021
                        }
                        else if (out) {
                            ll_extra_runs.setVisibility(View.VISIBLE);
                            et_extra_run_out.setVisibility(View.INVISIBLE);
                            et_runsOffBat_out.setVisibility(View.VISIBLE);
//                            ballType = 3; Commented on 02/07/2021
                        }

                        extraType = 8;//2;  Updated on 23/09/2021
                        eType = "Noball";
                        break;

                    case 4:
                        noneNB = true;
                        byeNB = false;
                        lbNB = false;
                        runsOffBatNB = false;
                        boundaryNB = false;
                        penalty = false;

                        if (extras) {
                            et_extra_run_extra.setVisibility(View.INVISIBLE);
                            et_runsOffBat_extra.setVisibility(View.INVISIBLE);
                            ll_extra_extra.setVisibility(View.GONE);
//                            ballType = 8; Commented on 02/07/2021
                        }

                        else if (out) {

                            ll_extra_runs.setVisibility(View.GONE);
                            ll_extras.setVisibility(View.GONE);
                            et_extra_run_out.setVisibility(View.INVISIBLE);
                            et_runsOffBat_out.setVisibility(View.INVISIBLE);
//                            ballType = 3; Commented on 02/07/2021
                        }

                        extraType = 2;
                        eType = "Noball";
                        break;

                    default:
                        Toast.makeText(getApplicationContext(), "Nothing Selected", Toast.LENGTH_SHORT).show();
                }
            }
        });

        noballBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                Log.e("setNoball", "ok,  out : "+out);
                Log.e("setNoball", "ok,  outtype : "+outType);
                Log.e("setNoball", "ok,  runsOffBatNB : "+runsOffBatNB);
                Log.e("setNoball", "ok,  boundaryNB : "+boundaryNB);


                //if (extras || out) {
//                    tvExtrasType.setText(eType);

                if (byeNB || lbNB) {

                    if (byeNB) {
                        extraType = 3;
                        eType = "Noball + Byes";


                           /* extraType = 3;
                            eType = "Noball + Byes";*/
                    } else if (lbNB) {
                        extraType = 6;
                        eType = "Noball + LegByes";
                    }

                    if (outType == 3 || outType == 5 || outType == 6) {
                        if (byeNB)
                            message = oType + " is not a valid dismissal for Noball + Byes";
                        if (lbNB)
                            message = oType + " is not a valid dismissal for Noball + Legbyes";
                        displayError(message);
                    }

                    else {

                        message = "";

                        if (extras) {

                            et_extra_run_extra.setVisibility(View.VISIBLE);
                            et_runsOffBat_extra.setVisibility(View.INVISIBLE);
//                                ballType = 8; Commented on 02/07/2021
                        } else if (out) {


                            ll_extra_runs.setVisibility(View.VISIBLE);
                            et_extra_run_out.setVisibility(View.VISIBLE);
                            et_runsOffBat_out.setVisibility(View.INVISIBLE);
//                                ballType = 3; Commented on 02/07/2021
                        }


/*
                        Commented on 02/07/2021
                            if (extras) {
                                ballType = 8;
                            }

                            if (out) {
                                ballType = 3;
                            }*/
                    }

                } else if (runsOffBatNB || boundaryNB) {

                    eType = "Noball";


                    if (outType == 6 && (boundaryNB || runsOffBatNB)) {
                        message = oType + " is not a valid dismissal for Noball + RunsOffBat";
                        displayError(message);
                    }

                    else {
                        message = "";
//                            extraType = 2;
                        // Updated extraType on 23/09/2021
                        if (runsOffBatNB)
                            extraType = 7;
                        else if (boundaryNB)
                            extraType = 8;

                        if (extras) {

                            et_extra_run_extra.setVisibility(View.INVISIBLE);
                            et_runsOffBat_extra.setVisibility(View.VISIBLE);
//                                ballType = 8; Commented on 02/07/2021
                        } else if (out) {

                            ll_extra_runs.setVisibility(View.VISIBLE);
                            et_extra_run_out.setVisibility(View.INVISIBLE);
                            et_runsOffBat_out.setVisibility(View.VISIBLE);
//                                ballType = 3; Commented on 02/07/2021
                        }

                        /*if (extras) {
                            ballType = 8;
                        }

                        if (out) {
                            ballType = 3;
                        }*/


                    }

                }

                else if (noneNB) {
                    message = "";

                    eType = "Noball";
                    extraType = 2;

                    if (extras) {

                        et_extra_run_extra.setVisibility(View.INVISIBLE);
                        et_runsOffBat_extra.setVisibility(View.INVISIBLE);
                        ll_extra_extra.setVisibility(View.GONE);
//                            ballType = 8; Commented on 02/07/2021
                    }

                    else if (out) {

                        ll_extra_runs.setVisibility(View.GONE);
                        ll_extras.setVisibility(View.GONE);
                        et_extra_run_out.setVisibility(View.INVISIBLE);
                        et_runsOffBat_out.setVisibility(View.GONE);
//                            ballType = 3; Commented on 02/07/2021

                        // Added on 0/09/2021
                        checkExtra(noballRun);
                    }
                }

                //}
//
//                if (out)
//                    tv_extraType.setText(eType);
//
//                else if (extras)
//                    tvExtrasType.setText(eType);

                if (extras) {
                    tvExtrasType.setVisibility(View.VISIBLE);
                    tvExtrasType.setText(eType);
                }

                else if (out) {
                    tv_extraType.setText(eType);
                    tv_extraType.setVisibility(View.VISIBLE);
                    ll_extras.setVisibility(View.VISIBLE);
                }

            }
        });

        AlertDialog dialog = noballBuilder.create();
        dialog.show();

    }





//    void getExtraRunsOffBat(){
//
//        Log.d("Test", "inside getRunsOffBat");
//        AlertDialog.Builder builder = new AlertDialog.Builder(ScoringActivity.this);
//        builder.setTitle("Enter the Runs");
//
//        final EditText input = new EditText(this);
//
//        input.setInputType(InputType.TYPE_CLASS_NUMBER);
//        builder.setView(input);
//        Log.d("Test", "inside AddRuns()");
//        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
//            @Override
//            public void onClick(DialogInterface dialog, int which) {
//                dialog.cancel();
//            }
//        });
//        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
//
//            //            @Override
//            public void onClick(DialogInterface dialog, int which) {
//
//                if (input.getText().equals(null)){
//                    Toast.makeText(getApplicationContext(),
//                            "Please enter the Run", Toast.LENGTH_SHORT).show();
//                }
//
//                else {
//
//                    try{
//
//                        runsOffBat = Integer.parseInt(input.getText().toString());
//                        tvExtraRunsOffBat.setText(String.valueOf(runsOffBat));
//                        Log.d("Test", "runsoffBat : " + runsOffBat);
//
//                    }
//                    catch(NumberFormatException ex){
//                        // handle your exception
//                        Log.d("Test" , " Exception is : "+ex);
//                    }
//
//                    if (runsOffBat == 4 || runsOffBat == 6) {
//                        checkExtraBoundary(runsOffBat);
//                    }
//                }
//            }
//        });
//
//
//        AlertDialog alert = builder.create();
//        alert.show();
//
//    }






    void checkExtraBoundary(int run){

        boundryDialog = new AlertDialog.Builder(this);
        boundryDialog.setIcon(R.drawable.ball);
        boundryDialog.setCancelable(false);
        boundryDialog.setTitle("Boundary");
        boundryDialog.setMessage("This is BOUNDARY ?");
        boundryDialog.setNegativeButton("No", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                boundary = false;
            }
        });
        boundryDialog.setPositiveButton("YES", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {

                boundary = true;
            }
        });

        boundryDialog.show();

    }





    public void setPenalty(){

        int t= 0;
        String[] teams = {teamA, teamB};

        penaltyDialog = new AlertDialog.Builder(UpdatedScoringActivity.this);
        penaltyDialog.setIcon(R.drawable.ball);
        penaltyDialog.setCancelable(false);
//        penaltyDialog.setTitle("Penalty Type");
        penaltyDialog.setTitle("Offence committed by :");//Penalty for team");
        penaltyDialog.setSingleChoiceItems(/*R.array.penaltyTypeList*/ teams, checkedItem, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                str = Arrays.asList(teams).get(which);
                Toast.makeText(getApplicationContext(), oType + " selected", Toast.LENGTH_SHORT).show();
            }

        });

        penaltyDialog.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                Log.d("MODIFIED", "setExtra() 4, modified : " + modified);
                Log.d("MODIFIED", "setExtra() 4, udisplay : " + udisplay);

                ballType = 8;
                extraType = 5;

                penalty = true;
                eType = "Penalty";

                AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
                alertDialog.setIcon(R.drawable.ball);
                alertDialog.setCancelable(false);
                alertDialog.setTitle("You have selected " + str + " for penalty");
                alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();

                                Log.d("MODIFIED", "setExtra() 5, modified : " + modified);
                                Log.d("MODIFIED", "setExtra() 5, udisplay : " + udisplay);

                                if (str.matches(fieldingTeam)) {        // runs moves to batting team
                                    penalty = true;
                                    penaltyType = 1;
//                                    penaltyRunTeam = battingTeamNo;
//                                    checkExtra(penaltyRun); // Added on 09/09/2021
                                }

                                else if (str.matches(battingTeam)) {        // runs goes to fielding team
                                    penaltyType = 2;
//                                    penaltyRunTeam = battingTeamNo;
                                }

                                // added on 26/05/2020

                                // Adde don 01/12/2021
                                // === till here

                                // else if (extras) {   // because in out case already bowler ball and striker balls are counting
                                AlertDialog.Builder alertDialog1 = new AlertDialog.Builder(UpdatedScoringActivity.this);
                                alertDialog1.setIcon(R.drawable.ball);
                                alertDialog1.setCancelable(false);
                                alertDialog1.setTitle(str);
//                   alertDialog.setMessage("This is BOUNDARY ?");
                                alertDialog1.setNegativeButton("BALL COUNTED", new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int which) {

                                        ballCount = true;
                                        bCount = 1; // Added on 22/09/2021
                                        // Added on 17/12/2021
                                        Log.d("PM", "c 1, modified = " + modified);
                                        Log.d("PM", "c 1, udisplay = " + udisplay);
                                        confirm_extras = true;
                                        setExtras();
                                        setExtraCard();
                                        Log.d("PM", "c, modified = " + modified);
                                        Log.d("PM", "c, udisplay = " + udisplay);

                                        syncBatsmann(strID,0, null, false, -1, false,
                                                false, false);
                                        syncBowler();

                                        if (penaltyType == 2)
                                            setExtraEvent(false);
                                        else
                                            setExtraEvent(true);

                                        tvTotalRuns.setText(String.valueOf(currentRuns));
                                        tvPlayer1Balls.setText(String.valueOf(player1Balls));
                                        tvPlayer2Balls.setText(String.valueOf(player2Balls));
                                        tvBowlerRuns.setText(String.valueOf(bwRun));
                                        //Updated on 27/07/2021
                                        if (HUNDRED)
                                            tvBowlerOver.setText(String.valueOf(bt_balls));
                                        else
                                            tvBowlerOver.setText(String.valueOf(new
                                                    DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));
                                        //== till here
//                                            penaltyBallCounted(); Commented on 17/12/2021

                                           /* // added and commented on 26/05/2020
                                            if (penaltyType == 1) {
                                                bowball = true;
                                                batsball = false;
                                            }

                                            else if (penaltyType == 2) {
                                                bowball = false;
                                                batsball = true;
                                            }*/


//                                            if (extras) {
////                                                tvExtrasType.setText(eType);  Commente don 18/03/2021
////                                                tv_extra_penalty.setVisibility(View.VISIBLE); // Added on18/03/2021
////                                                tv_extra_penalty.setText(eType); // Added on18/03/2021
//                                            }
//
//                                            else if (out) {
//                                                ll_extras.setVisibility(View.VISIBLE);
//                                                tv_extraType.setVisibility(View.VISIBLE);
////                                                tv_extraType.setText(eType);  Commente don 18/03/2021
////                                                tv_out_penalty.setVisibility(View.VISIBLE); // Added on18/03/2021
////                                                tv_out_penalty.setText(eType); // Added on18/03/2021
//                                            }
                                    }
                                });

//                                    if (extras) {
                                alertDialog1.setPositiveButton("BALL NOT COUNTED", new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int which) {

                                        bCount = 0; // Added on 22/09/2021
                                        ballCount = false;
                                        batsball = false;
                                        bowball = false;
                                        Log.d("PM", "nc 1, modified = " + modified);
                                        Log.d("PM", "nc 1, udisplay = " + udisplay);
                                        //Added on 17/12/2021
//                                                if (penalty) {
                                        confirm_extras = true;
                                        setExtras();
                                        setExtraCard();
                                        Log.d("PM", "nc 2, modified = " + modified);
                                        Log.d("PM", "nc 2, udisplay = " + udisplay);
                                        if (penaltyType == 2)
                                            setExtraEvent(false);
                                        else
                                            setExtraEvent(true);

                                        tvTotalRuns.setText(String.valueOf(currentRuns));
                                        tvPlayer1Balls.setText(String.valueOf(player1Balls));
                                        tvPlayer2Balls.setText(String.valueOf(player2Balls));
                                        tvBowlerRuns.setText(String.valueOf(bwRun));
                                        //Updated on 27/07/2021
                                        if (HUNDRED)
                                            tvBowlerOver.setText(String.valueOf(bt_balls));
                                        else
                                            tvBowlerOver.setText(String.valueOf(new
                                                    DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));

                                        // === till here

//                                                tvExtrasType.setText(eType);   // Commented  on 18/03/2021
//                                                tv_extra_penalty.setVisibility(View.VISIBLE);   // Added on 18/03/2021
//                                                tv_extra_penalty.setText(eType);   // Added on 18/03/2021
                                    }
                                });
//                                    }

                                alertDialog1.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        dialog.dismiss();
                                        ballCount = false;
                                        batsball = false;
                                        bowball = false;
                                        extraType = -1;
                                        ballType = 8;
                                        penalty = false;

//                                            setPenalty(); COMMENTED ON 01/03/2021
                                        Log.d("MODIFIED", "setExtra() 6, modified : " + modified);
                                        Log.d("MODIFIED", "setExtra() 6, udisplay : " + udisplay);
                                    }
                                });
                                alertDialog1.show();

//                                }
                            }
                        });
                alertDialog.show();
            }
        });

        penaltyDialog.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                Log.d("MODIFIED", "setExtra() 7, modified : " + modified);
                Log.d("MODIFIED", "setExtra() 7, udisplay : " + udisplay);
            }
        });
//        penaltyDialog.setNegativeButton("Cancel", null);


        // create and show the alert dialog
        AlertDialog dialog = penaltyDialog.create();
        dialog.show();

    }




    private void savePenalty(int penaltyType, int penaltyRunTeam, boolean sync, int benefitTeam,
                             boolean ballcount, boolean bowball, boolean batsball) {

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {

                    try {

                        Number num = bgRealm.where(Penalty.class).max("id");
                        int nextId = (num == null) ? 1 : num.intValue() + 1;

                        Penalty penalty = bgRealm.createObject(Penalty.class, nextId);

                        penalty.setMatchid(matchid);
                        penalty.setMatchID(matchID);
                        penalty.setInnings(currentInnings);
                        penalty.setType(penaltyType);
                        penalty.setPenaltyRun(penaltyRun);
                        penalty.setForTeam(penaltyRunTeam);
                        penalty.setBenefitTeam(benefitTeam);
                        penalty.setBallCount(ballcount);
//                        penalty.setBowball(bowball);
//                        penalty.setBatsball(batsball);

//                        if (penaltyType == 1)
                        penalty.setSync(sync);
//                        else if (penaltyType == 2)
//                            penalty.setSync(false);

                        bgRealm.copyToRealm(penalty);
                        Log.d("penalty", "savePenalty : " + penalty);


                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        } catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }
    }




//    public void setPenaltyOut(){
//
//        AlertDialog.Builder penaltyDialog = new AlertDialog.Builder(ScoringActivity.this);
//        penaltyDialog.setTitle("Penalty Type");
//        penaltyDialog.setSingleChoiceItems(R.array.penaltyTypeList, checkedItem, new DialogInterface.OnClickListener() {
//            @Override
//            public void onClick(DialogInterface dialog, int which) {
//
//                switch (which) {
//
//                    case 0:
//                        penaltyType = 1;
//                        str = "Fielding Penalty";
//                        penaltyRunTeam = fieldingTeamNo;
//                        break;
//
//                    case 1:
//                        penaltyType = 2;
//                        str = "Batting Penalty";
//                        penaltyRunTeam = battingTeamNo;
//
//                    default:
//                        Toast.makeText(getApplicationContext(), "please Select one Out Type", Toast.LENGTH_SHORT).show();
//                        break;
//
//
//                }
//                Toast.makeText(getApplicationContext(), oType + " selected", Toast.LENGTH_SHORT).show();
//
//            }
//
//        });
//
//        penaltyDialog.setPositiveButton("OK", new DialogInterface.OnClickListener() {
//            @Override
//            public void onClick(DialogInterface dialog, int which) {
//
//                penalty = true;
////                penaltyRun = 5;
//                totalExtras = totalExtras + penaltyRun;
////                var = extraCard.getPenalty();
////                extraCard.setPenalty(++var);
//
//
//                AlertDialog.Builder alertDialog = new AlertDialog.Builder(getApplicationContext());
//                alertDialog.setTitle(str);
////                   alertDialog.setMessage("This is BOUNDARY ?");
//                alertDialog.setNegativeButton("Ball Counted", new DialogInterface.OnClickListener() {
//                    public void onClick(DialogInterface dialog, int which) {
//
//                        ballCount = true;
//                        penaltyBallCounted();
////                        setOver(0);
////                        strikerBalls++;
//                    }
//                });
//                alertDialog.setPositiveButton("Ball Not Counted", new DialogInterface.OnClickListener() {
//                    public void onClick(DialogInterface dialog, int which) {
//
//                        ballCount = false;
//                    }
//                });
//
//                alertDialog.show();
//            }
//        });
//
//        penaltyDialog.setNegativeButton("Cancel", null);
//
//        // create and show the alert dialog
//        AlertDialog dialog = penaltyDialog.create();
//        dialog.show();
//
//    }



    public void penaltyBallCounted(){

        penaltyBalllCountDialog = new AlertDialog.Builder(UpdatedScoringActivity.this);
        penaltyBalllCountDialog.setIcon(R.drawable.ball);
        penaltyBalllCountDialog.setCancelable(false);
        penaltyBalllCountDialog.setTitle("Penalty Type");
        penaltyBalllCountDialog.setSingleChoiceItems(R.array.penaltyBallCountList, checkedItem, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                switch (which) {

                    case 0:
                        bowball = true;
                        batsball = false;
                        break;

                    case 1:
                        batsball = true;
                        bowball = false;
                        break;
                }
            }
        });


        penaltyBalllCountDialog.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();

                // Added on 17/12/2021
                setExtras();
                setExtraCard();
                if (penaltyType == 2)
                    setExtraEvent(false);
                else
                    setExtraEvent(true);

                tvTotalRuns.setText(String.valueOf(currentRuns));
                tvPlayer1Balls.setText(String.valueOf(player1Balls));
                tvPlayer2Balls.setText(String.valueOf(player2Balls));
                tvBowlerRuns.setText(String.valueOf(bwRun));
                //Updated on 27/07/2021
                if (HUNDRED)
                    tvBowlerOver.setText(String.valueOf(bt_balls));
                else
                    tvBowlerOver.setText(String.valueOf(new
                            DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));
                //== till here


//                ll_extras.setVisibility(View.VISIBLE);
//                if (extras) {
////                    tvExtrasType.setText(eType); Commented on 18/03/2021
////                    tv_extra_penalty.setVisibility(View.VISIBLE); // Added on18/03/2021
////                    tv_extra_penalty.setText(eType);   // Added on 18/03/2021
//                }
//
//                else if (out) {
//                    ll_extras.setVisibility(View.VISIBLE);
//                    tv_extraType.setVisibility(View.VISIBLE);
//                    tv_extraType.setText(eType);
//                }

            }
        });

        penaltyBalllCountDialog.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                ballCount = false;
                extraType = -1;
                penalty = false;
                // Added on18/03/2021
//                if (extras)
//                    tv_extra_penalty.setVisibility(View.INVISIBLE);
//                else if (out)
//                    tv_out_penalty.setVisibility(View.INVISIBLE);
                // === till here
//                        savePenalty(penaltyType, penaltyRunTeam);
//                penaltyRun = 5;

                // need to check
                if (penaltyType == 1) {
                    totalExtras = totalExtras - penaltyRun;
                    currentRuns = currentRuns - penaltyRun;
                    psRuns = psRuns - penaltyRun;
                }

                setPenalty();
            }
        });

        penaltyBalllCountDialog.show();

    }



    void editExtraCommentary(){

        comBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        comBuilder.setIcon(R.drawable.ball);
        comBuilder.setCancelable(false);
        comBuilder.setTitle("Enter the commentary");

        final EditText input = new EditText(this);

        input.setInputType(InputType.TYPE_CLASS_TEXT);
        input.setText(commentary);
        comBuilder.setView(input);
//        Log.d("Test", "inside setCommentry()");
        comBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {

            //            @Override
            public void onClick(DialogInterface dialog, int which) {

                if (input.getText().toString().equals(null)){
                    Toast.makeText(getApplicationContext(),
                            "Please enter the Run", Toast.LENGTH_SHORT).show();
                }

                else {
                    commentary = input.getText().toString();
                    Log.d("Test", "BuilderText : " + commentary);

                    if (!commentary.matches("")){

                        tvExtrasCom.setVisibility(View.VISIBLE);    // Added on 18/03/2021
                        tvExtrasCom.setText(commentary);

                    }
                    else {
                        Log.d("Test","buildertext = null");
                    }

                }
            }
        });

        comBuilder.setNegativeButton("CANCEL", null);

        AlertDialog alert = comBuilder.create();
        alert.show();

    }







    void extraToScoring() {
        ballType = 8;
        // Added on 22/09/2021
        if (wide || noBall)
            bCount = 0;
        else
            bCount = 1;
        // ====== till here
        confirm_extras = true;

        Log.d("Scoring", "extraToScoring, noball : "+noBall);
        Log.d("Scoring", "extraToScoring, runsOffBatNB : "+runsOffBatNB);
        Log.d("Scoring", "extraToScoring, runsOffBat : "+runsOffBat);
        Log.d("Scoring", "extraToScoring, wide : "+wide);
        Log.d("Scoring", "extraToScoring, eType : "+eType);
        Log.d("Scoring", "extraToScoring, extra : "+extra);
        Log.d("Scoring", "extraToScoring, extraRun : "+extraRun);
        Log.d("Scoring", "extraToScoring, extraType : "+extraType);
        Log.d("Scoring", "extraToScoring, penalty : "+penalty);

//        Log.d("extraToScoring", " matchid :"+matchid);
//        Log.d("extraToScoring", " matchID :"+matchID);

//        Intent i = new Intent(ExtrasActivity.this, ScoringActivity.class);
//        i.putExtra("extraType", type);
//        i.putExtra("extraRuns", extra);
//        i.putExtra("ballCount", ball);
//        i.putExtra("runsOffBat", runsoffBatExtra);
//        i.putExtra("extraType", extraType);
//        i.putExtra("ballType", ballType);
//        i.putExtra("boundary", boundary);
//        i.putExtra("commentary", commentary);
//
//        startActivity(i);



        Log.e("Scoring", "extraToScoring, strikerBalls 1 = " + strikerBalls);
        Log.e("Scoring", "extraToScoring, bye = " + bye);
        Log.e("Scoring", "extraToScoring, lb = " + lb);


        if (bye || lb) {
            Log.e("Scoring", "extraToScoring, bye/lb");

//            if (bye) {

            if (strID == player1ID) {
                ++player1Balls;
                strikerBalls = player1Balls;
                tvPlayer1Balls.setText(String.valueOf(player1Balls));
            }
            if (strID == player2ID) {
                ++player2Balls;
                strikerBalls = player2Balls;
                tvPlayer2Balls.setText(String.valueOf(player2Balls));
            }

            if (strID == ps1ID) {
                ++p1CB;
            }
            else if (strID == ps2ID) {
                ++p2CB;
            }
           /* }

            else if (lb) {


                if (strID ==player1ID) {
                    ++player1Balls;
                    strikerBalls = player1Balls;
                    tvPlayer1Balls.setText(String.valueOf(player1Balls));
                }
                if (strID == player2ID) {
                    ++player2Balls;
                    strikerBalls = player2Balls;
                    tvPlayer2Balls.setText(String.valueOf(player2Balls));
                }

                if (strID == ps1ID) {
                    ++p1CB;
                }
                else if (strID == ps2ID) {
                    ++p2CB;
                }
            }*/
            ++bt_balls; // Added on 26/07/2021
            ++bowlerBalls;
            setOver(extraRun);
        }

        else if (noBall)
            ++bowlerNoBall;


//        if (extraType == 4)
//            bowlerWide = bowlerWide + extra;

        out = false;
        setExtras();
        Log.e("Scoring", "extraToScoring, noball : "+noBall);
        Log.e("Scoring", "extraToScoring, strikerBalls 2 = " + strikerBalls);



//        displayCurrentOver(runsOffBat, 0, eType, extra);
//        displayCurrentOver();

        Log.d("Scoring", "extra to scoring, balltype: "+ballType);
        Log.d("Scoring", "extra to scoring, extraType: "+extraType);
        Log.d("Scoring", "extra to scoring, extra run : "+extra);
        Log.d("Scoring", "extra to scoring, runsOffBat: "+runsOffBat);
//        Log.d("Scoring", "extra to scoring, runsOffBatNB: "+runsOffBatNB);
       /* if (runsOffBat > 0) {
            wheel = true;
//            bwRun = bwRun + runsOffBat;
        }
        else
            wheel = false;*/


        syncBowler();

        syncBatsmann(strID,0, null, false, -1, false,
                false, false);
        Log.d("Partnership","extraToScoring 1, wicket : " + wicket);
        Log.d("Partnership","extraToScoring 1, psRuns : " + psRuns);
        Log.d("Partnership","extraToScoring 1, psBalls : " + psBalls);
        Log.d("Partnership","extraToScoring 1, player1ID : " + player1ID);
        Log.d("Partnership","extraToScoring 1, ps1ID : " + ps1ID);
        Log.d("Partnership","extraToScoring 1, p1CR : " + p1CR);
        Log.d("Partnership","extraToScoring 1, p1CB : " + p1CB);
        Log.d("Partnership","extraToScoring 1, player2ID: "+player2ID);
        Log.d("Partnership","extraToScoring 1, ps2ID : " + ps2ID);
        Log.d("Partnership","extraToScoring 1, p2CR : " + p2CR);
        Log.d("Partnership","extraToScoring 1, p2CB : " + p2CB);
        syncPartnership(wicket + 1, outType, 0, false, false);


        //save extra details to Extracard

        setExtraCard();

        /* Commented on 01/12/2021
        if (penalty && penaltyType == 2)
            setExtraEvent(false);
        else
            setExtraEvent(true);*/

        // Updated on 01/12/2021
        /* Commented on 17/12/2021
        if (penalty) {
            if (penaltyType == 2)
                setExtraEvent(false);
            else
                setExtraEvent(true);
        }
        else*/
        setExtraEvent(false);
        // === till here

        // Added on 07/06/2021
        if (wide || bye || lb || noBall || penalty)
            checkEndInnings();

//        Log.d("xtracard", "object ; "+extraCard);
//        Log.d("xtracard", "b ; "+extraCard.getByes());
//        Log.d("xtracard", "lb ; "+extraCard.getLb());
//        Log.d("xtracard", "nb ; "+extraCard.getNoBall());
//        Log.d("xtracard", "wd ; "+extraCard.getWide());
//        Log.d("xtracard", "p ; "+extraCard.getPenalty());

        // reset all keywords used in Extras

        resetExtra();

        tvTotalRuns.setText(String.valueOf(currentRuns));
        tvPlayer1Runs.setText(String.valueOf(player1Runs));
        tvPlayer1Balls.setText(String.valueOf(player1Balls));
        tvPlayer2Runs.setText(String.valueOf(player2Runs));
        tvPlayer2Balls.setText(String.valueOf(player2Balls));
        tvBowlerRuns.setText(String.valueOf(bwRun));
        //Updated on 27/07/2021
        if (HUNDRED)
            tvBowlerOver.setText(String.valueOf(bt_balls));
        else
            tvBowlerOver.setText(String.valueOf(new
                    DecimalFormat("##.#").format(setOverDisplay(bowlerOver, bowlerBalls))));

        popupExtra.dismiss();

       /* Commented on 07/09/2021
        if (checkFreeHit)
            checkFreeHitBall();*/

    }


    void setExtraSwap(/*int extraRun*/) {

        Log.d("extraRun", "setExtraSwap : " + extraRun);

        if (extraRun % 2 != 0)
            swap();

        else if (runsOffBat % 2 != 0)
            swap();

        else if ((out_run % 2) != 0)
            swap();

       /*  commented on 22/10/2020
        else if (crossed) *//*|| ((runsOffBat % 2) != 0)*//*
            swap();*/

        // added on 22/10/2020
        if (crossed)
            swap();
    }




    void setExtraEvent(boolean displayPenalty){

        Log.d("setExtraEvent", "runsOfbatNB : " + runsOffBatNB);
        Log.d("setExtraEvent", "runsOfbat : " + runsOffBat);
        Log.d("setExtraEvent", "displayPenalty : " + displayPenalty);
        Log.d("setExtraEvent", "modified : " + modified);
        Log.d("setExtraEvent", "udisplay : " + udisplay);
        Log.d("setExtraEvent", "extraType : " + extraType);
        Log.d("setExtraEvent", "ballType : " + ballType);

        udisplay = modified;

//        modified = tvCurrentOver.getText().toString();
        if (extraType == 0) {
//            if (displayPenalty)                                    // Added on 01/12/2021
//                modified = modified + "\t\tbp(" + extra + ")";     // Added on 01/12/2021
//            else                                                   // Added on 01/12/2021
            modified = modified + "\t\tb(" + extra + ")";
        } else if (extraType == 1) {
//            if (displayPenalty)                                    // Added on 01/12/2021
//                modified = modified + "\t\tlbp(" + extra + ")";    // Added on 01/12/2021
//            else                                                   // Added on 01/12/2021
            modified = modified + "\t\tlb(" + extra + ")";
        } else if (extraType == 2 || extraType == 7 || extraType == 8) {
//            if (displayPenalty)                                                   // Added on 01/12/2021
//                modified = modified + "\t\tnbp(" + (extra + runsOffBat) + ")";    // Added on 01/12/2021
//            else                                                                  // Added on 01/12/2021
            modified = modified + "\t\tnb(" + (extra + runsOffBat) + ")";
        } else if (extraType == 3) {
//            if (displayPenalty)                                     // Added on 01/12/2021
//                modified = modified + "\t\tnbbp(" + extra + ")";    // Added on 01/12/2021
//            else                                                    // Added on 01/12/2021
            modified = modified + "\t\tnbb(" + extra + ")";
        } else if (extraType == 4) {
//            if (displayPenalty)                                     // Added on 01/12/2021
//                modified = modified + "\t\twdp(" + extra + ")";     // Added on 01/12/2021
//            else                                                    // Added on 01/12/2021
            modified = modified + "\t\twd(" + extra + ")";
        } else if(extraType == 5) {
            if (displayPenalty)
                modified = modified + "\t\tp(" + penaltyRun + ")";
        }
        else if (extraType == 6) {
           /* if (displayPenalty)                                       // Added on 01/12/2021
                modified = modified + "\t\tnblbp(" + extra + ")";     // Added on 01/12/2021
            else*/                                                      // Added on 01/12/2021
            modified = modified + "\t\tnblb(" + extra + ")";
        } else
            modified = modified + "\t\t" + runsOffBat;

//        // modified on 01/12/2021
//        if ((extraType != 5) && displayPenalty) {
//            modified = modified + "p";//(" + penaltyRun + ")";
//        }

        tvCurrentOver.setText(modified);

        Log.d("DISPLAY", "35 modified = " + modified);
        Log.d("DISPLAY", "35 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket, ball,
                0, preInningsRuns, remainingRuns, remainingBalls, remainingOver, leadingRuns,
                innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo, fieldingTeamNo,
                player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID, runsOffBat,
                ballType, bCount, extraType, extra, 0, 0, null, 0,
                disNewBatsmanBattingOrder,penaltyType, penaltyRun, penaltyRunTeam, ballCount,
                penaltyBallCount, commentary, 0, mo, maiden, modified, udisplay, tco,0,
                sessionType, sessionID, endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs, declared,
                freeHit, false, inning_started, 0, 0, 0,
                null, pre_out, callBowlerAlert, wk_id, keeper_position, pre_wk_id,
                pre_wk_position, FORFEIT, forfeit_team, forfeit_innings, CONCEDE, conceded_team,
                forceEndingType, lunch_flag, tea_flag, dinner_flag);



        setExtraSwap();

        resetExtra();   // Added on 21/12/2021

        if (wheel) {
            setWagonWheelRegion(eventID);
        }

//        wheel = false;
    }



    void resetExtra(){

        extras = false;
        confirm_extras = false;
        bye = false;
        lb = false;
        wide = false;
        noBall = false;
        eType = "";
        extraType = -1;
        ballType = -1;
        bCount = 0; // Added on 22/09/2021
        extraRun = 0;
        ballExtra = 0;
        runsOffBat = 0;
        byeNB = false;
        lbNB = false;
        strike = false;
        runsOffBatNB = false;
        boundaryNB = false;
        noneNB = false;
        str = "";
        penalty = false;
        ballCount = false;
        bowball = false;
        batsball = false;
        commentary = "";
//        tvExtraCom.setText(commentary);
        endOfOver = false;
        checkedItem = -1;
    }





    public void setExtras(){
        int t = 0;

        if (noBall){

            bCount = 0; // Added on 22/09/2021

            if (totalInnings == 2)
                checkFreeHit = true;

            if (byeNB || lbNB){

                extra = extraRun + noballRun;
                mo = mo + noballRun + extraRun;
                Log.d("scoring", "setExtras, extraRun : "+extraRun+", noballRun : "+ noballRun);


                if (extras) {
                    if (strID == player1ID) {
                        ++player1Balls;
                        strikerBalls = player1Balls;
                    }
                    if (strID == player2ID) {
                        ++player2Balls;
                        strikerBalls = player2Balls;
                    }

                    if (strID == ps1ID) {
                        ++p1CB;
                    } else if (strID == ps2ID) {
                        ++p2CB;
                    }
                }

                bwRun = bwRun + noballRun;
                mo = mo + noballRun;
//                if (extraRun % 2 != 0)
//                    swap();
                currentRuns = currentRuns + extra;
                psRuns = psRuns + extra;
                setInningsRuns(currentInnings, currentRuns);
                if (currentInnings > 1 && currentInnings != 99 ) {
                    ll_remainings.setVisibility(View.VISIBLE);
//                    remainingRuns = remainingRuns - extra;

                    remainingRuns = remainingRuns - extra;
                    leadingRuns = leadingRuns + extra;

                    if (remainingRuns > 0) {
                        tvRemainingRuns.setText(String.valueOf(remainingRuns));
                    } else
                        ll_remainings.setVisibility(View.GONE);

                    if (leadingRuns > remainingRuns && totalInnings == 4) {
                        tvRemainingRuns.setText(String.valueOf(leadingRuns));
                        tvRemainingRunsText.setText("Leading Runs : ");
                    }

                    Log.d("Scoring", "setExtras, leadingRuns : " + leadingRuns);
                    Log.d("Scoring", "setExtras, remainingRuns : " + remainingRuns);

                }

                else
                    ll_remainings.setVisibility(View.GONE);



                if (byeNB)
                    string = "Noball + Byes";

                else
                    string = "Noball +  Leg Byes";
            }


            else if (runsOffBatNB){

                strike = true;
                extra = noballRun;
                mo = mo + noballRun + runsOffBat;

                bwRun = bwRun + noballRun;
                Log.d("scoring", "setExtras, runsOffBat : "+runsOffBat+", noballRun : "+ noballRun);
//                mo = mo + runsOffBat + noballRun;
                tvBowlerRuns.setText(String.valueOf(bwRun));

                if (!out) {

                    bwRun = bwRun + runsOffBat;

                    if (strID == player1ID) {
                        ++player1Balls;
                        strikerBalls = player1Balls;
                        player1Runs = player1Runs + runsOffBat;
                        strikerRuns = player1Runs;
//                    tvPlayer1Runs.setText(String.valueOf(player1Runs));
//                    tvPlayer1Balls.setText(String.valueOf(player1Balls));
                    }
                    if (strID == player2ID) {
                        ++player2Balls;
                        strikerBalls = player2Balls;
                        player2Runs = player2Runs + runsOffBat;
                        strikerRuns = player2Runs;
//                    tvPlayer2Runs.setText(String.valueOf(player2Runs));
//                    tvPlayer2Balls.setText(String.valueOf(player2Balls));
                    }

                    if (strID == ps1ID) {
                        ++p1CB;
                        p1CR = p1CR + runsOffBat;
                    }
                    else if (strID == ps2ID) {
                        ++p2CB;
                        p2CR = p2CR + runsOffBat;
                    }

//                    if (runsOffBat % 2 != 0)
//                        swap();

                    if (extras) {
                        if (runsOffBat == 0) {

                            if (strID == player1ID) {
                                ++player1Dots;
                                strikerDots = player1Dots;
                            }
                            if (strID == player2ID) {
                                ++player2Dots;
                                strikerDots = player2Dots;
                            }
                            ++bowlerDots;
                        }
                    }

                    currentRuns = currentRuns + runsOffBat;
                    psRuns = psRuns + runsOffBat;
                }

                currentRuns = currentRuns + noballRun;
                psRuns = psRuns + noballRun;
                setInningsRuns(currentInnings, currentRuns);
                if (currentInnings > 1 && currentInnings != 99) {
                    ll_remainings.setVisibility(View.VISIBLE);

                    remainingRuns = remainingRuns - (runsOffBat + noballRun);
                    leadingRuns = leadingRuns + (runsOffBat + noballRun);

                    if (remainingRuns > 0) {
                        tvRemainingRuns.setText(String.valueOf(remainingRuns));
                    } else
                        ll_remainings.setVisibility(View.GONE);

                    if (leadingRuns > remainingRuns && totalInnings == 4) {
                        tvRemainingRuns.setText(String.valueOf(leadingRuns));
                        tvRemainingRunsText.setText("Leading Runs : ");
                    }

                    Log.d("scoring", "setExtras 2, leadingRuns : " + leadingRuns);
                    Log.d("scoring", "setExtras 2, remainingRuns : " + remainingRuns);

                }

                else
                    ll_remainings.setVisibility(View.GONE);
//                    remainingRuns = remainingRuns - (runsOffBat + noballRun);
//                tvTotalRuns.setText(String.valueOf(currentRuns));
            }


            else if (boundaryNB){

                strike = true;
                extra = noballRun;

                mo = mo + noballRun;

                bwRun = bwRun + noballRun;
                Log.d("scoring", "setExtras, runsOffBat : "+runsOffBat+", noballRun : "+ noballRun + ", out : " + out);
                mo = mo + runsOffBat + noballRun;
                tvBowlerRuns.setText(String.valueOf(bwRun));

                if (!out) {

                    bwRun = bwRun + runsOffBat;

                    if (strID == player1ID) {
                        ++player1Balls;
                        strikerBalls = player1Balls;
                        player1Runs = player1Runs + runsOffBat;
                        strikerRuns = player1Runs;
//                    tvPlayer1Runs.setText(String.valueOf(player1Runs));
//                    tvPlayer1Balls.setText(String.valueOf(player1Balls));
                    }
                    if (strID == player2ID) {
                        ++player2Balls;
                        strikerBalls = player2Balls;
                        player2Runs = player2Runs + runsOffBat;
                        strikerRuns = player2Runs;
//                    tvPlayer2Runs.setText(String.valueOf(player2Runs));
//                    tvPlayer2Balls.setText(String.valueOf(player2Balls));

                    }

                    if (strID == ps1ID) {
                        ++p1CB;
                        p1CR = p1CR + runsOffBat;
                    }
                    else if (strID == ps2ID) {
                        ++p2CB;
                        p2CR = p2CR + runsOffBat;
                    }

                    /*if (runsOffBat == 0) {

                        if (strID == player1ID) {
                            ++player1Dots;
                            strikerDots = player1Dots;
                        }
                        if (strID == player2ID) {
                            ++player2Dots;
                            strikerDots = player2Dots;
                        }
                        ++bowlerDots;
                    }

                    else*/ if (runsOffBat == 4) {

                        if (strID == player1ID) {
                            ++player1F4s;
                            strikerF4s = player1F4s;
                        }
                        if (strID == player2ID) {
                            ++player2F4s;
                            strikerF4s = player2F4s;
                        }
                        ++bowlerF4s;
                    } else if (runsOffBat == 6) {

                        if (strID == player1ID) {
                            ++player1S6s;
                            strikerS6s = player1S6s;
                        }
                        if (strID == player2ID) {
                            ++player2S6s;
                            strikerS6s = player2S6s;
                        }
                        ++bowlerS6s;
                    }

                    currentRuns = currentRuns + runsOffBat;
                    psRuns = psRuns + runsOffBat;

                }

                currentRuns = currentRuns + noballRun;
                psRuns = psRuns + noballRun;
                setInningsRuns(currentInnings, currentRuns);
//                tvTotalRuns.setText(String.valueOf(currentRuns));


                if (currentInnings > 1 && currentInnings != 99){
                    ll_remainings.setVisibility(View.VISIBLE);

                    remainingRuns = remainingRuns - (runsOffBat + noballRun);
                    leadingRuns = leadingRuns + (runsOffBat + noballRun);

                    if (remainingRuns > 0) {
                        tvRemainingRuns.setText(String.valueOf(remainingRuns));
                    } else
                        ll_remainings.setVisibility(View.GONE);

                    if (leadingRuns > remainingRuns && totalInnings == 4) {
                        tvRemainingRuns.setText(String.valueOf(leadingRuns));
                        tvRemainingRunsText.setText("Leading Runs : ");
                    }

                    Log.d("scoring", "setExtras 3, leadingRuns : " + leadingRuns);
                    Log.d("scoring", "setExtras 3, remainingRuns : " + remainingRuns);
                }

                else
                    ll_remainings.setVisibility(View.GONE);

            }

            else if (noneNB) {

                strike = false;
                extra = noballRun;

                bwRun = bwRun + noballRun;
                Log.d("scoring", "setExtras, runsOffBat : "+runsOffBat+", noballRun : "+ noballRun + ", out : " + out);
                mo = mo + noballRun;
                tvBowlerRuns.setText(String.valueOf(bwRun));

//                 Commented on 01/12/2021
//                 unCommented on 28/10/2022 jipin
                if (extras) {
                    if (runsOffBat == 0) {

                        if (strID == player1ID) {
                            ++player1Balls;
                            strikerBalls = player1Balls;
                            ++player1Dots;
                            strikerDots = player1Dots;
                        }
                        if (strID == player2ID) {
                            ++player2Balls;
                            strikerBalls = player2Balls;
                            ++player2Dots;
                            strikerDots = player2Dots;
                        }
                        ++bowlerDots;
                    }
                }

                currentRuns = currentRuns + noballRun;
                psRuns = psRuns + noballRun;
                setInningsRuns(currentInnings, currentRuns);

                if (currentInnings > 1 && currentInnings != 99){
                    ll_remainings.setVisibility(View.VISIBLE);

                    remainingRuns = remainingRuns - (runsOffBat + noballRun);
                    leadingRuns = leadingRuns + (runsOffBat + noballRun);

                    if (remainingRuns > 0) {
                        tvRemainingRuns.setText(String.valueOf(remainingRuns));
                    } else
                        ll_remainings.setVisibility(View.GONE);

                    if (leadingRuns > remainingRuns && totalInnings == 4) {
                        tvRemainingRuns.setText(String.valueOf(leadingRuns));
                        tvRemainingRunsText.setText("Leading Runs : ");
                    }

                    Log.d("scoring", "setExtras 3, leadingRuns : " + leadingRuns);
                    Log.d("scoring", "setExtras 3, remainingRuns : " + remainingRuns);
                }

                else
                    ll_remainings.setVisibility(View.GONE);
            }


        }


        else if (wide){

            bCount = 0; // Added on 22/09/2021

            checkFreeHit = false;

            extra = extraRun + wideRun;
            mo = mo + wideRun + extraRun;
            Log.d("Scoring", "setExtra, extraRun : "+extraRun+", wideRun : "+wideRun);

//            if (extraRun % 2 != 0)
//                swap();
            currentRuns = currentRuns + extra;
            psRuns = psRuns + extra;
            setInningsRuns(currentInnings, currentRuns);
            bwRun = bwRun + extra ;
            bowlerWide = bowlerWide + extra;

            if (currentInnings > 1 && currentInnings != 99 ) {
                ll_remainings.setVisibility(View.VISIBLE);

//                if (currentInnings > 1 && currentInnings != 99){

                leadingRuns = leadingRuns + extra;
                remainingRuns = remainingRuns - extra;

                if (remainingRuns > 0) {
                    tvRemainingRuns.setText(String.valueOf(remainingRuns));
                }
                else
                    ll_remainings.setVisibility(View.GONE);

                if (leadingRuns > remainingRuns && totalInnings == 4) {
                    tvRemainingRuns.setText(String.valueOf(leadingRuns));
                    tvRemainingRunsText.setText("Leading Runs : ");
                }

                Log.d("scoring", "setExtras 4, leadingRuns : " + leadingRuns);
                Log.d("scoring", "setExtras 4, remainingRuns : " + remainingRuns);
            }

            else
                ll_remainings.setVisibility(View.GONE);

            totalExtras = totalExtras + extra;
        }


        else if (lb || bye){

            bCount = 1; // Added on 22/09/2021

            checkFreeHit = false;
            extra = extraRun;
            Log.d("Scoring", "setExtra, extraRun : "+extraRun);
//            if (extraRun % 2 != 0)
//                swap();
            currentRuns = currentRuns + extra;
            psRuns = psRuns + extra;
            remainingRuns = remainingRuns - extra;
            leadingRuns = leadingRuns + extra;
            setInningsRuns(currentInnings, currentRuns);
//            tvTotalRuns.setText(String.valueOf(currentRuns));
            if (currentInnings > 1){ //&& remainingRuns > 0) {

                ll_remainings.setVisibility(View.VISIBLE);

                if (remainingRuns > 0) {
                    tvRemainingRuns.setText(String.valueOf(remainingRuns));
                }
                else
                    ll_remainings.setVisibility(View.GONE);


                if (leadingRuns > remainingRuns && totalInnings == 4) {
                    tvRemainingRuns.setText(String.valueOf(leadingRuns));
                    tvRemainingRunsText.setText("Leading Runs : ");
                }

                Log.d("scoring", "setExtras 5, leadingRuns : " + leadingRuns);
                Log.d("scoring", "setExtras 5, remainingRuns : " + remainingRuns);
            }

            else
                ll_remainings.setVisibility(View.GONE);

            totalExtras = totalExtras + extra;
        }


        Log.d("penalty", "penalty : " + penalty);
        Log.d("penalty", "penaltyType : " + penaltyType);
        Log.d("penalty", "extras : " + extras);
        Log.d("penalty", "ballCount : " + ballCount);
        Log.d("penalty", "bowball : " + bowball);
        Log.d("penalty", "batsball : " + batsball);

        /*else*/ if (penalty) {

            if (penaltyType == 1) {     // fielding penalty, runs added to batting team

//                savePenalty(penaltyType, penaltyRunTeam, true, battingTeamNo);
                // didn't removed it when both undo & cancel
//                extra = penaltyRun;   Commented on 01/12/2021
                extra = extra + penaltyRun; // updated on 01/12/2021
//                mo = mo + penaltyRun;
                totalExtras = totalExtras + penaltyRun;

                currentRuns = currentRuns + penaltyRun;
                psRuns = psRuns + penaltyRun;
                setInningsRuns(currentInnings, currentRuns);

                if (currentInnings > 1 && currentInnings != 99) {
                    ll_remainings.setVisibility(View.VISIBLE);
//                                        penaltyType = 1;
                    leadingRuns = leadingRuns + penaltyRun;
                    if (remainingRuns > 0) {

                        remainingRuns = remainingRuns - penaltyRun;
//                                            leadingRuns = leadingRuns + penaltyRun;
                        tvRemainingRuns.setText(String.valueOf(remainingRuns));

                    }

                    if (leadingRuns > remainingRuns && totalInnings == 4) {
                        tvRemainingRuns.setText(String.valueOf(leadingRuns));
                        tvRemainingRunsText.setText("Leading Runs : ");
                    }

                }
                else {
                    ll_remainings.setVisibility(View.GONE);
                }
            }

            else if (penaltyType == 2) {    //batting penalty, runs added to fielding team

                extra = 0;

                if (totalInnings == currentInnings) {
                    remainingRuns = remainingRuns + penaltyRun;
//                    savePenalty(penaltyType, penaltyRunTeam, true, fieldingTeamNo);
                    if (currentInnings == 2) {
                        innings1Runs = innings1Runs + penaltyRun;
                    }
                    else {
                        if (!followon)
                            innings3Runs = innings3Runs + penaltyRun;
                    }
                    // didn't removed it when both undo & cancel
                }

                else if (SUPER_OVER) {

                    remainingRuns = remainingRuns + penaltyRun;
//                    savePenalty(penaltyType, penaltyRunTeam, true, fieldingTeamNo);
                    if (currentInnings == 100) {
                        so_inninngs1Runs = so_inninngs1Runs + penaltyRun;
                        Log.d("so_inninngs1Runs","setPenalty22 , : "+so_inninngs1Runs);
                    }
                }
//                else
//                    savePenalty(penaltyType, penaltyRunTeam, false, fieldingTeamNo);
            }

//            if (extras) { // Commented on 17/12/2021
            if (ballCount) {

                bCount = 1; // Added on 22/09/2021

                   /* Commneted on 17/12/2021
                   if (bowball) {

                        if (bye || lb || wide || byeNB || lbNB || runsOffBatNB || boundaryNB || noneNB) {

                        }

                        else {*/
                ++bowlerBalls;
                ++bt_balls; // Added on 26/07/2021
                ++bowlerDots;
//                        bowlerOver = bowlerOver + 0.1f;
                setOver(0);
//                        strikerBalls++;
                penaltyBallCount = 1;
                if (striker.matches(player1)) {
                    player1Balls++;
                    strikerBalls = player1Balls;
                    tvPlayer1Balls.setText(String.valueOf(player1Balls));
                    ++player1Dots;
                    strikerDots = player1Dots;
                }
                else if (striker.matches(player2)) {
                    player2Balls++;
                    strikerBalls = player2Balls;
                    tvPlayer2Balls.setText(String.valueOf(player2Balls));
                    ++player2Dots;
                    strikerDots = player2Dots;
                }

                if (strID == ps1ID) {
                    ++p1CB;
                } else if (strID == ps2ID) {
                    ++p2CB;
                }
//                        }
//                    }

/*                  COmmneted on 17/12/2021
                    else if (batsball) {
                        if (striker.matches(player1)) {
                            player1Balls++;
                            strikerBalls = player1Balls;
                            tvPlayer1Balls.setText(String.valueOf(player1Balls));
                            ++player1Dots;
                            strikerDots = player1Dots;
                        }
                        if (striker.matches(player2)) {
                            player2Balls++;
                            strikerBalls = player2Balls;
                            tvPlayer2Balls.setText(String.valueOf(player2Balls));
                            ++player2Dots;
                            strikerDots = player2Dots;
                        }

                        if (strID == ps1ID) {
                            ++p1CB;
                        } else if (strID == ps2ID) {
                            ++p2CB;
                        }
                    }
*/
            }
//            }


            if (penaltyType == 1) {
                penaltyTeam = battingTeamNo;
                savePenalty(penaltyType, penaltyRunTeam, true, battingTeamNo, ballCount, bowball, batsball);
            }

            else if (penaltyType == 2) {
                penaltyTeam = fieldingTeamNo;
                if ((totalInnings == currentInnings) || SUPER_OVER)
                    savePenalty(penaltyType, penaltyRunTeam, true, fieldingTeamNo, ballCount, bowball, batsball);

//                else if (SUPER_OVER)
//                    savePenalty(penaltyType, penaltyRunTeam, true, fieldingTeamNo, ballCount, bowball, batsball);

                else
                    savePenalty(penaltyType, penaltyRunTeam, false, fieldingTeamNo, ballCount, bowball, batsball);
            }
        }






        if (currentInnings == 1 || currentInnings == 99)
            ll_remainings.setVisibility(View.GONE);

        else {

            ll_remainings.setVisibility(View.VISIBLE);

            if (remainingRuns > 0)
                tvRemainingRuns.setText(String.valueOf(remainingRuns));
//            else if (leadingRuns >= 0 && totalInnings == 4) {
            if (leadingRuns > remainingRuns && totalInnings == 4) {
                tvRemainingRuns.setText(String.valueOf(leadingRuns));
                tvRemainingRunsText.setText("Leading Runs : ");
            }



            if (innings.matches("single")){

                tvRemainingRunsText.setText("Remaining Runs : ");
            }

            else {

                if (remainingRuns > 0) {
                    if (currentInnings == 4)
                        tvRemainingRunsText.setText("Remaining Runs : ");
                    else
                        tvRemainingRunsText.setText("Trial Runs : ");
                }

                else
                    tvRemainingRunsText.setText("Lead Runs : ");
            }
        }


        Log.d("setExtra", "ballType : " + ballType);
        Log.d("setExtra", "extras : " + extras + ",extraType : " + extraType +
                ", extra : " + extra + ", extraRun : " + extraRun + ", runsOffBat : "+ runsOffBat);
        Log.d("setExtra", "out : " + out + ", outType : " + outType + ", out_run : " + out_run);
        Log.d("setExtra", "strID : " + strID + ", strikerRuns : " + strikerRuns + ", strikerBalls : " + strikerBalls);
        Log.d("setExtra", "nstrID : " + nstrID + ", nonStrikerRuns : " + nonStrikerRuns +
                ", nonStrikerBalls : " + nonStrikerBalls);
        Log.d("setExtra", "player1ID : " + player1ID + ", player1Runs : " + player1Runs + ", player1Balls : " + player1Balls);
        Log.d("setExtra", "player2ID : " + player2ID + ", player2Runs : " + player2Runs + ", player2Balls : " + player2Balls);
        Log.d("setExtra", "psRuns : " + psRuns + ", psBalls : " + psBalls + ", psOver : " + psOver);
        Log.d("setExtra", "ps1ID : " + ps1ID + ", p1CR : " + p1CR + ", p1CB : " + p1CB);
        Log.d("setExtra", "ps2ID : " + ps2ID + ", p2CR : " + p2CR + ", p2CB : " + p2CB);
    }




    public void setExtraCard(/*boolean UNDO_LIMIT*/) {


        Log.d("Scoring", "setExtraCard, inside setExtraCard");
        Log.d("Scoring", "setExtraCard, UNDO_LIMIT : " + UNDO_LIMIT);
        Log.d("Scoring", "setExtraCard, penaltyType : " + penaltyType);

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgrealm) {

                    try {

                        ExtraCard extraCard = bgrealm.where(ExtraCard.class).equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).findFirst();

                        Log.d("Scoring", "setExtraCard, ExtraCard : "+extraCard);

                        if (extraCard == null) {

                            extraCard = new ExtraCard();
                            extraCard.setInnings(currentInnings);
                            extraCard.setMatchid(matchid);
                            extraCard.setMatchID(matchID);
                            extraCard.setTeam(battingTeamNo);

//                            newBowler();
                        }

                        ecByes = extraCard.getByes();
                        ecLB = extraCard.getLb();
                        ecNoball = extraCard.getNoBall();
                        ecWide = extraCard.getWide();
                        ecPenlaty = extraCard.getPenalty();
//                    Log.d("scoring", "object ; " + extraCard);
                        Log.d("scoring", "b4 b ; " + ecByes);
                        Log.d("scoring", "b4 lb ; " + ecLB);
                        Log.d("scoring", "b4 nb ; " + ecNoball);
                        Log.d("scoring", "b4 wd ; " + ecWide);
                        Log.d("scoring", "b4 p ; " + ecPenlaty);


                        if (bye) {
                            ecByes = ecByes + extraRun;
                        }

                        else
                        if (lb) {
                            ecLB = ecLB + extraRun;
                        }

                        else
                        if (wide) {
                            if (penaltyType == 1)
                                ecWide = ecWide + (extra - penaltyRun);
                            else
                                ecWide = ecWide + extra;
                        }

                        else
                        if (noBall) {
                            ++ecNoball;

                            if (byeNB) {
                                ecByes = ecByes + extraRun;
                            }

                            if (lbNB) {
                                ecLB = ecLB + extraRun;
                            }
                        }

//                            else
                        if (penalty) {
                            if (penaltyType == 1)
                                ++ecPenlaty;
                        }

                        Log.d("scoring", " b ; " + ecByes);
                        Log.d("scoring", " lb ; " + ecLB);
                        Log.d("scoring", " nb ; " + ecNoball);
                        Log.d("scoring", " wd ; " + ecWide);
                        Log.d("scoring", " p ; " + ecPenlaty);

                        // added om 31/07/2020
                        if (UNDO_LIMIT) {
                                /*extraCard.setByes(0);
                                extraCard.setLb(0);
                                extraCard.setWide(0);
                                extraCard.setNoBall(0);
                                extraCard.setPenalty(0);*/
                        }

                        else {  // updated om 31/07/2020
                            extraCard.setByes(ecByes);
                            extraCard.setLb(ecLB);
                            extraCard.setWide(ecWide);
                            extraCard.setNoBall(ecNoball);
                            extraCard.setPenalty(ecPenlaty);
                        }

                        bgrealm.insertOrUpdate(extraCard);
                        Log.d("scoring", " extraCard ; " + extraCard);

//                        }
//                    }catch(RealmPrimaryKeyConstraintException e){
//                        Toast.makeText(getApplicationContext(),
//                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
//                    }
//                }
//            });

                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });

        } catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }

    }


    void displayScoreCard(boolean declare, boolean forfeit){            // for displying scorecard

        displayProgress();
//        Log.d("displayScoreCard", " matchid :"+matchid);
        Log.d("score", "displayScoreCard, score 1 :"+score);
        Log.d("SUPER_OVER", "displayScoreCard, SUPER_OVER :"+SUPER_OVER);

//        if (score){
//
//            score = false;
//            Log.d("Scoring", "displayScoreCard, score 2 :"+score);
//            addsToBatsman();
//        }

        int status = realm.where(Match.class).equalTo("matchid", matchid).findFirst().getMatchStatus();
        Log.d("displayScoreCard", " status :"+status);
//        Log.d("displayScoreCard", " currentInnings :"+currentInnings);
        Intent i = new Intent(UpdatedScoringActivity.this, ScoreCardActivity.class);
        i.putExtra("matchid", matchid);
        i.putExtra("endofinnings", endOfInnings);
        i.putExtra("interval", interval);
        i.putExtra("session", session);
        i.putExtra("allout", allOUT);
//        i.putExtra("continue_match", continueMatch);
        i.putExtra("forfeit", forfeit);
        i.putExtra("forfeit_team", forfeit_team);
        i.putExtra("forfeit_innings", forfeit_innings);
        i.putExtra("declare", declare);
        i.putExtra("innings", currentInnings);
        i.putExtra("matchstatus", status);
        i.putExtra("inningsnotstarted", inningsNotStarted);
        i.putExtra("SUPER_OVER", SUPER_OVER);
        Log.d("displayScoreCard", " SUPER_OVER :"+SUPER_OVER);
        if (endOfDay || declare || endOfInnings || endOfMatch || allOUT || forfeit)//SUPER_OVER)
            i.putExtra("back_type", 2);
        else
            i.putExtra("back_type", 1);
        // added on 04/06/2020
        // to free memory
        if (endOfDay || declare || endOfInnings || endOfMatch || allOUT)
            freeMemory();
        ///////======== till here
        startActivity(i);
        finish();
        progress.dismiss();

//        endOfInnings = false;

//        startActivity(new Intent(ScoringActivity.this, Display.class));
    }


    void addsToBatsman(int battingTeamNo, int currentInnings){
        // for adding all non-substitute players from current batting team to Batsman table

        int i = 0;

        Log.d("Scoring", "addsToBatsman, method, matchid : "+matchid+", battingTeamNo"+battingTeamNo);

        RealmResults<Player> resultb = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", battingTeamNo).
                equalTo("retired", false).
                equalTo("retired_concussion", false).    // added on 27/02/2021
                        equalTo("substitute", false).findAll();

        resultb.load();
        for (Player player : resultb) {

            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm realm) {

                    Batsman batsmann = realm.where(Batsman.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).
                            equalTo("team", battingTeamNo).
//                            equalTo("retired_concussion", false).    // added on 27/02/2021
        equalTo("batsman_pID", player.getPlayerID()).findFirst();


                    Log.e("Scoring", "addsToBatsman, batsman : "+batsmann);

                    if (batsmann == null){

                        Number num = realm.where(Batsman.class).max("batsmanID");
                        int batId = (num == null) ? 1 : num.intValue() + 1;
//                        int batId = RandomNumber.generate("Batsman");
                        batsmann = realm.createObject(Batsman.class, batId);
                        batsmann.setBatsman_pID(player.getPlayerID());
                        batsmann.setMatchid(matchid);
                        batsmann.setMatchID(matchID);
//                        batsmann.setBatsmanName(player.getPlayerName());
                        batsmann.setTeam(battingTeamNo);
                        batsmann.setInnings(currentInnings);

                        /*Number pos = realm.where(Batsman.class).
                                equalTo("team", team).
                                equalTo("innings", currentInnings).max("position");
                        int nextPos = (pos == null) ? 1 : pos.intValue() + 1;
                        batsmann.setPosition(nextPos);*/

                        Log.d("Scoring", "addsToBatsman, method, player.getPlayerID() : "+player.getPlayerID());
//                        Log.d("Scoring", "addsToBatsman, method, nextPos : "+nextPos);
                    }

                    Log.d("Scoring", "addsToBatsman, method, player : "+player);

                    realm.insertOrUpdate(batsmann);
                }
            });

        }

    }



    void resetBatsmanTable(){

        RealmResults<Batsman> results = realm.where(Batsman.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).
                equalTo("team", battingTeamNo).
                equalTo("playing", false).findAll();

        if (!realm.isInTransaction()) {
            realm.beginTransaction();
        }

        if (results.isLoaded()) {
            for (Batsman batsman : results) {
                if (batsman.getBatsman_pID() == strID || batsman.getBatsman_pID() == nstrID)
                    continue;
                batsman.deleteFromRealm();
            }
            realm.commitTransaction();
        }

        else
            Log.d("Scoring", "resetBatsmanTable, result : "+results);

//        addsToBatsman();

    }




    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.scoring_menu_options, menu);//Menu Resource, Menu
        // Added on 29/07/2021
        MenuItem item1 = menu.findItem(R.id.mo_end_over);
        MenuItem item2 = menu.findItem(R.id.mo_change_match_over);
        if (HUNDRED) {
            item1.setTitle("End 5 Balls");
            item2.setTitle("Reduce Match Balls");
        } else {
            item1.setTitle("End Over");
            item2.setTitle("Reduce Match Over");
        }
        // == till here
        return true;
    }

    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        MenuItem checkable = menu.findItem(R.id.mo_update_wagonwheel);
        checkable.setChecked(wheel);//isChecked);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {

            case R.id.mo_end_over:
                if (SUPER_OVER)
                    displayError("You can not force end the over in super over");
                else
                    forceEndOver();
                return true;

                /*// commented on 30/02/2020
            case R.id.mo_end_day:
                if (totalInnings == 4) {
                    if (session && (sessionID == 7 || sessionID == 9 || sessionID == 11))
                        endOfDay(2, 0);
                    else
                        displayError("End of the day can give only after End Session");
                }
                else {
//                    displayError("You can not give end of day to single innings match");
                    displayError("No end of day for single innings match");
                }
                return true;*/

            case R.id.mo_end_innings:
                if (SUPER_OVER)
                    displayError("You can not force end the super over innings");
                else
                    forceEndInnings(0, 0);
                return true;

            case R.id.mo_forfeit:
                if (innings.matches("multi")) {

                    if (currentInnings == totalInnings) {
                        displayError("Forfeit can not apply on mo_change_team_namelast innings");
                    } else {

                        if (currentOver > 0f) {
                            displayError("Innings already started. Forfeit can not apply.");
                        }
                        else if (currentOver == 0f) {
                            applyForfeit();
                        }
                    }
                }
                else {
                    displayError("Forfeit can not apply on single innings match");
                }
                return true;

            case R.id.mo_end_match:
                if (SUPER_OVER)
                    displayError("You can not force end the match while playing super over");
                else
                    forceEndMatch();
                return true;

            case R.id.mo_edit_match_officials:
                if (SUPER_OVER)
                    displayError("You can not edit match details while playing super over");
                else
                    addMatchOfficials();
                return true;

            case R.id.mo_add_match_note:
                addMatchNote();
                return true;

            case R.id.mo_change_team_name:
                if (SUPER_OVER)
                    displayError("You can not change Team name at Super Over innings");

                else
//                    changeTeamName();
                    updateTeam();
                return true;

            case R.id.mo_change_player_name:
                if (SUPER_OVER)
                    displayError("You can not change players' name at Super Over");
                else
                    playerList();
                return true;

            /*Added on 02/03/2021 & commented on 03/03/2021
            case R.id.mo_absent:
                setAbsent();
                return true;*/

            case R.id.mo_powerplay:
                if (SUPER_OVER)
                    displayError("No Power play can set at Super Over innings");
                else
                    setPowerPlay();
                return true;

            case R.id.mo_change_match_over:
                if (SUPER_OVER)
                    displayError("You can not change the over in Super Over");
                else if (innings.matches("multi"))
                    displayError("You can not change the over in Multi innings match");
                else if (innings.matches("single"))
                    changeMatchOver();
                return true;

            case R.id.mo_apply_substitution:
                if (SUPER_OVER)
                    displayError("Substitution or Concussion can not apply on Super Over innings");
                else
                    applySubstitution();
                return true;

            case R.id.mo_update_wagonwheel:
                wheel = !item.isChecked();
                item.setChecked(wheel);
                updateWagonWheel();
                return true;
            /*default:
                return false;*/

            // ADDED On 27/02/2021
            case R.id.mo_change_wk:
                changeWicketkeeper(1);
                return true;

            case R.id.mo_substitute_wk:
                changeWicketkeeper(2);
                return true;

            default:
                return super.onOptionsItemSelected(item);

        }
    }



    // Added on 01/03/2021
    public void applyForfeit() {

        String message = "";
        if (currentInnings == 1) {
            message = "Apply fofeit on 1st innings ?";
        }
        else if (currentInnings == 2) {
            message = "Apply fofeit on 2nd innings ?";
        }
        else if (currentInnings == 3) {
            message = "Apply fofeit on 3rd innings ?";
        }

        AlertDialog.Builder forfeitBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        forfeitBuilder.setIcon(R.drawable.ball);
        forfeitBuilder.setCancelable(false);
        forfeitBuilder.setTitle(message);
        forfeitBuilder.setNegativeButton("OK", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {

                dialog.dismiss();
                Log.d("FORFEIT", "applyForfeit 1, currentInnings : " + currentInnings);

                final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(UpdatedScoringActivity.this,
                        android.R.layout.select_dialog_singlechoice);

                arrayAdapter.add(teamA);
                arrayAdapter.add(teamB);

                AlertDialog.Builder alert1 = new AlertDialog.Builder(UpdatedScoringActivity.this);
                alert1.setIcon(R.drawable.ball);
                alert1.setCancelable(false);
                alert1.setTitle("Forfeit is declared by");
                alert1.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
                alert1.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        dialog.dismiss();

                        String strName = arrayAdapter.getItem(which);
                        forfeit_team = which + 1;
                        Log.d("FORFEIT", "applyForfeit 2, forfeit_team : " + forfeit_team);
                        Log.d("FORFEIT", "applyForfeit 3, which : " + which);

                        if (checkForfeit(forfeit_team)) {

                            FORFEIT = true;
                            String str1 = "";
                            if (currentInnings == 1)
                                str1 = "1st innings by ";
                            else if (currentInnings == 2)
                                str1 = "2nd innings by ";
                            else if (currentInnings == 3)
                                str1 = "3rd innings by ";

                            Log.d("FORFEIT", "applyForfeit 9, FORFEIT : " + FORFEIT);

                            AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
                            builderInner.setIcon(R.drawable.ball);
                            builderInner.setCancelable(false);
                            dialog.dismiss();
//                            builderInner.setMessage(strName);
                            builderInner.setTitle("Forfeit is applied on " + str1 + strName);

                            builderInner.setPositiveButton("CONFIRM", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {

                                    // Added on 02/03/2021
                                    dialog.dismiss();
                                    forfeit_innings = currentInnings;
                                    ballType = 26;
                                    bCount = 0; // Added on 22/09/2021
                                    declared = false;
                                    Log.d("FORFEIT", "applyForfeit 10, forfeit_innings : " + forfeit_innings);
                                    Log.d("FORFEIT", "applyForfeit 11, ballType : " + ballType);
                                    updateMatch(FORFEIT, forfeit_team, forfeit_innings, CONCEDE, conceded_team);
                                    // Added on 10/09/2021
                                    if (strID != 0)
                                        syncBatsmann(strID, 0, null, false, -1, false,
                                                false, false);
                                    if (nstrID != 0)
                                        syncBatsmann(nstrID, 0, null, false, -1, false,
                                                false, false);
                                    syncBowler();
                                    // === till here
                                    setEndInnings(false, ballType);
                                    displayScoreCard(false, FORFEIT);
                                }
                            });

                            builderInner.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                    forfeit_team = 0;
                                    FORFEIT = false;
                                    forfeit_innings = 0;
                                    ballType = -1;
                                    bCount = 0; // Added on 22/09/2021
                                }
                            });

                            builderInner.show();
                        }

                        else {
                            forfeit_team = 0;
                            FORFEIT = false;
                            forfeit_innings = 0;
                            ballType = -1;
                            bCount = 0; // Added on 22/09/2021
                            displayError("Selected team already done forfeit");
                        }
                    }
                });

                alert1.show();

            }
        });

        forfeitBuilder.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                forfeit_team = 0;
                FORFEIT = false;
                forfeit_innings = 0;
                ballType = -1;
                bCount = 0; // Added on 22/09/2021
            }
        });
        forfeitBuilder.show();
    }

    // till here =============== 01/03/2021


    //Added on 02/03/2021
    public boolean checkForfeit(int forfeit_team) {

        boolean flag_forfeit = false;

        Log.d("FORFEIT", "checkForfeit 4, flag_forfeit : " + flag_forfeit);
        Log.d("FORFEIT", "checkForfeit 5, forfeit_team : " + forfeit_team);

        Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
        if (match != null) {
            Log.d("FORFEIT", "checkForfeit 6, match : " + match);
            if (forfeit_team == 1) {
                if (match.getTeamA_forfeit() == 0) {
                    flag_forfeit = true;
                }
                else if (match.getTeamA_forfeit() == 1) {
                    flag_forfeit = false;
                }
                Log.d("FORFEIT", "checkForfeit 7.1, flag_forfeit : " + flag_forfeit);
            }
            else if (forfeit_team == 2) {
                if (match.getTeamB_forfeit() == 0) {
                    flag_forfeit = true;
                }
                else if (match.getTeamB_forfeit() == 1) {
                    flag_forfeit = false;
                }
                Log.d("FORFEIT", "checkForfeit 7.2, flag_forfeit : " + flag_forfeit);
            }
        }
        Log.d("FORFEIT", "checkForfeit 8, flag_forfeit : " + flag_forfeit);
        return  flag_forfeit;
    }


    private void updateMatch(boolean forfeit, int forfeit_team, int innings, boolean concede, int conceded_team) {

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {

                    Match match = bgRealm.where(Match.class).
                            equalTo("matchid", matchid).findFirst();

                    if (match != null) {

                        if (forfeit) {
                            if (forfeit_team == 1) {
                                match.setTeamA_forfeit(1);
                                match.setTeamA_forfeit_innings(innings);
                            } else if (forfeit_team == 2) {
                                match.setTeamB_forfeit(1);
                                match.setTeamB_forfeit_innings(innings);
                            }

                            bgRealm.copyToRealm(match);
                            Log.d("FORFEIT", "updateMatch 12, innings : " + innings);
                            Log.d("FORFEIT", "updateMatch, match : " + match);
                            Log.d("FORFEIT", "updateMatch, FORFEIT : " + FORFEIT);
                            Log.d("FORFEIT", "updateMatch, forfeit_team : " + forfeit_team);
                            Log.d("FORFEIT", "updateMatch, forfeit_innings : " + forfeit_innings);
                        }

                        else if (concede) {
                            match.setCONCEDE(concede);
                            match.setConceded_team(conceded_team);
                            match.setConceded_innings(innings);
                            bgRealm.copyToRealm(match);
                            Log.d("CONCEDE", "updateMatch 4, match : " + match);
                            Log.d("CONCEDE", "updateMatch 5, concede : " + concede);
                            Log.d("CONCEDE", "updateMatch 6, conceded_team : " + conceded_team);
                            Log.d("CONCEDE", "updateMatch 7, innings : " + innings);
                        }
                    }

                }
            });
        } catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }
    }



    void addMatchOfficials() {

        // Commented on 08/11/2021
//        Intent i = new Intent(UpdatedScoringActivity.this, AddMatchOfficials.class);
        Intent i = new Intent(UpdatedScoringActivity.this, AddEditOfficials.class);
        i.putExtra("matchid", matchid);
        i.putExtra("matchID", matchID);
        i.putExtra("eventId", eventID);
        i.putExtra("score", score);
        startActivity(i);

    }



    void updateWagonWheel() {

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {

//                                try {

                    Match match = bgRealm.where(Match.class).
                            equalTo("matchid", matchid).findFirst();

                    if (match != null) {
                        match.setWagonwheel(wheel);

                        bgRealm.copyToRealm(match);

                        if (wheel)
                            displayError("Display wagonwheel is selected now");
                        else
                            displayError("Display wagonwheel is not selected now");
                    }

//                                } catch (JSONException e) {
//                                    e.printStackTrace();
//                                } catch (RealmPrimaryKeyConstraintException e) {
//                                    Toast.makeText(getApplicationContext(),
//                                            "Primary Key exists, Press Update instead",
//                                            Toast.LENGTH_SHORT).show();
//                                }
                }
            });
        } catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }
    }



    void endOfMatch(){

        Log.d("endOfMatch", "endOfMatch,");

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm realm) {

                    try {

                        Match match = realm.where(Match.class).
                                equalTo("matchid", matchid).findFirst();

                        if (match != null) {
                            match.setMatchStatus(1);    // 1-> end of match
                            match.setScoring(false);
                            match.setScoreCard(true);

                            realm.copyToRealmOrUpdate(match);

                            displayScoreCard();
                        }

                        Log.d("endOfMatch", "endOfMatch, match : " + match);
                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }


    }


    void displayScoreCard(){

        Intent i = new Intent(UpdatedScoringActivity.this, ScoreCardActivity.class);
        i.putExtra("matchid", matchid);
        i.putExtra("endofinnings", endOfInnings);
        i.putExtra("endofmatch", endOfMatch);
        i.putExtra("innings", currentInnings);
        i.putExtra("matchstatus", status);
        i.putExtra("SUPER_OVER", SUPER_OVER);
        i.putExtra("concede", CONCEDE);
//        i.putExtra("follow_on", followon);
        i.putExtra("back_type", 2);
        startActivity(i);
        finish();
    }




    private void setFOW(int dismissedPlayerID, boolean extras){         // adding dismissed players to FOW table

        RealmResults<FOW> result= realm.where(FOW.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).findAll();

        FOW tfow = new FOW();

        if (result.isEmpty())
            tem = "" ;

        else {
            tfow = result.last();

            if (tfow == null)
                tem = "";
            else
                tem = tfow.getOver();
        }

        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm bgRealm) {

                try {


                    Number num = bgRealm.where(FOW.class).max("fowID");
                    int nextId = (num == null) ? 1 : num.intValue() + 1;

                    FOW fow = bgRealm.createObject(FOW.class, nextId);

//                    fow = realm.createObject(FOW.class);
                    fow.setMatchid(matchid);
                    fow.setMatchID(matchID);
                    fow.setInnings(currentInnings);
                    fow.setTeam(battingTeamNo);
                    fow.setRun(currentRuns);
                    fow.setWicket(wicket);
                    fow.setBalls(totalBalls);
                    fow.setDismissedPlayerID(dismissedPlayerID);
                    Log.d("scoring", "setFOW, currentOver : " +
                            (String.valueOf(new DecimalFormat("##.#").format(currentOver))));

                    if (extras) {
                        Log.d("scoring", "setFOW, tem : " + tem);
                        Log.d("scoring", "setFOW, extras : " + extras +
                                ", currentOver : " + (String.valueOf(new DecimalFormat("##.#").format(currentOver)) + 0.1));

                        Log.d("scoring", "setFOW, currentOver : " + (new DecimalFormat("##.#").format(currentOver)));
                        Log.d("scoring", "setFOW, currentOver new : " +
                                (new DecimalFormat("##.#").format(currentOver)) + ".1");

                        String xyz1 = (new DecimalFormat("##.#").format(currentOver)) + ".1";
                        String xyz2 = (new DecimalFormat("##.#").format(currentOver)) + ".2";
                        String xyz3 = (new DecimalFormat("##.#").format(currentOver)) + ".3";
                        String xyz4 = (new DecimalFormat("##.#").format(currentOver)) + ".4";
                        String xyz5 = (new DecimalFormat("##.#").format(currentOver)) + ".5";

                        if (tem == null || tem.matches("") || tem.matches(String.valueOf(currentOver)))
                            fow.setOver(xyz1);
                        else
                        if (xyz1.matches(tem))
                            fow.setOver(xyz2);
                        else
                        if (xyz2.matches(tem))
                            fow.setOver(xyz3);
                        else
                        if (xyz3.matches(tem))
                            fow.setOver(xyz4);
                        else
                        if (xyz4.matches(tem))
                            fow.setOver(xyz5);

                    }

                    else
                        fow.setOver(String.valueOf(new DecimalFormat("##.#").format(currentOver)));

//                    fow.setBatsmanName(dismissedPlayer);


                    bgRealm.insertOrUpdate(fow);
                    Log.d("SetFOW", "fow  : "+fow);

                }

                catch (RealmException e){

                    Log.d("SetFOW", "Exception  : "+e);
                }
            }

        });
    }





    private void addMatchNote(){

        Intent intent = new Intent(UpdatedScoringActivity.this, MatchNoteListActivity.class);
        intent.putExtra("matchid", matchid);
        intent.putExtra("matchID", matchID);
        intent.putExtra("innings", currentInnings);
        intent.putExtra("over", currentOver);
        startActivity(intent);

    }




/*
    COMMENTED ON 08/10/2021
    // Upated code is given at end
    private void changeTeamName(){

        String[] players = {teamA, teamB};

//        selectFielder();

        final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(UpdatedScoringActivity.this,
                android.R.layout.select_dialog_singlechoice);

        arrayAdapter.add(teamA);
        arrayAdapter.add(teamB);

        teamBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        teamBuilder.setIcon(R.drawable.ball);
        teamBuilder.setCancelable(false);
        teamBuilder.setTitle("Select Team");
        teamBuilder.setNegativeButton("CANCEL", null);

        teamBuilder.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                String strName = arrayAdapter.getItem(which);
                int tteam = which */
    /*+ 1*//*
;

                Log.d("Scoring","changeTeamName, strName : " + strName + ", which : " + which);
//                dialog.dismiss();
                AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
                builderInner.setIcon(R.drawable.ball);
                builderInner.setCancelable(false);
                dialog.dismiss();
                builderInner.setMessage(strName);
                builderInner.setTitle("Your Selected Team is");

                builderInner.setPositiveButton("CONFIRM", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog,int which) {

                        AlertDialog.Builder tBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
                        tBuilder.setIcon(R.drawable.ball);
                        tBuilder.setCancelable(false);
                        tBuilder.setTitle("Enter the new name");

                        final EditText input = new EditText(UpdatedScoringActivity.this);

//                        input.setInputType(InputType.TYPE_CLASS_TEXT);
                        input.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_WORDS);
                        input.setText(strName);
                        tBuilder.setView(input);
                        tBuilder.setPositiveButton("CONFIRM", new DialogInterface.OnClickListener() {

                            //            @Override
                            public void onClick(DialogInterface dialog, int which) {

                                Log.d("Scoring","changeTeamName 2 , strName : " + strName + ", which : " + tteam);

                                if (input.getText().toString().equals("")){
//                                    Toast.makeText(getApplicationContext(),
//                                            "Please enter a valid name", Toast.LENGTH_SHORT).show();
                                    displayWarning("Please enter a valid team name");
                                    changeTeamName();
                                }

                                else {

                                    teamName = input.getText().toString();
                                    Log.d("Scoring", "new team Name : " + teamName);

                                    if (!teamName.matches("")){
                                        if (tteam == 0) {
                                            if (teamName.matches(teamB)) {
                                                displayWarning("Both team names can not be same");
                                                Log.d("Scoring","changeTeamName, TeamName = teamB");
                                            }
                                            else {
                                                newTeamName(strName, teamName, tteam);
                                                postTeam(tteam + 1, teamName, teamB);
                                            }
                                        }

                                        else if (tteam == 1) {
                                            if (teamName.matches(teamA)) {
                                                displayWarning("Both team names can not be same");
                                                Log.d("Scoring","changeTeamName, TeamName = teamA");
                                            }
                                            else {
                                                newTeamName(strName, teamName, tteam);
                                                postTeam(tteam + 1, teamName, teamA);
                                            }
                                        }
                                    }
                                    else {
                                        Log.d("Scoring","changeTeamName, TeamName = null");
                                    }

                                }
                            }
                        });

                        tBuilder.setNegativeButton("CANCEL",null);

                        AlertDialog alert = tBuilder.create();
                        alert.show();

                        dialog.dismiss();

                    }
                });

                builderInner.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        changeTeamName();
                    }
                });
//
                builderInner.show();
//                dialog.dismiss();
            }
        });
        teamBuilder.show();
    }
*/



    void displayWarning(String message) {

        AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
        builderInner.setIcon(R.drawable.ball);
        builderInner.setCancelable(false);
        builderInner.setMessage(message);
        builderInner.setTitle("Warning");

        builderInner.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        builderInner.show();
    }



    // added on 12/09/2020
    public void postTeam(String teamA, String teamB) {

        if (isNetworkAvailable()) {

            JSONObject json_match = new JSONObject();
//            JSONObject json_name1 = new JSONObject();
//            JSONObject json_name2 = new JSONObject();
//            JSONObject json_nameB1 = new JSONObject();
//            JSONObject json_nameB2 = new JSONObject();
//            JSONObject temp_json_name = new JSONObject();
//            JSONObject json_team = new JSONObject();
//            JSONObject json_teamA = new JSONObject();
            JSONObject json_teamB = new JSONObject();
            JSONObject json_feed = new JSONObject();
            JSONArray array = new JSONArray();

            try {

                Match match = realm.where(Match.class).
                        equalTo("matchid", matchid).
                        findFirst();
                if (match != null) {

                    json_match.put("matchID", matchID);
                    json_match.put("TeamA", teamA);
                    json_match.put("TeamAID", match.getTeamAId());
                    json_match.put("TeamB", teamB);
                    json_match.put("TeamBID", match.getTeamBId());


                    array.put(json_match);
//                    array.put(json_teamA);
//                    array.put(json_teamB);

                    json_feed.put("EditTeamName", array);
                }




            } catch (JSONException e) {
                Log.d("EDIT_TEAM", "Scoring, JSONException : " + e);
            }


            JSONObject postparams = new JSONObject();
            try {
                postparams.put("title", "CHASE_POST");
                postparams.put("feed", json_feed);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            Log.e("EDIT_TEAM", "Scoring, postparams : " + postparams);

            JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                    Constants.CHASE_CRICKET_MATCH_API, postparams,
                    new Response.Listener<JSONObject>() {
                        @Override
                        public void onResponse(JSONObject response) {

                            Log.d("EDIT_TEAM", "Scoring, response : " + response);

                            // Added on 11/11/2021
                            Realm realm = null;
                            try {
                                config = new RealmConfiguration.Builder()
                                        .name(AppConstants.GAME_ID + ".realm")
                                        .deleteRealmIfMigrationNeeded()
                                        .build();
                                realm = Realm.getInstance(config);
                                realm.executeTransaction(new Realm.Transaction() {
                                    @Override
                                    public void execute(Realm bgRealm) {

                                        try {

                                            Match match1 = bgRealm.where(Match.class).
                                                    equalTo("matchID",matchID).
                                                    findFirst();
                                            if (match1 != null) {
                                                match1.setTeamA_sync(1);
                                                match1.setTeamB_sync(1);
                                                bgRealm.copyToRealm(match1);
                                                Log.d("EDIT_TEAM", "save, match : " + match1);
                                            }
                                        } catch (RealmPrimaryKeyConstraintException e) {
                                            progress.dismiss();
                                            Toast.makeText(getApplicationContext(),
                                                    "Primary Key exists, Press Update instead",
                                                    Toast.LENGTH_SHORT).show();
                                        }
                                    }
                                });
                            } catch (RealmException e) {
                                Log.d("test", "Exception : " + e);
                            } finally {
                                if (realm != null) {
                                    realm.close();
                                }
                            }

                            // === till here

                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {

//                                progress.dismiss();
                            Log.e("EDIT_TEAM", "Scoring, Error Message is  : " + error.getMessage());

                        }
                    });

            MyApplicationClass.getInstance(getApplicationContext()).addToRequestQueue(jsonObjReq, "postRequest");
            Log.d("EDIT_TEAM", "Scoring, jsonObjReq  : " + jsonObjReq);
            Log.d("EDIT_TEAM", "Scoring, postparams  : " + postparams);


        }

        else {
            Log.d("EDIT_TEAM", "Scoring, network not available");
        }
    }



    private void newTeamName(String teamAName, String teamBName){

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgrealm) {

                    try {

                        Match match = bgrealm.where(Match.class).
                                equalTo("matchid", matchid).findFirst();

                        if (match != null) {
                           /* Commented on 08/10/2021
                            if (teamid == 0) {
                                teamA = newTeamName;
                                match.setTeamA(teamA);
                                match.setTeamA_sync(0);
                            }
                            else if (teamid == 1) {
                                teamB = newTeamName;
                                match.setTeamB(teamB);
                                match.setTeamB_sync(0);
                            }*/

                            // Added on 08/10/2021

                            teamA = teamAName;
                            teamB = teamBName;

                            match.setTeamA(teamA);
                            match.setTeamB(teamB);

                            match.setTeamA_sync(0);
                            match.setTeamB_sync(0);


                            bgrealm.copyToRealmOrUpdate(match);
                        }
                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("scoring", "onclick, Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }

        tvTeamA.setText(teamA);
        tvTeamB.setText(teamB);
        Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
        match_id.setText(String.valueOf(match != null ? match.getD4s_matchid() : 0));
        if (battingTeamNo == 1) {
            tvBattingTeam.setText(teamA);
            tvFieldingTeam.setText(teamB);
        }

        else if (battingTeamNo == 2) {
            tvBattingTeam.setText(teamB);
            tvFieldingTeam.setText(teamA);
        }
    }



    private void endOfDay(int flag, int i_flag) {

        AlertDialog endOfDayAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        endOfDayAlert.setIcon(R.drawable.ball);
        endOfDayAlert.setCancelable(false);
        endOfDayAlert.setTitle("End of Day ?");
        endOfDayAlert.setButton(AlertDialog.BUTTON_POSITIVE, "CONFIRM",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();

                        endOfDay = true;

                        // added on 30/04/2020

                        session = true;
                        sessionID = 11;
                        sessionType = "SE3";
                        disableButtons(1);
                        setMatchStatus(sessionType, sessionID);
                        // till this

                        Log.d("so_inninngs1Runs","endOfDay23 , : "+so_inninngs1Runs);
                        ballType = 16;
                        bCount = 0; // Added on 22/09/2021
                        Log.d("DISPLAY", "36 modified = " + modified);
                        Log.d("DISPLAY", "36 udisplay = " + udisplay);
                        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls,
                                wicket, ball, 0, preInningsRuns, remainingRuns, remainingBalls,
                                remainingOver, leadingRuns, innings1Runs, innings2Runs, innings3Runs,
                                innings4Runs, battingTeamNo, fieldingTeamNo, player1ID, player2ID, strID,
                                nstrID,  bowlerID, preBowlerID, lastPreBowlerID, 0, ballType, bCount,
                                -1, 0, -1, dismissedPlayrID, null,
                                0, disNewBatsmanBattingOrder,0, 0,
                                0, false, 0, commentary, -1, mo, maiden,
                                modified, udisplay, tco, 0, sessionType, sessionID, endOfDay,
                                SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs, declared, freeHit,
                                false, inning_started, 0, 0, 0,
                                null, pre_out, callBowlerAlert, wk_id, keeper_position,
                                pre_wk_id, pre_wk_position, FORFEIT, forfeit_team, forfeit_innings,
                                CONCEDE, conceded_team, forceEndingType, lunch_flag, tea_flag, dinner_flag);

                        Intent i= new Intent(getBaseContext(), ScheduledService.class);
                        getBaseContext().startService(i);

                        displayScoreCard(false, false);

                    }
                });

        endOfDayAlert.setButton(AlertDialog.BUTTON_NEGATIVE, "CANCEL",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        if (flag == 1)
                            setInterval(new Events(), i_flag);
                    }
                });
        endOfDayAlert.show();
    }


    private void forceEndOver(){
        String str = "";
        forceEndOverAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        forceEndOverAlert.setIcon(R.drawable.ball);
        forceEndOverAlert.setCancelable(false);
        //Update don 28/07/2021
        if (HUNDRED) {
            forceEndOverAlert.setTitle("Force end 5 balls ?");
            str = "END BALLS";
        } else {
            forceEndOverAlert.setTitle("Force end over ?");
            str = "END OVER";
        }
//        forceEndOverAlert.setMessage("OVER COMPLETED");
        forceEndOverAlert.setButton(AlertDialog.BUTTON_POSITIVE, str,
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();

                        force_end_over = true;
                        callBowlerAlert = true; // Added on 26/11/2021

                        // added here on 20/04/2021
                        if (mo == 0){
                            maiden = true;
                            bowlerMO ++;
                        }

                        else {
                            maiden = false;
                        }

                        udisplay = modified;

                        syncBowler();

                        endOfOver = true;
                        changeStriker(false);

                        ballType = 4;
                        bCount = 0; // Added on 22/09/2021
                        final int temp_ball = ball;
                        Log.d("DISPLAY", "37 modified = " + modified);
                        Log.d("DISPLAY", "37 udisplay = " + udisplay);
                        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls,
                                wicket, ball, temp_ball, preInningsRuns, remainingRuns, remainingBalls,
                                remainingOver, leadingRuns, innings1Runs, innings2Runs, innings3Runs,
                                innings4Runs, battingTeamNo, fieldingTeamNo, player1ID, player2ID,
                                strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0, ballType,
                                bCount, 0, 0, 0, 0, null,
                                0, disNewBatsmanBattingOrder, 0, 0,
                                0, false, 0, commentary, 0, mo, maiden,
                                modified, udisplay, tco,0, sessionType, sessionID,
                                endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs,
                                declared, freeHit, false, inning_started, 0,
                                0, 0, null, pre_out, callBowlerAlert,
                                wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                                forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                                tea_flag, dinner_flag);

                        // === till here (20/04/2021)

                        udisplay = modified;
                        modified = "";

                        tvCurrentOver.setText(" ");
                        dso = null;
//                        currentOver = currentOver + 1;
//                        bowlerOver = bowlerOver + 1;
                        tco = currentOver;
                        tbo = bowlerOver;
                        tpbo = preBowlerOver;
                        tro = remainingOver;
                        int temp = (int) currentOver;
                        currentOver = (float) temp;
                        ball = 0;
                        ++currentOver;

                        Log.d("HUNDRED", "forceEndOver, currentOver = " + currentOver);
                        Log.d("HUNDRED", "forceEndOver, currentOver % 2 = " + (currentOver % 2));

                        /* Commented on 027/07/2021
                        if ((currentOver % 2) == 0)           // Added on 27/07/2021
                            change_end_flag = true;         // Added on 26/07/2021
                        else                                // Added on 27/07/2021
                            change_end_flag = false;        // Added on 27/07/2021*/

                        // Added on 26/07/2021

                        // ==== till here

//                        temp = (int) bowlerOver;
//                        bowlerOver = (float) temp;
//                        ++bowlerOver;

                        temp = (int) remainingOver;
                        remainingOver = (float) temp;
                        --remainingOver;

                        Log.d("forceEndOver", " currentOver : "+currentOver);
                        Log.d("forceEndOver", " bowlerOver : "+bowlerOver);
//                        currentOver = totalBalls / ballsPerOver;
//                        bowlerOver = bowlerBalls / ballsPerOver;

                        //Updated on 27/07/2021
                        if (HUNDRED) {
                            tvPlayingOver.setText(String.valueOf(totalBalls));
                            tvBowlerOver.setText(String.valueOf(bt_balls));
                        } else {
                            tvPlayingOver.setText(String.valueOf(new DecimalFormat("##.#").format(currentOver)));
                            tvBowlerOver.setText(String.valueOf(new
                                    DecimalFormat("##.##").format(setOverDisplay(bowlerOver, bowlerBalls))));
                        }


                        if (currentInnings == 1 || currentInnings == 99)
                            ll_remainings.setVisibility(View.GONE);

                        else {

                            ll_remainings.setVisibility(View.VISIBLE);

                            if (remainingRuns > 0)
                                tvRemainingRuns.setText(String.valueOf(remainingRuns));
//                            else if (leadingRuns >= 0 && totalInnings == 4) {
                            if (leadingRuns > remainingRuns && totalInnings == 4) {
                                tvRemainingRuns.setText(String.valueOf(leadingRuns));
                                tvRemainingRunsText.setText("Leading Runs : ");
                            }


                            if (tvRemainingOversBallsText.isShown()) {
                                if (remainingBalls > 100) {

                                    tvRemainingOversBallsText.setText(", Overs : ");
                                    tvRemainingOversBalls.setText(String.valueOf(new
                                            DecimalFormat("##.#").format(remainingOver)));
                                }

                                else {

                                    tvRemainingOversBallsText.setText(", Balls : ");
                                    Log.e("Scoring", "forceEndOver, remainingBalls : "+remainingBalls);
                                    tvRemainingOversBalls.setText(String.valueOf(remainingBalls));
                                }
                            }

                            if (innings.matches("single")){

                                tvRemainingRunsText.setText("Remaining Runs : ");
                            }

                            else {

                                if (remainingRuns > 0) {
                                    if (currentInnings == 4)
                                        tvRemainingRunsText.setText("Remaining Runs : ");
                                    else
                                        tvRemainingRunsText.setText("Trial Runs : ");
                                }

                                else
                                    tvRemainingRunsText.setText("Lead Runs : ");
                            }
                        }

                        if (innings.matches("multi") && totalOver == 1000) {

                            tvRemainingOversBallsText.setVisibility(View.INVISIBLE);
                            tvRemainingOversBalls.setVisibility(View.INVISIBLE);
                        }

                        else {

                            tvRemainingOversBallsText.setVisibility(View.VISIBLE);
                            tvRemainingOversBalls.setVisibility(View.VISIBLE);
                        }

                        ball = 0;

                        Log.d("so_inninngs1Runs","forceEndOver24 , : "+so_inninngs1Runs);

                        maiden = false;

                        selectBowlerAlertDialog();
                    }
                });

        forceEndOverAlert.setButton(AlertDialog.BUTTON_NEGATIVE, "CANCEL",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {

                        dialog.dismiss();
                    }
                });
        forceEndOverAlert.show();

    }




    private void forceEndInnings(int flag, int i_flag) {

        Log.d("forceEndInnings", "endOfMatch : " + endOfMatch);

        forceEndInningsAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        forceEndInningsAlert.setIcon(R.drawable.ball);
        forceEndInningsAlert.setCancelable(false);
        forceEndInningsAlert.setTitle("Force End Innings");
        forceEndInningsAlert.setButton(AlertDialog.BUTTON_POSITIVE, "CONFIRM",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();

                        ballType = 9;
                        bCount = 0; // Added on 22/09/2021
                        int lastBallType = realm.where(Events.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).findAll().last().getBallType();
                        endOfInnings = true;



                        if (innings.matches("multi") && !allOUT && currentInnings != 4){
                            // && !limited_over){   Updated on 21/12/2021

                            declarationBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
                            declarationBuilder.setIcon(R.drawable.ball);
                            declarationBuilder.setCancelable(false);
                            declarationBuilder.setTitle("Declare Innings ?");
                            declarationBuilder.setPositiveButton("CONFIRM",
                                    new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {

                                            dialog.dismiss();

                                            // Added on 19/04/2021

                                            if (currentInnings == 3 && remainingRuns > 0) {

                                                endMessage = "Target Achieved";
                                                displayAlert(endMessage, 0);
                                            }

                                            else {
                                                // ==till here (19/04/2021

                                                // Added on 10/09/2021
                                                if (strID != 0)
                                                    syncBatsmann(strID, 0, null, false, -1, false,
                                                            false, false);
                                                if (nstrID != 0)
                                                    syncBatsmann(nstrID, 0, null, false, -1, false,
                                                            false, false);
                                                syncBowler();
                                                // === till here

                                                forceEndingType = 3;
                                                declared = true;
                                                setEndInnings(true, ballType);
                                    /*if (endOfMatch)
                                        endOfMatch();
                                    else*/
                                                displayScoreCard(true, false);
                                            }   // Added on 19/04/2021
                                        }
                                    });
                            /* Commented by 01/03/2021
                            if (flag != 1) {
                                declarationBuilder.setNegativeButton("No",  // Added on 01/03/2021
                                        new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {

                                                dialog.dismiss();
                                                declared = false;

                                                commentary = forceEndingReason(1);

                                                *//*setEndInnings(true, ballType);
                             *//**//*if (endOfMatch)
                                        endOfMatch();
                                    else*//**//*
                                            displayScoreCard(true);*//*
                                            }
                                        });
                            }*/
                            declarationBuilder.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                    // added on 27/04/2020
//                                    forceEndInnings(0, 0);    COMMENTED ON 01/03/2021
                                    ballType = -1;
                                    bCount = 0; // Added on 22/09/2021
                                    endOfInnings = false;
                                    // commented on 26/04/2020
                                    /*declared = false;
                                    setEndInnings(false, ballType);
                                    displayScoreCard(false);*/
                                }
                            });
                            declarationBuilder.show();
                        }

                        // Added on 03/03/2021
                        else {

//                            applyForfeit();

                            final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(UpdatedScoringActivity.this,
                                    android.R.layout.select_dialog_singlechoice);

                            /* COMMENTED ON 21/12/2021
                            if (limited_over) {
                                arrayAdapter.add("Rain rule");
                                arrayAdapter.add("Others");
                            } else {*/
                            arrayAdapter.add("Rain rule");
                            arrayAdapter.add("Others");
                            arrayAdapter.add("Remaining players absent");
//                            }

                            AlertDialog.Builder alert1 = new AlertDialog.Builder(UpdatedScoringActivity.this);
                            alert1.setIcon(R.drawable.ball);
                            alert1.setCancelable(false);
                            alert1.setTitle("Force ending reason is ");
                            alert1.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                    ballType = -1;
                                    bCount = 0; // Added on 22/09/2021
                                    endOfInnings = false;
                                }
                            });

                            alert1.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {

                                    dialog.dismiss();

                                    String strName = arrayAdapter.getItem(which);
                                    forceEndingType = which + 1;
                                    Log.d("FORFEIT", "applyForfeit 2, forfeit_team : " + strName);

                                    AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
                                    builderInner.setIcon(R.drawable.ball);
                                    builderInner.setCancelable(false);
                                    dialog.dismiss();
                                    builderInner.setTitle("Confirm " + strName);

                                    builderInner.setPositiveButton("CONFIRM", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {

                                            dialog.dismiss();
                                            declared = false;
                                            if (forceEndingType == 1) {
                                                rain_rule = true;
                                                fei_others = false;
                                                remaining_absent = false;
                                            } else if (forceEndingType == 2) {
                                                rain_rule = false;
                                                fei_others = true;
                                                remaining_absent = false;
                                            } else if (forceEndingType == 3) {
                                                rain_rule = false;
                                                fei_others = false;
                                                remaining_absent = true;
//                                                    setBatsmanAsAbsent();
                                            }

                                            ballType = 9;
                                            bCount = 0; // Added on 22/09/2021
//                                                setEndInnings(false, ballType);
                                            // Added on 10/09/2021
                                            if (strID != 0)
                                                syncBatsmann(strID, 0, null, false, -1, false,
                                                        false, false);
                                            if (nstrID != 0)
                                                syncBatsmann(nstrID, 0, null, false, -1, false,
                                                        false, false);
                                            syncBowler();
                                            // === till here

                                            // Added on 15/12/2021
                                            if (forceEndingType == 2)
                                                setFeiOther();
                                            else {
                                                // === till here

                                                if (currentInnings == totalInnings) {
                                                    if (currentRuns == preInningsRuns) {
                                                        if (forceEndingType == 3)
                                                            setBatsmanAsAbsent();
                                                        check_SUPEROVER();
                                                    } else {
                                                        callEndOfMatch(2, 0);
                                                    }
                                                } else {

                                                    if (forceEndingType == 3)
                                                        setBatsmanAsAbsent();

                                                    setEndInnings(false, ballType);
                                                    displayScoreCard(false, false);
                                                }
                                            }
                                        }
                                    });

                                    builderInner.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            dialog.dismiss();
                                            rain_rule = false;
                                            fei_others = false;
                                            remaining_absent = false;
                                            ballType = -1;
                                            bCount = 0; // Added on 22/09/2021
                                            endOfInnings = false;
                                            forceEndingType = 0;
                                        }
                                    });

                                    builderInner.show();
//                                    }

                                    /*else {
                                        forfeit_team = 0;
                                        FORFEIT = false;
                                        forfeit_innings = 0;
                                        ballType = -1;
                                        displayError("Selected team already done forfeit");
                                    }*/
                                }
                            });

                            alert1.show();
                        }

                        /* Commented on 03/03/2021
                        else  if (currentInnings == totalInnings) {

                            Log.d("Scoring", "callEndOfInnings, currentInnings : " + currentInnings);
                           *//* Commented by 01/03/2021
                            if (flag != 1) {
                                commentary = forceEndingReason(2);  // Added on 01/03/2021
                            }

                            else {*//*
                                setEndInnings(false, ballType);

                                if (currentRuns == preInningsRuns)
                                    check_SUPEROVER();
                                else
                                    callEndOfMatch(2, 0);
//                            }     Commented by 01/03/2021
                        }

                        *//* Commented on 03/03/2021
                        else if (SUPER_OVER) {
                            setEndInnings(false, ballType);

                            if (currentInnings == 99) {
                                preInningsRuns = currentRuns;
                                remainingRuns = currentRuns;
                                displayScoreCard(false, false);
                            }
                            else
                                if (currentInnings == 100) {
                                    callEndOfMatch(2, 0);
                            }
                        }*//*

                        else {
                            *//* Commented by 01/03/2021.
                            if (flag != 1) {
                                commentary = forceEndingReason(3);  // Added on 01/03/2021
                            }

                            else {*//*
                                declared = false;
                                setEndInnings(false, ballType);
                                displayScoreCard(false, false);
                            //}     Commented by 01/03/2021
                        }*/

                    }
                });

        // Added on 02/03/2021
        forceEndInningsAlert.setButton(AlertDialog.BUTTON_NEUTRAL, "CONCEDE",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();

                        final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(UpdatedScoringActivity.this,
                                android.R.layout.select_dialog_singlechoice);

                        arrayAdapter.add(teamA);
                        arrayAdapter.add(teamB);

                        AlertDialog.Builder alert2 = new AlertDialog.Builder(UpdatedScoringActivity.this);
                        alert2.setIcon(R.drawable.ball);
                        alert2.setCancelable(false);
                        alert2.setTitle("Conceding is declared by");
                        alert2.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                                conceded_team = 0;
                                ballType = -1;
                                bCount = 0; // Added on 22/09/2021
                                CONCEDE = false;
                                endOfMatch = false;
                                forceEndingType = 0;
                                endOfInnings = false;
                            }
                        });

                        alert2.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {

                                dialog.dismiss();

                                String strName = arrayAdapter.getItem(which);
                                conceded_team = which + 1;
                                Log.d("CONCEDE", "forceEndInnings 1, conceded_team : " + conceded_team);
                                Log.d("CONCEDE", "forceEndInnings 2, which : " + which);

                                CONCEDE = true;
                                String str1 = "Conceding selected by " + strName;
                                Log.d("CONCEDE", "forceEndInnings 3, CONCEDE : " + CONCEDE);

                                AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
                                builderInner.setIcon(R.drawable.ball);
                                builderInner.setCancelable(false);
                                dialog.dismiss();
                                builderInner.setTitle(str1);

                                builderInner.setPositiveButton("CONFIRM", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {

                                        dialog.dismiss();
                                        ballType = 27;
                                        bCount = 0; // Added on 22/09/2021
                                        declared = false;

                                        // Added on 10/09/2021
                                        if (strID != 0)
                                            syncBatsmann(strID, 0, null, false, -1, false,
                                                    false, false);
                                        if (nstrID != 0)
                                            syncBatsmann(nstrID, 0, null, false, -1, false,
                                                    false, false);
                                        syncBowler();
                                        // === till here

                                        if (currentInnings == 1) {
                                            addsToBatsman(fieldingTeamNo, 2);
                                        }
                                        endOfMatch = true;
                                        updateMatch(FORFEIT, forfeit_team, currentInnings, CONCEDE, conceded_team);
                                        setEndInnings(false, ballType);
                                        callMatchEnd(); // Added on 03/03/2021
                                        endOfMatch();

                                    }
                                });

                                builderInner.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        dialog.dismiss();
                                        conceded_team = 0;
                                        ballType = -1;
                                        bCount = 0; // Added on 22/09/2021
                                        declared = false;
                                        CONCEDE = false;
                                        endOfMatch = false;
                                        endOfInnings = false;
                                    }
                                });

                                builderInner.show();


                                /*else {
                                    forfeit_team = 0;
                                    FORFEIT = false;
                                    forfeit_innings = 0;
                                    displayError("Selected team already done forfeit");
                                }*/
                            }
                        });

                        alert2.show();

                    }
                });

        //========== till here======================

        forceEndInningsAlert.setButton(AlertDialog.BUTTON_NEGATIVE, "CANCEL",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {

                        dialog.dismiss();
                        ballType = -1;
                        bCount = 0; // Added on 22/09/2021
                        endOfInnings = false;
                        if (flag == 1)
                            setInterval(new Events(), i_flag);
                    }
                });
        forceEndInningsAlert.show();
    }


    // Added on 01/03/2021
    /* Commented on 03/03/2021

    public String forceEndingReason(int i) {
//        setInterval();

        String str = "";

        View intervalView = View.inflate(this, R.layout.force_ending_reason, null);
        EditText editText = (EditText) intervalView.findViewById(R.id.et_force_ending_reason);

        AlertDialog.Builder reasonAlert = new AlertDialog.Builder(this);
        reasonAlert.setIcon(R.drawable.ball).
                setTitle("Please enter the reason to force ending innings").
                setView(intervalView).
                setCancelable(false).
                setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if (editText.getText().toString().matches("") ||
                            editText.getText().toString() == null) {
                            Toast.makeText(ScoringActivity.this, "Invalid reason", Toast.LENGTH_SHORT).show();
                        }
                        else {
                            dialog.cancel();
                            reason = editText.getText().toString();

                            setBatsmanAsAbsent();

                            if (i == 1) {
                                setEndInnings(true, ballType);
                                displayScoreCard(true, false);
                            }

                            else if (i == 2) {
                                setEndInnings(false, ballType);

                                if (currentRuns == preInningsRuns)
                                    check_SUPEROVER();
                                else
                                    callEndOfMatch(2, 0);
                            }

                            else if (i == 3) {
                                declared = false;
                                setEndInnings(false, ballType);
                                displayScoreCard(false, false);
                            }

                        }
                    }
                }).
                setNeutralButton("Cancel", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int i) {
                                dialog.cancel();
                                ballType = -1;
                                endOfInnings = false;
                            }
                        })
                .show();

        return reason;


        *//*AlertDialog.Builder reasonAlert = new AlertDialog.Builder(ScoringActivity.this);
        reasonAlert.setIcon(R.drawable.ball);
        reasonAlert.setCancelable(false);
        reasonAlert.setTitle("Declare Innings ?");*//*
    }*/


    private void setBatsmanAsAbsent() {

        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {

                RealmResults<Batsman> batsman_result = realm.where(Batsman.class).
                        equalTo("matchid", matchid).
                        equalTo("innings", currentInnings).
                        equalTo("team", battingTeamNo).
                        equalTo("retired", false).
                        equalTo("out", false).
                        equalTo("playing", false).
                        equalTo("toBeBatted", true).
                        findAll();

                for (Batsman batsmann : batsman_result) {

                    if (batsmann != null){

                        batsmann.setOut(true);
                        batsmann.setPlaying(false);
                        batsmann.setRetired(false);
                        batsmann.setOutType(11);

                        realm.insertOrUpdate(batsmann);
                        Log.d("ABSENT", "setBatsmanAsAbsent(), batsmann : " + batsmann);
                    }
                }
            }
        });
    }

    //======== till here (01/03/2021)



    private void forceEndMatch(){

        if (currentInnings < totalInnings)
            displayError("Force End of Match",
                    "The match have left " + (totalInnings - currentInnings) + " innings. Do you want to proceed?");

        else
        if (currentInnings == totalInnings) {

            if ((currentOver < totalOver) || (currentRuns < preInningsRuns) || (currentRuns < revisedTarget))
                displayError("Force End of Match",
                        "The match didn't met the target. Do you want to proceed?");
        }





//        AlertDialog.Builder matchBuilder = new AlertDialog.Builder(ScoringActivity.this);
//        matchBuilder.setIcon(R.drawable.ball);
//        matchBuilder.setCancelable(false);
//        matchBuilder.setTitle("Declare Innings ?");
//        matchBuilder.setNeutralButton("Declare",
//                new DialogInterface.OnClickListener() {
//                    @Override
//                    public void onClick(DialogInterface dialog, int which) {
//
//
//                        setEndInnings(true, ballType);
//                    }
//                });
//        matchBuilder.setPositiveButton("Cancel", new DialogInterface.OnClickListener() {
//            @Override
//            public void onClick(DialogInterface dialog, int which) {
//                setEndInnings(false, ballType);
//            }
//        });
//        matchBuilder.show();
    }




    void setEndInnings(boolean declare, int ballType){

        endOfInnings = true;

//        setMatchStatus("SE3", 11);
        Log.e("Scoring", "setEndInnings, ballType : "+ballType);
        Log.e("Scoring", "setEndInnings, currentInnings : "+currentInnings);
        Log.e("Scoring", "setEndInnings, totalInnings : "+totalInnings);
        Log.e("Scoring", "setEndInnings, endOfInnings : "+endOfInnings);
        Log.e("Scoring", "setEndInnings, FORFEIT : "+ FORFEIT);


        /*
         Commented on 10/09/2021
         Commented brcause it is rewriting batsman table, so moving the functions seperatly
        if (strID != 0)
            syncBatsmann(strID, 0, null, false, -1, false,
                    false, false);
        if (nstrID != 0)
            syncBatsmann(nstrID, 0, null, false, -1, false,
                    false, false);
        syncBowler();*/
        if (currentInnings == 1)
            preInningsRuns = currentRuns;



        Log.d("so_inninngs1Runs","setEndInnings25 , : "+so_inninngs1Runs);
        Log.d("ballType","setEndInnings 25, : " + ballType);
        Log.d("strID","setEndInnings 25, : " + strID);
        Log.d("nstrID","setEndInnings 25, : " + nstrID);
        Log.d("DISPLAY", "38 modified = " + modified);
        Log.d("DISPLAY", "38 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket, ball,
                0, preInningsRuns, remainingRuns, remainingBalls, remainingOver, leadingRuns,
                innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo, fieldingTeamNo,
                player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0,
                ballType, bCount, -1, 0, -1, 0, null,
                0, disNewBatsmanBattingOrder, penaltyType, 0, 0,
                false, 0, commentary, 0, mo, maiden, modified,
                udisplay, tco,0, sessionType, sessionID, endOfDay, SUPER_OVER,
                so_inninngs1Runs, so_inninngs2Runs, declare, freeHit, false, inning_started,
                0, 0, 0, null, pre_out, callBowlerAlert,
                wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team, forfeit_innings,
                CONCEDE, conceded_team, forceEndingType, lunch_flag, tea_flag, dinner_flag);

        Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
        setMatchStatus(match.getStatus(), match.getStatusId());

        updateMatch(matchid, endOfInnings);

//        displayScoreCard(declare);

//        ballType = -1;
    }




    private void changeMatchOver(){
//        setCommentry();

        float temp_total_over = realm.where(Match.class).
                equalTo("matchid", matchid).findFirst().getOver();
        matchOverBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        matchOverBuilder.setIcon(R.drawable.ball);
        matchOverBuilder.setCancelable(false);
        String title = "";
        if (HUNDRED)    // added on 30/07/2021
            title = "Enter revised balls";
        else
            title = "Enter revised overs";
        matchOverBuilder.setTitle(title);

        final EditText input = new EditText(this);

//        input.setInputType(InputType.TYPE_CLASS_NUMBER);
        input.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
        matchOverBuilder.setView(input);
//        Log.d("Test", "inside AddRuns()");
        matchOverBuilder.setPositiveButton("CONFIRM", new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {

                if (input.getText().toString() == null) {
                    Toast.makeText(getApplicationContext(),
                            "Please enter valid Over", Toast.LENGTH_SHORT).show();
                }

                else {

                    if (HUNDRED) {
                        reduced_balls = Integer.parseInt(input.getText().toString());
                        reduced_overs = 0f;
                    } else {
                        reduced_overs = Float.parseFloat(input.getText().toString());
                        reduced_balls = 0;
                    }


                    if (reduced_overs > 0){

                        totalOver = reduced_overs;
                        Log.d("readResult", "ok, totalOver : "+totalOver);
                        Log.d("readResult", "ok, reduced_overs : "+reduced_overs);

                        // updated on 02/05/2020
                        if (currentInnings == 1)
                            readRainRule(reduced_overs, revisedTarget, false, temp_total_over);
//                            saveRevisedRuns(builderText, revisedTarget, false, temp_total_over); // commented on 05/05/2020
                        if (currentInnings > 1) { // && innings.matches("single")) {

//                            saveRevisedRuns(builderText, revisedTarget, false);
//                            commented on 20/04/2020
                            callRevisedRuns(reduced_overs, temp_total_over);
                            //======== till here
                        }
                        Toast.makeText(getApplicationContext(),
                                "Over reduced to "+reduced_overs, Toast.LENGTH_SHORT).show();
                    }
                    else {

                        Toast.makeText(getApplicationContext(),
                                "Please enter valid Over", Toast.LENGTH_SHORT).show();
                    }
                }
            }
        });

        matchOverBuilder.setNegativeButton("CANCEL", null);

        AlertDialog alert = matchOverBuilder.create();
        alert.show();

        builderText = 0;

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm realm) {

                    try {

                        Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
                        match.setOver(totalOver);
                        match.setReducedOver(true);
                        realm.copyToRealmOrUpdate(match);
                    } catch (RealmPrimaryKeyConstraintException e) {

                        Log.d("readResult", " Exception : "+e);
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }

        Log.d("readResult", "after build, totalOver : "+totalOver);

    }



/*
    void updateReducedOvers() {

        Realm realm = null;
        try {
             config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm realm) {

                    try {

                        Match match = realm.where(Match.class).
                                equalTo("matchid", matchid).findFirst();
                        match.setReducedOver(true);

                        realm.copyToRealmOrUpdate(match);

                        Log.d("updateMatch", " match : " + match);
                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("scoring", "onclick, Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }
    }
*/



    @Override
    public void onBackPressed() {
        startActivity(new Intent(this, HomeActivity.class));
        finish();
    }



    private void callRevisedRuns(float reducedOver, float temp_total_over){

        AlertDialog.Builder revisedBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        revisedBuilder.setIcon(R.drawable.ball);
        revisedBuilder.setCancelable(false);
        revisedBuilder.setTitle("Enter revised run");

        final EditText input = new EditText(this);

        input.setInputType(InputType.TYPE_CLASS_NUMBER);

        revisedBuilder.setView(input);
//        Log.d("Test", "inside AddRuns()");
        revisedBuilder.setPositiveButton("CONFIRM", new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {

                if (input.getText().equals(null)){
                    Toast.makeText(getApplicationContext(),
                            "Please enter the Run", Toast.LENGTH_SHORT).show();
                }

                else {
                    builderText = Integer.parseInt(input.getText().toString());
//                    Log.d("Test", "BuilderText : " + builderText);


                    if (builderText != 0){

                        Toast.makeText(getApplicationContext(),
                                "Runs reduced to "+builderText, Toast.LENGTH_SHORT).show();
                        revisedTarget = builderText;
                        Log.d("readResult", "ok, revisedTarget : "+revisedTarget);

//                        if (currentInnings > 1)

                        readRainRule(reducedOver, revisedTarget, true, temp_total_over);
//                            saveRevisedRuns(reducedOver, revisedTarget, true, temp_total_over);   // commented on 05/05/20250

                        /*Realm realm = null;
                        try {
                             config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
                            realm.executeTransaction(new Realm.Transaction() {
                                @Override

                                public void execute(Realm realm) {
                                    try {

                                        Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
                                        match.setRevisedTarget(revisedTarget);
                                        realm.copyToRealmOrUpdate(match);

                                    } catch (RealmPrimaryKeyConstraintException e) {

                                        Log.d("readResult", " Exception : "+e);
                                    }
                                }
                            });
                        }

                        catch (RealmException e) {
                            Log.d("test", "Exception : " + e);
                        }

                        finally {
                            if (realm != null) {
                                realm.close();
                            }
                        }
*/

                    }
                    else {

                        Toast.makeText(getApplicationContext(),
                                "Reached out of limits", Toast.LENGTH_SHORT).show();
                    }

                }


            }
        });

        revisedBuilder.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
                changeMatchOver();
            }
        });

        AlertDialog alert = revisedBuilder.create();
        alert.show();

        builderText = 0;



        Log.d("readResult", "after build, totalOver : "+totalOver);
    }





    void playerList(){
//        Toast.makeText(getApplicationContext(), "Working progress", Toast.LENGTH_SHORT).show();
        Intent i = new Intent(UpdatedScoringActivity.this, PlayerList.class);
        i.putExtra("matchid", matchid);
        i.putExtra("matchID", matchID);
        i.putExtra("eventId", eventID);
        i.putExtra("battingTeamNo", battingTeamNo);
        i.putExtra("currentInnings", currentInnings);
        i.putExtra("SUPER_OVER", SUPER_OVER);
        i.putExtra("score", score);
        startActivity(i);

    }




    void saveRevisedRuns(float reducedOver, int revisedTarget, boolean reducedRuns, float temp_total_over,
                         String rain_rule, String com) {

        Log.d("reducedOver", "reducedOver :  " + reducedOver);
        Log.d("reducedOver", "revisedTarget :  " + revisedTarget);
        Log.d("reducedOver", "reducedRuns :  " + reducedRuns);

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm realm) {

                    try {

                        Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
                        assert match != null;   // Added on 30/07/2021
                        match.setRevisedTarget(revisedTarget);
                        match.setReducedRuns(reducedRuns);
                        match.setOver(reducedOver);
                        match.setAppliedRainRule(rain_rule);

                        realm.copyToRealmOrUpdate(match);

                        // commented on 05/05/2020
                        /*if (reducedRuns) {

                            resetRemainingRuns(reducedOver, revisedTarget, temp_total_over);
                        }*/

                    } catch (RealmPrimaryKeyConstraintException e) {

                        Log.d("readResult", " Exception : "+e);
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }


        ballType = 20;
        bCount = 0; // Added on 22/09/2021
        Log.d("DISPLAY", "39 modified = " + modified);
        Log.d("DISPLAY", "39 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket,
                ball, 0, preInningsRuns, remainingRuns, remainingBalls, remainingOver,
                leadingRuns, innings1Runs, innings2Runs, innings3Runs, innings4Runs,  battingTeamNo,
                fieldingTeamNo, player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID,
                lastPreBowlerID, 0, ballType, bCount, -1, 0, -1,
                0, null,0, disNewBatsmanBattingOrder, -1,
                0, 0, false, 0, com, 0, mo, maiden,
                modified, udisplay, tco,0, sessionType, sessionID, endOfDay,
                SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs, false, freeHit,
                false, inning_started, 0, reducedOver, revisedTarget, rain_rule,
                pre_out, callBowlerAlert, wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT,
                forfeit_team, forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                tea_flag, dinner_flag);

        if (reducedRuns) {

            resetRemainingRuns(reducedOver, revisedTarget, temp_total_over);
        }

    }




    void resetRemainingRuns(float reducedOver, int revisedTarget, float temp_total_over) {
        Log.d("remainingRuns", "resetRemainingRuns, reducedOver 1, : " + reducedOver);
        Log.d("remainingRuns", "resetRemainingRuns, revisedTarget 1, : " + revisedTarget);
        Log.d("remainingRuns", "resetRemainingRuns, temp_total_over 1, : " + temp_total_over);

        // added on 12/05/2020
        Log.d("remainingRuns", "resetRemainingRuns, temp_total_over : " + temp_total_over);
        Log.d("remainingRuns", "resetRemainingRuns, remainingOver : " + remainingOver);
        Log.d("remainingRuns", "resetRemainingRuns, ballsPerOver : " + ballsPerOver);

        if (remainingOver == temp_total_over || (remainingBalls == (temp_total_over * ballsPerOver))) {

            remainingOver = reducedOver;
            Log.d("remainingRuns", "resetRemainingRuns, reducedOver : " + reducedOver);
            Log.d("remainingRuns", "resetRemainingRuns, remainingOver : " + remainingOver);
            int remianining_balls1 = ((int) remainingOver) * ballsPerOver;
            Log.d("remainingRuns", "resetRemainingRuns, remianining_balls1 : " + remianining_balls1);
            int remianining_balls2 = (int) ((remainingOver - ((int) remainingOver)) * 0.1f);
            Log.d("remainingRuns", "resetRemainingRuns, remianining_balls2 : " + remianining_balls2);
            remainingBalls = remianining_balls1 + remianining_balls2;
            Log.d("remainingRuns", "resetRemainingRuns, remainingBalls : " + remainingBalls);
        }

        else {
            int total_balls1 = (int) temp_total_over * ballsPerOver;
            Log.d("remainingRuns", "resetRemainingRuns, total_balls1 : " + total_balls1);
            float total_balls2 = (temp_total_over - (int) temp_total_over) * 10;
            Log.d("remainingRuns", "resetRemainingRuns, total_balls2 : " + total_balls2);
            int total_balls = total_balls1 + (int) total_balls2;
            Log.d("remainingRuns", "resetRemainingRuns, total_balls : " + total_balls);

            Log.d("remainingRuns", "resetRemainingRuns, reducedOver : " + reducedOver);
            int reduced_balls1 = (int) reducedOver * ballsPerOver;
            Log.d("remainingRuns", "resetRemainingRuns, reduced_balls1 : " + reduced_balls1);
            float reduced_balls2 = (reducedOver - (int) reducedOver) * 10;
            Log.d("remainingRuns", "resetRemainingRuns, reduced_balls2 : " + reduced_balls2);
            int reduced_balls = reduced_balls1 + (int) reduced_balls2;
            Log.d("remainingRuns", "resetRemainingRuns, reduced_balls : " + reduced_balls);


            int ball_difference = total_balls - reduced_balls;
            Log.d("remainingRuns", "resetRemainingRuns, ball_difference : " + ball_difference);


            Log.d("remainingRuns", "resetRemainingRuns, remainingBalls 1, : " + remainingBalls);
            remainingBalls = remainingBalls - ball_difference;
            Log.d("remainingRuns", "resetRemainingRuns, remainingBalls 2, : " + remainingBalls);
            int remaining_over1 = remainingBalls / ballsPerOver;
            Log.d("remainingRuns", "resetRemainingRuns, remaining_over1 : " + remaining_over1);
            int remaining_over2 = remainingBalls % ballsPerOver;
            Log.d("remainingRuns", "resetRemainingRuns, remaining_over2 : " + remaining_over2);
            remainingOver = remaining_over1 + (remaining_over2 * 0.1f);
            Log.d("remainingRuns", "resetRemainingRuns, remainingOver : " + remainingOver);

        }

        // remainingRuns
        Log.d("remainingRuns", "resetRemainingRuns, remainingRuns : " + remainingRuns);
        Log.d("remainingRuns", "resetRemainingRuns, revisedTarget : " + revisedTarget);
        Log.d("remainingRuns", "resetRemainingRuns, currentRuns : " + currentRuns);
        remainingRuns = revisedTarget - currentRuns;
        Log.d("remainingRuns", "resetRemainingRuns, after remainingRuns : " + remainingRuns);

        tvRemainingRuns.setText(String.valueOf(remainingRuns));
        if (remainingBalls >= 100) {
            tvRemainingOversBallsText.setVisibility(View.VISIBLE);
            tvRemainingOversBallsText.setText(", Overs : ");
            tvRemainingOversBalls.setVisibility(View.VISIBLE);
            tvRemainingOversBalls.setText(String.valueOf(new DecimalFormat("##.#").format(remainingOver)));
        } else {
            tvRemainingOversBallsText.setVisibility(View.VISIBLE);
            tvRemainingOversBallsText.setText(", Balls : ");
            tvRemainingOversBalls.setVisibility(View.VISIBLE);
            Log.e("Scoring", "initializaresetRemainingRuns, last remainingBalls : " + remainingBalls);
            tvRemainingOversBalls.setText(String.valueOf(remainingBalls));
        }
    }



    // added on 05/05/2020
    void readRainRule(float reducedOver, int revisedTarget, boolean reducedRuns, float temp_total_over) {

        View rainRuleView = View.inflate(this, R.layout.rain_rule, null);
        RadioGroup radioGroup = (RadioGroup) rainRuleView.findViewById(R.id.rg_rain_rule);
        RadioButton rb_DL = (RadioButton) rainRuleView.findViewById(R.id.rb_rr_dl);
        RadioButton rb_VJD = (RadioButton) rainRuleView.findViewById(R.id.rb_rr_vjd);
        RadioButton rb_others = (RadioButton) rainRuleView.findViewById(R.id.rb_rr_other);
        LinearLayout ll_com = (LinearLayout) rainRuleView.findViewById(R.id.ll_com);
        EditText et_com = (EditText) rainRuleView.findViewById(R.id.et_rr);

        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            public void onCheckedChanged(RadioGroup rg, int checkedId) {
                for(int i=0; i<rg.getChildCount(); i++) {
                    RadioButton btn = (RadioButton) rg.getChildAt(i);
                    if(btn.getId() == checkedId) {
                        text = btn.getText().toString();
                        if (text.matches("Other")) {
                            ll_com.setVisibility(View.VISIBLE);
                            other = true;
                        }
                        else {
                            ll_com.setVisibility(View.GONE);
                            other = false;
                        }
                        return;
                    }
                }
            }
        });

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setIcon(R.drawable.ball).
                setTitle("Applied Rain rule is ...").
                setView(rainRuleView).
                setCancelable(false).
                setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        if (other) {
                            if (et_com.getText().toString().matches(""))
                                Toast.makeText(UpdatedScoringActivity.this, "Please enter remarks", Toast.LENGTH_SHORT).show();

                            else {
                                commentary = et_com.getText().toString();
                            }
                        }

                        saveRevisedRuns(reducedOver, revisedTarget, reducedRuns, temp_total_over, text, commentary);
//                        saveRevisedRuns(reducedOver, revisedTarget, true, temp_total_over);

                    }
                }).
                setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                    }
                }).
                show();

    }




    void setPowerPlay(){

        Log.d("power", "setPowerPlay, matchtype : " + matchtype);
        Log.d("power", "setPowerPlay, innings : " + innings);

        if ((matchtype.matches("Test")) ||
                (/*(matchtype.matches("Custom")) &&*/ (innings.matches("multi")))){


            powerPlayDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
            powerPlayDialog.setIcon(R.drawable.ball);
            powerPlayDialog.setCancelable(false);
            powerPlayDialog.setTitle("Multi innings match can not have any PowerPlay");
            powerPlayDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {

                            dialog.dismiss();
                        }
                    });

            powerPlayDialog.show();

        }

        else {


            power = true;

            Log.d("DISPLAY", "40 modified = " + modified);
            Log.d("DISPLAY", "40 udisplay = " + udisplay);
            newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket,
                    ball, 0, preInningsRuns, remainingRuns, remainingBalls, remainingOver,
                    leadingRuns, innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo,
                    fieldingTeamNo, player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID,
                    lastPreBowlerID, 0, -1, bCount, -1, 0, -1,
                    0, null, 0, disNewBatsmanBattingOrder,
                    0, 0, 0, false, 0,
                    commentary, -1, mo, maiden, modified, udisplay, tco, intervalID, sessionType,
                    sessionID, endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs, declared,
                    freeHit, false, inning_started, 0, 0, 0,
                    null, pre_out, callBowlerAlert, wk_id, keeper_position, pre_wk_id,
                    pre_wk_position, FORFEIT, forfeit_team, forfeit_innings, CONCEDE, conceded_team,
                    forceEndingType, lunch_flag, tea_flag, dinner_flag);


            Intent i = new Intent(UpdatedScoringActivity.this, PowerPlay.class);
            i.putExtra("matchid", matchid);
            i.putExtra("matchID", matchID);
            i.putExtra("innings", currentInnings);
            i.putExtra("match_type", matchtype);
            i.putExtra("match_over", totalOver);
            i.putExtra("eventId", eventID);

            //passing JSONArray from 1 activity to another
//            Bundle b = new Bundle();
//            b.putString("Array",jsonEventArray.toString());
//            i.putExtras(b);

            i.putExtra("jsonArray", jsonEventArray.toString());

            startActivity(i);
        }
    }




    public void allOUT(){

        Log.e("Scoring", "allOUT, allOUT : "+allOUT);


        allOutAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        allOutAlert.setIcon(R.drawable.ball);
        allOutAlert.setCancelable(false);
        allOutAlert.setTitle("ALL OUT");
        allOutAlert.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();

                        endOfInnings = true;
                        ballType = 10;
                        bCount = 0; // Added on 22/09/2021
                        if (ball >= ballsPerOver)
                            currentOver = totalBalls / ballsPerOver;

                        if (strID != 0)
                            syncBatsmann(strID, 0, null, false, -1,
                                    false, false, wk_flag);
                        if (nstrID != 0)
                            syncBatsmann(nstrID, 0, null, false, -1,
                                    false, false, wk_flag);
                        syncBowler();

                        remainingRuns = currentRuns;
                        if (currentInnings == 1)
                            preInningsRuns = currentRuns;

                        if (totalInnings == 4) {

                            if (currentInnings == 2)
                                preInningsRuns = currentRuns;

                            else  if (currentInnings == 3)
                                preInningsRuns = currentRuns;
                        }


                        Log.d("so_inninngs1Runs","allOUT26 , : "+so_inninngs1Runs);
                        Log.d("strID","allOUT26 , : " + strID);
                        Log.d("nstrID","allOUT26 , : " + nstrID);
                        Log.d("DISPLAY", "41 modified = " + modified);
                        Log.d("DISPLAY", "41 udisplay = " + udisplay);
                        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls,
                                wicket, ball, 0, preInningsRuns, remainingRuns, remainingBalls,
                                remainingOver, leadingRuns, innings1Runs, innings2Runs, innings3Runs,
                                innings4Runs, battingTeamNo, fieldingTeamNo, player1ID, player2ID, strID,
                                nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0, ballType, bCount,
                                -1, 0, -1, 0, null,
                                0, disNewBatsmanBattingOrder, penaltyType, 0,
                                0, false, 0, commentary, 0, mo, maiden,
                                modified, udisplay, tco,0, sessionType,
                                sessionID, endOfDay,
                                SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs, declared, freeHit,
                                false, inning_started, 0, 0,
                                0, null, pre_out, callBowlerAlert, wk_id,
                                keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                                forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                                tea_flag, dinner_flag);

                        // updated on 26/02/2021
                        if (currentInnings == 1 ||/* currentInnings == 3 || */currentInnings == 99) { // Updayed on 19/04/2021
//                                callEndOfInnings();
                            setEndInnings(false, ballType);
//                                setMatchStatus("SE3", 11);
                            endOfInnings = true;
                            displayScoreCard(false, false);
                        }

                        else {

                            if (currentInnings == totalInnings) {

                                if (currentInnings == 2) {

                                    if (currentRuns == innings1Runs || currentRuns == preInningsRuns) {

                                        check_SUPEROVER();
                                            /*SUPER_OVER = true;
                                            displayScoreCard(false);*/
                                        // alert for asking superover
//                                            check_SUPEROVER();
                                    }

                                    else if (currentRuns < innings1Runs) {
                                        endMessage = "Allotted innings are completed";
                                        displayAlert(endMessage, 0);
                                    }
                                }

                                else if (currentInnings == 4) {
                                    endMessage = "Allotted innings are completed";
                                    displayAlert(endMessage, 0);
                                }
                            }

                            else if (currentInnings == 100) {

//                                    if (currentRuns < so_inninngs1Runs)
                                endMessage = "Allotted innings are completed";
                                displayAlert(endMessage, 0);
                            }

                            // Added on 19/04/2021
                            else if (currentInnings == 4) { //change currentInnings == 3 to currentInnings == 4 on 28/10/2022 Jipin

                                Log.d("RR", "1, remainingRuns = " + remainingRuns);

                                if (remainingRuns > 0) {
                                    endMessage = "Target Achieved";
                                    displayAlert(endMessage, 0);
                                }
                                else {
                                    setEndInnings(false, ballType);
                                    endOfInnings = true;
                                    displayScoreCard(false, false);
                                }
                            }

                            //=== till here (16/04/2021)
                            else {
                                /*displayAlert("Allotted innings are completed");*/
                                setEndInnings(false, ballType);
//                                setMatchStatus("SE3", 11);
                                endOfInnings = true;
                                displayScoreCard(false, false);
                            }
                        }

//                            setMatchStatus("SE3", 11);
                        Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
                        setMatchStatus(match.getStatus(), match.getStatusId());
                        endOfInnings = true;
//                            displayScoreCard(false);

                    }
                });

        allOutAlert.setButton(AlertDialog.BUTTON_NEUTRAL, "CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                endOfInnings = true;

                // no undo of ball type 10 is specified

                // disabling all buttons in Scoring
//                    btnUndo.setEnabled(false);
                btnSwap.setEnabled(false);
                btnScore.setEnabled(false);
                btnOut.setEnabled(false);
                btnExtras.setEnabled(false);
                btnHash.setEnabled(false);
//                    btnCom.setEnabled(false);
                btn0.setEnabled(false);
                btn1.setEnabled(false);
                btn2.setEnabled(false);
                btn3.setEnabled(false);
                btn4.setEnabled(false);
                btn6.setEnabled(false);
                btnInterval.setEnabled(false);
                btnChangeBatsman.setEnabled(false);
                btnChangeBowler.setEnabled(false);

            }
        });
        allOutAlert.show();

//        }
    }



    public void setWagonWheelRegion(int eventId){
        Log.e("setWagonWheelRegion", " method, eventId : "+eventId);

//        displayProgress();

        Intent i = new Intent(UpdatedScoringActivity.this, WagonWheel.class);
        i.putExtra("eventId", eventId);
        i.putExtra("score", score);
        i.putExtra("post_array", String.valueOf(jsonEventArray));
        i.putExtra("efo", efo);
//        i.putExtra("mo", mo);
        startActivity(i);
//        progress.dismiss();

    }







    public void savePreInningsRuns(int preInningsRuns){

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm realm) {

                    try {

                        Events events = realm.where(Events.class).equalTo("eventID", eventID).findFirst();
                        Log.d("WagonWheel", "saveDetails, eventId  : "+ eventID);
                        if (currentInnings == 1)
                            events.setInnings1Runs(preInningsRuns);
                        else if (currentInnings == 2)
                            events.setInnings2Runs(preInningsRuns);
                        else if (currentInnings == 3)
                            events.setInnings3Runs(preInningsRuns);
                        realm.copyToRealmOrUpdate(events);
                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(), "Primary Key exists, Press Update instead",
                                Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("scoring", "onclick, Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }

    }





/*
    public void callSuperOver() {

        matchTieAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        matchTieAlert.setIcon(R.drawable.ball);
        matchTieAlert.setCancelable(false);
        matchTieAlert.setTitle("Match is tie. Do you want to start Super Over?");
        matchTieAlert.setButton(AlertDialog.BUTTON_POSITIVE, "OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                 AlertDialog SOConfirmAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
                 SOConfirmAlert.setIcon(R.drawable.ball);

            }
        });
        matchTieAlert.setButton(AlertDialog.BUTTON_NEGATIVE, "CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                dialog.cancel();
            }
        });
    }
*/





    public void check_SUPEROVER(){

        Log.d("Scoring", "check_SUPEROVER,");

        if (ballType == 10 && !SUPER_OVER && ! allOUT)
            setEndInnings(declared, ballType);


        AlertDialog superOverAlert = new AlertDialog.
                Builder(UpdatedScoringActivity.this).create();
        superOverAlert.setIcon(R.drawable.ball);
        superOverAlert.setCancelable(false);
        superOverAlert.setTitle("Do you want to start super over");
//        superOverAlert.setMessage("Allotted innings completed");
        superOverAlert.setButton(AlertDialog.BUTTON_POSITIVE, "CONFIRM",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        SUPER_OVER = true;
                        saveSuperOver(SUPER_OVER);
                        Log.d("SUPER_OVER", "" +  SUPER_OVER);
//                    callSuperOver();
                    }
                });

        superOverAlert.setButton(AlertDialog.BUTTON_NEUTRAL, "CANCEL",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        endOfMatch = true;
                        callMatchEnd(); // Added on 03/03/2021
                        endOfMatch();
                    }
                });
        superOverAlert.show();
    }



    void saveSuperOver(boolean superover) {

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm realm) {

                    try {

                        Match match = realm.where(Match.class).
                                equalTo("matchid", matchid).findFirst();

                        if (match != null) {
                            match.setSUPER_OVER(superover);    // 1-> end of match
//                            match.setScoring(false);

                            realm.copyToRealmOrUpdate(match);

//                            displayScoreCard();
                            displayScoreCard(false, false);
                        }

                        Log.d("endOfMatch", "endOfMatch, match : " + match);
                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }
    }





    void applySubstitution(){

//        selectOutType();
//        selectFielder();
        final ArrayAdapter<String> teamAdapter = new ArrayAdapter<String>(UpdatedScoringActivity.this,
                android.R.layout.select_dialog_singlechoice);

        teamAdapter.add(teamA);
        teamAdapter.add(teamB);

        substitutionBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
        substitutionBuilder.setIcon(R.drawable.ball);
        substitutionBuilder.setCancelable(false);
        substitutionBuilder.setTitle("Apply substitution for :");
//        substitutionBuilder.setNeutralButton("cancel", new DialogInterface.OnClickListener() {
//            @Override
//            public void onClick(DialogInterface dialog, int which) {
//                dialog.cancel();
//            }
//        });
        substitutionBuilder.setAdapter(teamAdapter, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                String strName = teamAdapter.getItem(which);

                if (which == 0)
                    team = 1;

                else if (which == 1)
                    team = 2;

                if (team == battingTeamNo) {
                    batting = true;
                    fielding = false;
                }

                else if (team == fieldingTeamNo) {
                    fielding = true;
                    batting = false;
                }

                AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
                builderInner.setIcon(R.drawable.ball);
                builderInner.setCancelable(false);
                dialog.dismiss();
                builderInner.setMessage(strName);
                builderInner.setTitle("Selected team is ");

                builderInner.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog,int which) {
                        Log.e("Scoring", "applySubstitution, team : "+team+", team name : "+strName);
                        displaySubstituteList(team, batting, fielding);
                        dialog.dismiss();

                    }
                });
//
                builderInner.show();
            }
        });
        substitutionBuilder.setNeutralButton("CANCEL", null);
        substitutionBuilder.show();
    }



    void displaySubstituteList(int team, boolean batting, boolean fielding){

//        ballType = 18;
        ballType = -1 ;
        bCount = 0; // Added on 22/09/2021
        substitution = true;
        Log.d("DISPLAY", "42 modified = " + modified);
        Log.d("DISPLAY", "42 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket, ball,
                0, preInningsRuns, remainingRuns, remainingBalls, remainingOver, leadingRuns,
                innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo, fieldingTeamNo,
                player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0,
                ballType, bCount, -1, 0, -1, 0, null,
                0, disNewBatsmanBattingOrder, 0, 0,
                0, false, 0, commentary, -1, mo, maiden,
                modified, udisplay, tco,0, sessionType, sessionID,
                endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs, declared, freeHit, false,
                inning_started, 0, 0, 0, null, pre_out,
                callBowlerAlert, wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT,
                forfeit_team, forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                tea_flag, dinner_flag);


        Intent intent = new Intent(UpdatedScoringActivity.this, SubstitutionActivity.class);
        intent.putExtra("team", team);
        intent.putExtra("batting", batting);
        intent.putExtra("fielding", fielding);
        intent.putExtra("innings", currentInnings);
        intent.putExtra("bowler_id", bowlerID);
        intent.putExtra("pre_bowler_id", preBowlerID);
//        intent.putExtra("event_id", eventID + 1);
        intent.putExtra("eventId", eventID);
        intent.putExtra("strID", strID);
        intent.putExtra("nstrID", nstrID);
//        ===============================================
        // for saving event


//        intent.putExtra("currentInnings", currentInnings);
//        intent.putExtra("currentRuns", currentRuns);
//        intent.putExtra("currentOver", currentOver);
//        intent.putExtra("totalBalls", totalBalls);
//        intent.putExtra("wicket", wicket);
//        intent.putExtra("ball", ball);
//        intent.putExtra("preInningsRuns", preInningsRuns);
//        intent.putExtra("remainingRuns", remainingRuns);
//        intent.putExtra("remainingBalls", remainingBalls);
//        intent.putExtra("remainingOver", remainingOver);
//        intent.putExtra("leadingRuns", leadingRuns);
//        intent.putExtra("innings1Runs", innings1Runs);
//        intent.putExtra("innings2Runs", innings2Runs);
//        intent.putExtra("innings3Runs", innings3Runs);
//        intent.putExtra("innings4Runs", innings4Runs);
//        intent.putExtra("battingTeamNo", battingTeamNo);
//        intent.putExtra("fieldingTeamNo", fieldingTeamNo);
//        intent.putExtra("player1ID", player1ID);
//        intent.putExtra("player2ID", player2ID);
//        intent.putExtra("strID", strID);
//        intent.putExtra("strikerRuns", strikerRuns);
//        intent.putExtra("strikerBalls", strikerBalls);
//        intent.putExtra("nstrID", nstrID);
//        intent.putExtra("nonStrikerRuns", nonStrikerRuns);
//        intent.putExtra("nonStrikerBalls", nonStrikerBalls);
//        intent.putExtra("bowlerID", bowlerID);
//        intent.putExtra("bwRun", bwRun);
//        intent.putExtra("bowlerOver", bowlerOver);
//        intent.putExtra("bowlerBalls", bowlerBalls);
//        intent.putExtra("bowlerWicket", bowlerWicket);
//        intent.putExtra("preBowlerID", preBowlerID);
//        intent.putExtra("preBowlerRun", preBowlerRun);
//        intent.putExtra("preBowlerOver", preBowlerOver);
//        intent.putExtra("preBowlerBalls", preBowlerBalls);
//        intent.putExtra("preBowlerWicket", preBowlerWicket);
//        intent.putExtra("lastPreBowlerID", lastPreBowlerID);
//        intent.putExtra("mo", mo);
//        intent.putExtra("maiden", maiden);
//        intent.putExtra("modified", modified);
//        intent.putExtra("udisplay", udisplay);
//        intent.putExtra("tco", tco);
//        intent.putExtra("tbo", tbo);
//        intent.putExtra("tpbo", tpbo);
//        intent.putExtra("sessionType", sessionType);
//        intent.putExtra("sessionID", sessionID);
//        intent.putExtra("endOfDay", endOfDay);
//        intent.putExtra("SUPER_OVER", SUPER_OVER);
//        intent.putExtra("so_inninngs1Runs", so_inninngs1Runs);
//        intent.putExtra("so_inninngs2Runs", so_inninngs2Runs);
//        intent.putExtra("freeHit", freeHit);
//        intent.putExtra("inning_started", inning_started);
//        intent.putExtra("intervalID", intervalID);
        startActivity(intent);
    }


    float setRemainingOver (float rOver) {

        float tr = 0.1f * ballsPerOver;

        if (ball == 1) {

            --rOver;
            rOver = rOver + tr;
        }
        return rOver;

    }



    void enableButtons(int flag) {

        //if flag = 0 ==> canceling interval alert box
        //if flag = 1 ==> interval button click from scoring page
        //if flag = 2 ==> end of day
        //if flag = 3 ==> undoing while interval

        Log.d("enable", "enableButtons, flag : " + flag + ", pre_out : " + pre_out);
        Log.d("enable", "enableButtons, dismissedPlayrID : " + dismissedPlayrID);
        Log.d("enable", "enableButtons, strID : " + strID + ", nstrID : " + nstrID);
        Log.d("enable", "enableButtons, ball : " + ball + ", ballsPerOver : " + ballsPerOver);
        Log.d("enable", "enableButtons, flag : " + flag + ",i_flag 1, : " + i_flag);
        Log.d("enable", "enableButtons, bowlerID : " + bowlerID + ",lastBowler , : " + lastBowler);

        interval = false;
        endOfDay = false;

        btnUndo.setEnabled(true);
        btnSwap.setEnabled(true);
        btnOut.setEnabled(true);
        btnExtras.setEnabled(true);
        btnHash.setEnabled(true);
        btn1.setEnabled(true);
        btn2.setEnabled(true);
        btn3.setEnabled(true);
        btn4.setEnabled(true);
        btn6.setEnabled(true);
        btn0.setEnabled(true);
//        btnSession.setEnabled(true);
        btnChangeBatsman.setEnabled(true);
        btnChangeBowler.setEnabled(true);

        btnInterval.setText("START INTERVAL");

        if (flag == 1) {
            ballType = 12;
            bCount = 0; // Added on 22/09/2021
            intervalID = 7;

            if ((ball >= 0 && ball < ballsPerOver) || (lastBallType == 6))
                i_flag = 0;
            else {
//                if (ball == 0 && bowlerID == lastBowler)
                i_flag = 1;

            }
//            Toast.makeText(this, "ball : " + ball + ",  ballsPerOver : " + ballsPerOver + ", i_flag : " + i_flag,
//                    Toast.LENGTH_SHORT).show();

            Log.d("enable", "enableButtons, flag : " + flag + ", lastBallType : " + lastBallType);
            Log.d("enable", "enableButtons, ball : " + ball + ", ballsPerOver : " + ballsPerOver);

            // Added on 22/04/2021 (B)
            if (sessionID == 7) {
                sessionID = 8;
                sessionType = "SS2";
            }
            else if (sessionID == 9) {
                sessionID = 10;
                sessionType = "SS3";
            }
            //==== till here (B)

            Log.d("DISPLAY", "43 modified = " + modified);
            Log.d("DISPLAY", "43 udisplay = " + udisplay);
            newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls,
                    wicket, ball, 0, preInningsRuns, remainingRuns, remainingBalls,
                    remainingOver, leadingRuns, innings1Runs, innings2Runs, innings3Runs,
                    innings4Runs, battingTeamNo, fieldingTeamNo, player1ID, player2ID, strID,
                    nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0, ballType, bCount,
                    0, 0, 0, 0, null, 0,
                    disNewBatsmanBattingOrder,0, 0, 0, false, 0, commentary,
                    0, mo, maiden, modified, udisplay, tco, intervalID, sessionType,
                    sessionID, endOfDay, SUPER_OVER,
                    so_inninngs1Runs, so_inninngs2Runs, declared, freeHit, false,
                    inning_started, 0, 0, 0, null,
                    pre_out, callBowlerAlert, wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT,
                    forfeit_team, forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                    tea_flag, dinner_flag);
        }

        else if (flag == 2) {

            ballType = 17;
            bCount = 0; // Added on 22/09/2021
            sessionID = 12;
            sessionType = "SS1";
            Log.d("ball", "enableButtons, ball : " + ball);
            if ((ball >= 0 && ball < ballsPerOver) || lastBallType == 6)
                i_flag = 0;
            else
                i_flag = 1;

            // Added on 28/04/2021
            lunch_flag = 0;
            tea_flag = 0;
            dinner_flag = 0;
            // ==== till here
            Log.d("DISPLAY", "44 modified = " + modified);
            Log.d("DISPLAY", "44 udisplay = " + udisplay);
            newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket,
                    ball, 0, preInningsRuns,
                    remainingRuns, remainingBalls, remainingOver, leadingRuns, innings1Runs, innings2Runs,
                    innings3Runs, innings4Runs, battingTeamNo, fieldingTeamNo, player1ID, player2ID, strID,
                    nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0, ballType, bCount,
                    0, 0, 0, 0, null, 0, disNewBatsmanBattingOrder,
                    0, 0, 0, false, 0, commentary,
                    0, mo, maiden, modified, udisplay, tco, intervalID, sessionType,
                    sessionID, endOfDay, SUPER_OVER,
                    so_inninngs1Runs, so_inninngs2Runs, declared, freeHit, false,
                    inning_started, 0, 0, 0, null,
                    pre_out, callBowlerAlert, wk_id, keeper_position, pre_wk_id, pre_wk_position,
                    FORFEIT, forfeit_team, forfeit_innings, CONCEDE, conceded_team, forceEndingType,
                    lunch_flag, tea_flag, dinner_flag);
        }

        if (flag !=3) { // added on 07/07/2021
            if (/*pre_out && */(dismissedPlayrID > 0) && (strID == dismissedPlayrID || nstrID == dismissedPlayrID)) {

                out = true;
//            confirm_out = true;
                pre_out = false;
                Log.d("enable", "enableButtons, i_flag 2, : " + i_flag + ", ball : " + ball);
                Log.d("enable", "enableButtons, bowlerID : " + bowlerID + ", lastBowler : " + lastBowler);
                Log.d("enable", "enableButtons, callBowlerAlert = " + callBowlerAlert);
                /* Commented on 26/11/2021
                if (ball == 0 && bowlerID == lastBowler) {
                    Log.d("CHANGEBATSMAN", "enableButtons, 1 ");

//                    callBowlerAlert = true; // Added on 26/11/2021
                    changeBatsman(dismissedPlayrID, null, true, true);
                } else {
                    Log.d("CHANGEBATSMAN", "enableButtons, 2 ");

//                    callBowlerAlert = false; // Added on 26/11/2021
                    changeBatsman(dismissedPlayrID, null, true, false);

                }*/

                changeBatsman(dismissedPlayrID, null, true, callBowlerAlert);
            }
            //Added on 26/1/2021
            else {
                if (i_flag == 1 || callBowlerAlert) {
                    i_flag = 0;
                    selectBowlerAlertDialog();
                }
            }
            // === til here
        }
    }



    void disableButtons(int id) {

        if (id == 0)
            interval = true;
//        btnUndo.setEnabled(false);
        btnUndo.setEnabled(true);
        btnSwap.setEnabled(false);
        btnOut.setEnabled(false);
        btnExtras.setEnabled(false);
        btnHash.setEnabled(false);
        btn1.setEnabled(false);
        btn2.setEnabled(false);
        btn3.setEnabled(false);
        btn4.setEnabled(false);
        btn6.setEnabled(false);
        btn0.setEnabled(false);
//        btnSession.setEnabled(false);
        btnChangeBatsman.setEnabled(false);
        btnChangeBowler.setEnabled(false);

        // updated on 30/04/2020
        if (sessionID == 11 && id == 1) {
            btnInterval.setText("END OF DAY");
            btnInterval.setEnabled(false);
        }
        else {
            btnInterval.setText("END INTERVAL");
            btnInterval.setEnabled(true);
        }

        if (id == 2) {
            btnInterval.setText("START DAY");
            btnInterval.setEnabled(true);
        }
    }


    /*// updated on 22/10/2020*/
    void setInterval(Events events, int flag) {

        // flag = 0 ==> from OnClick()
        // flag = 1 ==> from selectBowlerAlertDialog()
        // flag = 3 ==> from changeBatsman()

        View intervalView = View.inflate(this, R.layout.session_interval, null);
        Spinner spinner = (Spinner) intervalView.findViewById(R.id.sp_session_interval);
        LinearLayout ll_remarks = (LinearLayout) intervalView.findViewById(R.id.ll_interval_remarks);
        TextView tv_required_symbol = (TextView) intervalView.findViewById(R.id.tv_required_symbol);
        EditText editText = (EditText) intervalView.findViewById(R.id.et_session_interval);

        /*//added on 22/10/2020
        if (totalInnings == 2)
            ll_remarks.setVisibility(View.GONE);
        else
            ll_remarks.setVisibility(View.VISIBLE);*/

        tv_required_symbol.setVisibility(View.INVISIBLE);

        intervalList.clear();
        intervalList.add("--Select--");
        intervalList.add(" Drinks ");
        intervalList.add(" Lunch ");
        intervalList.add(" Tea ");
        intervalList.add(" Dinner ");
        intervalList.add(" Rain ");
        //added on 30/04/2020
        intervalList.add(" End Of Day ");
        intervalList.add(" End Innings ");
        intervalList.add(" Others ");

        ArrayAdapter<String> adapterIntervals = new ArrayAdapter<String>(this,
                android.R.layout.simple_spinner_item, intervalList);
        adapterIntervals.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); // The drop down view
        spinner.setAdapter(adapterIntervals);

        // === (a) added on 22/10/2020


//        if (totalInnings == 2)
//            ll_remarks.setVisibility(View.GONE);
//        else
//            ll_remarks.setVisibility(View.VISIBLE);
        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                Object item = parent.getItemAtPosition(position);
                if (item != null) {
                    Log.d("setInterval00", "item.toString() : " + item.toString());
                    String spinner_value = item.toString();
                    if (spinner_value.matches(" Others "))
                        tv_required_symbol.setVisibility(View.VISIBLE);
                    else
                        tv_required_symbol.setVisibility(View.INVISIBLE);
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        // === (a) till here


        Log.d("selected_interval", "spinner.getSelectedItem() : " + ((String) spinner.getSelectedItem()));

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setIcon(R.drawable.ball).
                setTitle("Select Interval Type").
                setView(intervalView).
                setCancelable(false).
                setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {

                        dialogInterface.cancel();
                        text = (String) spinner.getSelectedItem();
                        final int x = spinner.getSelectedItemPosition();
                        boolean wrong_flag = false;

                        Log.d("selected_interval", "i : " + i);
                        Log.d("selected_interval", "text : " + text);
                        Log.d("selected_interval", "x : " + x);
                        Log.d("selected_interval", "s pinner.getSelectedItem() : " + spinner.getSelectedItem());
                        Log.d("selected_interval", "spinner.getSelectedItem().equals(--select--) : " + spinner.getSelectedItem().equals("--select--"));
                        if (i == 0)
                            Log.d("selected_interval", " 2, i : " + i + ", spinner.getSelectedItem() : " + spinner.getSelectedItem());
                        else
                            Log.d("selected_interval", " 3,  i : " + i + ", spinner.getSelectedItem() : " + spinner.getSelectedItem());


                        if (x == -1 || x == 0) {//text.matches("--Select--")) {//i == -1 || i == 0) {//spinner.getSelectedItem().equals("--select--"))
                            displayError("Please select one interval type", 1, flag);

                        }

                        else {

                            Log.d("selected_interval", "else 4,  i : " + i
                                    + ", spinner.getSelectedItem() : " + spinner.getSelectedItem());


                            i_flag = flag;

                            intervalID = spinner.getSelectedItemPosition();
                            if (intervalID == 8)//7)
                                intervalID = 6;
                            Log.d("Scoring", "setIntervalID, : " + intervalID);

//                            text = (String) spinner.getSelectedItem();

                            commentary = editText.getText().toString();
                            Log.d("Test", "remarks : " + commentary);

                            if (x == 8/*7*//*text.matches(" Others ")*/  && commentary.matches("")) {   // Others

                                Log.e("Scoring", "setInterval, com : null");
                                tv_required_symbol.setVisibility(View.VISIBLE);
                                displayError("Please enter remarks if interval type is 'other'", 1, flag);
//                                setInterval(flag);
                            }

                            else if (x == 7) {  // End Innings
                                if (commentary.matches("")) {
//                                forceEndInnings();
                                    tv_required_symbol.setVisibility(View.VISIBLE);
                                    displayError("Please Specify the reason", 1, flag);
                                }

                                else {
                                    tv_required_symbol.setVisibility(View.VISIBLE);
                                    forceEndInnings(1, flag);
                                }
                            }

                            // Added on 22/04/2021
                            else if (x == 5) {
                                tv_required_symbol.setVisibility(View.VISIBLE);
                                displayError("Please Specify the reason", 1, flag);
                            }
                            // ===== till here

                            else if ((x == 6 && innings.matches("single")) /* lunch, tea and dinner */) {   //  End Of Day

                                displayError("No end of day for single innings match", 1, flag);
                            }

                            else {

//                                dialogInterface.cancel();
                                //commented on 30/04/2020
                                disableButtons(0);
                                tv_required_symbol.setVisibility(View.INVISIBLE);

                                Toast.makeText(getApplicationContext(), "You have selected interval " + text,
                                        Toast.LENGTH_SHORT).show();

                                Log.d("so_inninngs1Runs","setInterval27 , : "+so_inninngs1Runs);

                                //added on 30/04/2020
                                if (x == 6) {

//                                    endOfDay = true;

                                    endOfDay(1, flag);
//                                    setSession();
                                }

                                else {

                                    //
                                    disableButtons(0);

                                    if (x == 2) {   // lunch
                                        if (lunch_flag == 0) {  // Added on 28/04/2021
                                            session = true;
                                            sessionID = 7;
                                            sessionType = "SE1";

                                            lunch_flag = 1;// Added on 28/04/2021

                                            setMatchStatus(sessionType, sessionID);
                                            checkBowler(bowlerID);
                                            wrong_flag = false;  // Added on 26/11/2021
                                        } else {
                                            wrong_flag = true;  // Added on 26/11/2021
                                            displayError("Invalid interval selection", 1, flag);
                                        }

                                    }

                                    else if (x == 3) {  // tea
                                        if (tea_flag == 0) {    // Added on 28/04/2021
                                            session = true;
                                        /* Commented on 22/04/2021
                                        sessionID = 9;
                                        sessionType = "SE2";*/
                                            // Updated on 22/04/2021 (A)
                                            if (sessionID == 12) {
                                                sessionID = 7;
                                                sessionType = "SE1";
                                            } else if (sessionID == 8) {
                                                sessionID = 9;
                                                sessionType = "SE2";
                                            }
                                            // till here (A)
                                            tea_flag = 1;// Added on 28/04/2021
                                            setMatchStatus(sessionType, sessionID);
                                            wrong_flag = false;  // Added on 26/11/2021
                                        } else {
                                            wrong_flag = true;  // Added on 26/11/2021
                                            displayError("Invalid interval selection", 1, flag);
                                        }
                                    }
                                    ///============  till here

                                    // Added on 22/04/2021 (1)
                                    else if (x == 4) {  // dinner
                                        // Updated on 28/04/2021 (2)
                                        if (dinner_flag == 0) {
                                            if (lunch_flag == 0) {
                                                session = true;
                                                sessionID = 9;
                                                sessionType = "SE2";
                                                dinner_flag = 1;
                                                setMatchStatus(sessionType, sessionID);
                                                wrong_flag = false;  // Added on 26/11/2021
                                            } else {
                                                wrong_flag = true;  // Added on 26/11/2021
                                                displayError("Invalid interval selection", 1, flag);
                                            }
                                        } else {
                                            wrong_flag = true;  // Added on 26/11/2021
                                            displayError("Invalid interval selection", 1, flag);
                                        }
                                        // till here (2)

                                    }
                                    // ===== till here(1)

                                    if (!wrong_flag) {  // Added the condition on 26/11/2021
                                        endOfDay = false;
                                        ballType = 12;
                                        bCount = 0; // Added on 22/09/2021
                                        Log.d("DISPLAY", "45 modified = " + modified);
                                        Log.d("DISPLAY", "45 udisplay = " + udisplay);
                                        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket,
                                                ball, 0,
                                                preInningsRuns, remainingRuns, remainingBalls, remainingOver, leadingRuns,
                                                innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo,
                                                fieldingTeamNo, player1ID, player2ID, strID,
                                                nstrID, bowlerID, preBowlerID, lastPreBowlerID,
                                                0, ballType, bCount, 0, 0, 0, dismissedPlayrID,
                                                null, 0, disNewBatsmanBattingOrder, 0, 0, 0,
                                                false, 0, commentary, 0, mo, maiden,
                                                modified, udisplay, tco, intervalID, sessionType, sessionID,
                                                endOfDay, SUPER_OVER,
                                                so_inninngs1Runs, so_inninngs2Runs, declared, freeHit, false,
                                                inning_started, 0, 0, 0,
                                                null, pre_out, callBowlerAlert, wk_id, keeper_position,
                                                pre_wk_id, pre_wk_position, FORFEIT, forfeit_team, forfeit_innings,
                                                CONCEDE, conceded_team, forceEndingType, lunch_flag, tea_flag, dinner_flag);
                                        pre_out = false;
                                    }
                                }

                            }
                        }

//                        else
//                            displayError("Please select one interval type");

                    }
                }).
                setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        dialogInterface.cancel();
                        pre_out = false;

                        if (flag == 1) {
                            enableButtons(0);
                            selectBowlerAlertDialog();
                        }
                        else if (flag == 3) {

                            Log.d("CHANGEBATSMAN", "setInterval, Cancel");
                            changeBatsman(dismissedPlayrID, null, newPartnership, false);
                        }

                        // Added on 30/08/2021
                        else if (flag == 5) {
                            changeIntervalUndoAlert(events, "If you are looking for change interval, \npress CHANGE INTERVAL else NO"); // Added on 30/08/2021
                        }

                        // Added on 31/08/2021
                        else if (flag == 6) {
                            undoNewBatsman(events);
                        }
                    }
                }).
                show();
    }




    void sessionEnable(boolean sessions){

        if (sessions) {

            // disabling all buttons in Scoring
//                            btnUndo.setEnabled(false);
            btnSwap.setEnabled(false);
            btnScore.setEnabled(false);
            btnOut.setEnabled(false);
            btnExtras.setEnabled(false);
            btnHash.setEnabled(false);
//                            btnCom.setEnabled(false);
            btn0.setEnabled(false);
            btn1.setEnabled(false);
            btn2.setEnabled(false);
            btn3.setEnabled(false);
            btn4.setEnabled(false);
            btn6.setEnabled(false);
            btnInterval.setEnabled(false);
            btnChangeBatsman.setEnabled(false);
            btnChangeBowler.setEnabled(false);

        }


        else {

            // disabling all buttons in Scoring
//                            btnUndo.setEnabled(false);
            btnSwap.setEnabled(true);
            btnScore.setEnabled(true);
            btnOut.setEnabled(true);
            btnExtras.setEnabled(true);
            btnHash.setEnabled(true);
//                            btnCom.setEnabled(false);
            btn0.setEnabled(true);
            btn1.setEnabled(true);
            btn2.setEnabled(true);
            btn3.setEnabled(true);
            btn4.setEnabled(true);
            btn6.setEnabled(true);
            btnInterval.setEnabled(true);
            btnChangeBatsman.setEnabled(true);
            btnChangeBowler.setEnabled(true);

        }
    }



/*  Commented on 28/07/2021
    void setSession() {

        View sessionView = View.inflate(this, R.layout.session_interval, null);
        Spinner spinner = (Spinner) sessionView.findViewById(R.id.sp_session_interval);
        EditText editText = (EditText) sessionView.findViewById(R.id.et_session_interval);

        sessionList.clear();
        sessionList.add("--Select--");
        sessionList.add("Session 1");
        sessionList.add("Session 2");
        sessionList.add("Session 3");

        ArrayAdapter<String> adapterSessions = new ArrayAdapter<String>(this,
                android.R.layout.simple_spinner_item, sessionList);
        adapterSessions.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); // The drop down view
        spinner.setAdapter(adapterSessions);

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setIcon(R.drawable.ball).
                setTitle("Select Session Type").
                setView(sessionView).
                setCancelable(false).
                setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {

                        dialogInterface.cancel();
                        final int x = spinner.getSelectedItemPosition();
                        if (x > 0) {//!spinner.getSelectedItem().equals("--select--")) {

                            commentary = editText.getText().toString();
                            Log.d("Test", "BuilderText : " + commentary);

                            if (commentary.matches("")) {

                                displayError("Please enter remarks", 2, 0);
//                                setSession();
//                                Toast.makeText(getApplicationContext(),
//                                        "Please enter the remarks", Toast.LENGTH_SHORT).show();
                            }

                            else {

//                        if (!commentary.matches("")) {
                                */
    /*sessionID = interval_sp.getSelectedItemPosition() + 1;*//*


                                ++session_click;

//                                text = (String) btnSession.getText();
                                Toast.makeText(getApplicationContext(), "You have selected interval " + text,
                                        Toast.LENGTH_SHORT).show();

                                //change text in button
                                //change text in button



                                if (session_click == 0) {
//                                    btnSession.setText("END SESSION1");
                                    endOfDay = false;
                                    session = false;
                                    sessionID = 12;
                                    sessionType = "SS1";
                                    setMatchStatus(sessionType, sessionID);
                                }

                                else if (session_click == 1) {
//                                    btnSession.setText("START SESSION2");
                                    session = true;
                                    sessionID = 7;
                                    sessionType = "SE1";
                                    setMatchStatus(sessionType, sessionID);
                                    checkBowler(bowlerID);
                                }

                                else if (session_click == 2) {
//                                    btnSession.setText("END SESSION2");
                                    session = false;
                                    sessionID = 8;
                                    sessionType = "SS2";
                                    setMatchStatus(sessionType, sessionID);
                                }

                                else if (session_click == 3) {
//                                    btnSession.setText("START SESSION3");
                                    session = true;
                                    sessionID = 9;
                                    sessionType = "SE2";
                                    setMatchStatus(sessionType, sessionID);
                                }

                                else if (session_click == 4) {
//                                    btnSession.setText("END SESSION3");
                                    session = false;
                                    sessionID = 10;
                                    sessionType = "SS3";
                                    setMatchStatus(sessionType, sessionID);
                                }

                                else if (session_click == 5) {
//                                    btnSession.setText("END OF INNINGS");
                                    session = true;
                                    sessionID = 11;
                                    sessionType = "SE3";
                                    setMatchStatus(sessionType, sessionID);
                                }

                                sessionEnable(session);
//                                popupSession.dismiss();

                                Log.d("so_inninngs1Runs","setSession28 , : "+so_inninngs1Runs);
                                Log.d("sessionID","setSession28 , : "+sessionID);
                                ballType = 13;
                                newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls,
                                        wicket, ball, 0,
                                        preInningsRuns, remainingRuns, remainingBalls, remainingOver, leadingRuns,
                                        innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo,
                                        fieldingTeamNo, player1ID, player2ID, strID, nstrID, bowlerID,
                                        preBowlerID,lastPreBowlerID, 0,
                                        ballType, 0, 0, 0, dismissedPlayrID,
                                        null, 0, 0, 0, 0,
                                        false, 0, commentary, 0, mo,
                                        maiden, modified, udisplay, tco, tbo, tpbo, intervalID, sessionType,
                                        sessionID, false, endOfDay,
                                        SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs, declared, freeHit,
                                        false, inning_started, 0, 0,
                                        0, null, pre_out, callBowlerAlert, wk_id,
                                        keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                                        forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                                        tea_flag, dinner_flag);
                            }

                        }

                        else {
                            displayError("Please select session", 2, 0);
//                            setSession();
                        }
                    }
                }).
                setNeutralButton("Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        dialogInterface.cancel();
                    }
                }).
                show();
    }
*/




    void setMatchStatus(String status, int id){
        Log.d("setMatchStatus" , "setMatchStatus starting ");
        Log.d("session" , "setMatchStatus 1, session : " + status);
        Log.d("session" , "setMatchStatus 1, sessionType : " + id);

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {

                    try {

                        Match match1 = bgRealm.where(Match.class).
                                equalTo("matchid", matchid).
                                findFirst();

//                        match1.setMatchSync(1);
                        match1.setStatus(status);
                        match1.setStatusId(id);
                        match1.setPlayingInnings(currentInnings);
                        if (currentInnings == 1)
                            match1.setInnings1Runs(currentRuns);
                        else if (currentInnings == 2)
                            match1.setInnings2Runs(currentRuns);
                        else if (currentInnings == 3)
                            match1.setInnings3Runs(currentRuns);
                        else if (currentInnings == 4)
                            match1.setInnings4Runs(currentRuns);

                        // Added on 28/04/2021
                        match1.setLunch_flag(lunch_flag);
                        match1.setTea_flag(tea_flag);
                        match1.setDinner_flag(dinner_flag);
                        // === till here (28/04/2021
                        bgRealm.copyToRealm(match1);
                        Log.d("setMatchStatus" , " match1 : "+ match1);

//                    } catch (JSONException e) {
//                        e.printStackTrace();
                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead",
                                Toast.LENGTH_SHORT).show();
                    }
                }
            });
        } catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }


        ballType = 13;
        bCount = 0; // Added on 22/09/2021
        Log.d("so_inninngs1Runs","setMatchStatus29 , : "+so_inninngs1Runs);
        Log.d("scoring" , "setMatchStatus : ballType " + ballType);
        Log.d("DISPLAY", "47 modified = " + modified);
        Log.d("DISPLAY", "47 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket, ball,
                0, preInningsRuns,
                remainingRuns, remainingBalls, remainingOver, leadingRuns, innings1Runs, innings2Runs,
                innings3Runs, innings4Runs, battingTeamNo, fieldingTeamNo, player1ID, player2ID, strID,
                nstrID, bowlerID, preBowlerID, lastPreBowlerID, 0, ballType, bCount,
                0, 0, 0, dismissedPlayrID, null, 0, disNewBatsmanBattingOrder,
                0, 0, 0, false, 0, commentary,
                0, mo, maiden, modified, udisplay, tco,0, status, id,
                endOfDay, SUPER_OVER, so_inninngs1Runs,
                so_inninngs2Runs, declared, freeHit, false, inning_started, 0,
                0, 0, null, pre_out, callBowlerAlert, wk_id,
                keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team, forfeit_innings,
                CONCEDE, conceded_team, forceEndingType, lunch_flag, tea_flag, dinner_flag);
    }




    public void checkBowler(int pbType) {

//        undo();

//        int pbId = 0, pbType = 0;
        Events lastEvent = realm.where(Events.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).findAll().last();

        if (pbType == 0)
            pbType = lastEvent.getBallType();

        if (pbType == 4 || pbType == 5)     // if end of over or force end of over then call method to select next bowler
            selectBowlerAlertDialog();

        else if (pbType == 1 || pbType == 2 || pbType == 3 || pbType == 6 || pbType == 8)
            Log.e("scoring", "Next bowler is already selected");
            // if last ball id run or boundary or out or extra or next bowler is already selected
        else if (pbType == 7) {

            pbType = realm.where(Events.class).
                    equalTo("matchid", matchid).
                    equalTo("innings", currentInnings).
                    equalTo("eventID", (lastEventID - 1)).findFirst().getBallType();
            checkBowler(pbType);
        }


    }



    public float setOverDisplay(int over, int balls){

        float result = 0f;

//        result = ((over * 10) + balls)/ 10;
        result = over + (balls / 10f);

        return result;
    }




    private void  saveWagonWheelRegion(int eventId, String wwRegion, int stroke_direction) {

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm realm) {

                    try {

//                        Events events = realm.where(Events.class).equalTo("eventID", eventId).findFirst();
                        Events events = realm.where(Events.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).findAll().last();
                        Log.d("WagonWheel", "saveDetails, eventId  : "+ eventId);
                        events.setWagonWheelRegion(wwRegion);
                        events.setStrokeDirection(stroke_direction);
                        realm.copyToRealmOrUpdate(events);
                        Log.d("wheel", "saveDetails, events  : "+ events);

                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("toss", "onclick, Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }
    }





    private void updateSubstitution(int eventId, boolean substitution, boolean powers, int subID, int pp_id, int ballType) {

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm realm) {

                    try {

                        Events events = realm.where(Events.class).equalTo("eventID", eventId).findFirst();
                        Log.d("eventId", "updateSubstitution,   : "+ eventId);
                        Log.d("subID", "updateSubstitution,   : "+ subID);
                        events.setBallType(ballType);
                        // commented on 29/04/20
                        /*if (substitution)
                            events.setSubstitutionID(subID);
                        else*/ if (powers) {
                            events.setPower_id(pp_id);
                        }
//                        events.setStrokeDirection(stroke_direction);
                        realm.copyToRealmOrUpdate(events);


                        Log.d("power", "eventId : " + eventId);
                        Log.d("power", "events : " + events);
                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("toss", "onclick, Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }
    }





    // new custom alertbox to display dismissed player details

    public void dismissedPlayerDetails(int dismissedId) {

        Log.d("Scoring", "dpd, dismissedId : "+dismissedId);
        Log.d("Scoring", "dpd, retired 5 : "+retired);
        Log.d("Scoring", "dpd, newPartnership 5 : "+newPartnership);



//        progress.dismiss();
        String name = realm.where(Player.class).
                equalTo("matchid", matchid).
//                equalTo("team", battingTeamNo).
        equalTo("playerID", dismissedId).findFirst().getPlayerName();
        Log.d("Scoring", "dpd, dismissedplayer : "+name);

        Batsman batsman = realm.where(Batsman.class).
                equalTo("matchid", matchid).
//                equalTo("team", battingTeamNo).
        equalTo("innings", currentInnings).
                equalTo("batsman_pID", dismissedId).findFirst();


        // custom alert box

        View dismissedDetailsView = View.inflate(this, R.layout.dismissed_player_details, null);
        TextView tv_dismissedPlayer = (TextView) dismissedDetailsView.findViewById(R.id.tv_dis_name);
        TextView tv_boundaries = (TextView) dismissedDetailsView.findViewById(R.id.tv_boundaries);
        tv_dismissedPlayer.setText(name+"\t\t\t\t\t\t\t"+batsman.getRuns()+"("+batsman.getBalls()+")");
        tv_boundaries.setText("Fours " + batsman.getF4s() + "\t\t\t\t\t Sixes " + batsman.getS6s());


        AlertDialog.Builder builder = new AlertDialog.Builder(this);
//        builder.setIcon(R.drawable.ball);
//        builder.setTitle("Last Wicket");
        builder.setView(dismissedDetailsView)
                .setTitle("Last Wicket")
                .setIcon(R.drawable.ball)
                .setCancelable(false)
                .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        dialog.dismiss();

                        fieldersList.clear();
                        fielderPlayerID = null;
                        fielderPlayer = "";
                        dismissedPlayrID = dismissedId;

                        Log.d("WKT", "dismissedPlayerDetails, dismissedPlayrID = " + dismissedPlayrID);
                        Log.d("WKT", "dismissedPlayerDetails, dismissedPlayer = " + dismissedPlayer);
                        Log.d("WKT", "dismissedPlayerDetails, strID = " + strID);
                        Log.d("WKT", "dismissedPlayerDetails, nstrID = " + nstrID);
                        Log.d("WKT", "dismissedPlayerDetails, endOver = " + endOver);
                        Log.d("WKT", "dismissedPlayerDetails, callBowlerAlert = " + callBowlerAlert);

                        Log.d("endOver", "endOver : " + endOver);
                        Log.d("endOver", "ball : " + ball);
                        Log.d("endOver", "ballsPerOver : " + ballsPerOver);

                        if (allOUT) {

                            if (strID == dismissedId) {
                                strID = 0;
                                striker = "";
                                strikerRuns = 0;
                                strikerBalls = 0;
                                strikerDots = 0;
                                strikerF4s = 0;
                                strikerS6s = 0;
                            }
                            else if (nstrID == dismissedId) {
                                nstrID = 0;
                                nonStriker = "";
                                nonStrikerRuns = 0;
                                nonStrikerBalls = 0;
                                nonStrikerDots = 0;
                                nonStrikerF4s = 0;
                                nonStrikerS6s = 0;
                            }

                            if ( player1ID == dismissedId) {
                                player1 = "";
                                player1ID = 0;
                                player1Runs = 0;
                                player1Balls = 0;
                                player1Dots = 0;
                                player1F4s = 0;
                                player1S6s = 0;
                            }
                            else if ( player2ID == dismissedId) {
                                player2 = "";
                                player2ID = 0;
                                player2Runs = 0;
                                player2Balls = 0;
                                player2Dots = 0;
                                player2F4s = 0;
                                player2S6s = 0;
                            }
                            allOUT();

                        }
                        else {

//                            checkEndInnings();
//
//                            if (!target_achieved) {

                            if (ball == ballsPerOver) {
                                int tempOver = (int) currentOver;
                                if (tempOver < (totalOver - 1)) {
                                    if (endOver) {
                                        callEndOfOverAlert();
                                    } else {
                                        Log.d("CHANGEBATSMAN", "dismissedPlayerDetails, 1 ");
                                        changeBatsman(dismissedId, null, newPartnership, false);
                                    }
                                } else if (tempOver == (totalOver - 1)) {
                                    /*  Commented on 26/07/2021
                                        // updated on 24/07/2021
                                    if (HUNDRED)
                                        callBallsCompleted();
                                    else*/
                                    callEndOfOverAlert();
                                }
                            } else {
                                if (endOver) {
                                    /*  Commented on 26/07/2021
                                        // updated on 24/07/2021
                                    if (HUNDRED)
                                        callBallsCompleted();
                                    else*/
                                    callEndOfOverAlert();
                                } else {
                                    Log.d("CHANGEBATSMAN", "dismissedPlayerDetails, 2 ");
                                    changeBatsman(dismissedId, null, newPartnership, false);
                                }
                            }
//                            }
                        }
                    }
                }).show();
    }




    @Override
    public void onResume(){
        super.onResume();
    }


    void checkFreeHitBall() {

        Log.d("checkFreeHit","checkFreeHitBall 1, : "+checkFreeHit);
        Log.d("freeHit","checkFreeHitBall 1, : "+freeHit);

        AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        alertDialog.setIcon(R.drawable.ball);
        alertDialog.setCancelable(false);
        alertDialog.setTitle("Next ball is Freehit ball  ");
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "CONFIRM",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        freeHit = true;
                        checkFreeHit = false;
                    }
                });

        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "CANCEL",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        freeHit = false;
                        checkFreeHit = false;
                    }
                });
        alertDialog.show();
    }



    void displayError(String messages, int interval, int flag) {

        AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        alertDialog.setIcon(R.drawable.ball);
        alertDialog.setCancelable(false);
        alertDialog.setTitle(messages);
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        if (interval == 1)
                            setInterval(new Events(), flag);
                        /* Commented on 28/07/2021
                        else if (interval == 2)
                            setSession();*/
                    }
                });
        alertDialog.show();
    }



    void displayError(String messages) {

        AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        alertDialog.setIcon(R.drawable.ball);
        alertDialog.setCancelable(false);
        alertDialog.setTitle(messages);
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        if (out) {
                            bye = false;
                            lb = false;
                            wide = false;
                            runsOffBatNB = false;
                            byeNB = false;
                            lbNB = false;
                            boundaryNB = false;
                            noneNB = false;
                            penalty = false;
                            checkFreeHit = false;
                            tv_extraType.setVisibility(View.INVISIBLE);
                            tv_extraType.setText("");
                            et_runsOffBat_out.setText("");
                            et_extra_run_out.setText("");
                            ll_extras.setVisibility(View.GONE);
                            message = "";

                        }
                    }
                });
        alertDialog.show();
    }


    void displayError(String title,String message){

        AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        alertDialog.setIcon(R.drawable.ball);
        alertDialog.setCancelable(false);
        alertDialog.setTitle(title);
        alertDialog.setMessage(message);
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();

                        if (currentInnings == 1) {

                            addsToBatsman(fieldingTeamNo, 2);
                        }

                        // Added on 10/09/2021
                        if (strID != 0)
                            syncBatsmann(strID, 0, null, false, -1, false,
                                    false, false);
                        if (nstrID != 0)
                            syncBatsmann(nstrID, 0, null, false, -1, false,
                                    false, false);
                        syncBowler();
                        // === till here

                        endOfMatch = true;
                        ballType = 14;
                        bCount = 0; // Added on 22/09/2021
                        Log.d("so_inninngs1Runs","displayError30 , : "+so_inninngs1Runs);
                        Log.e("Scoring", "setOver, matchOverAlert, ballType : " + ballType);
                        Log.e("strID", "setOver, matchOverAlert, ballType : " + strID);
                        Log.e("nstrID", "setOver, matchOverAlert, ballType : " + nstrID);
                        Log.d("DISPLAY", "48 modified = " + modified);
                        Log.d("DISPLAY", "48 udisplay = " + udisplay);
                        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls,
                                wicket, ball, 0,
                                preInningsRuns, remainingRuns, remainingBalls, remainingOver, leadingRuns,
                                innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo,
                                fieldingTeamNo, player1ID, player2ID, strID,
                                nstrID, bowlerID, preBowlerID, lastPreBowlerID, runs,
                                ballType, bCount, 0, 0, 0, 0,
                                null, 0, disNewBatsmanBattingOrder, 0, 0, 0,
                                false, 0, commentary, 0, 0,
                                false, modified, udisplay, tco, 0,
                                sessionType, sessionID,
                                endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs, declared,
                                freeHit, false, inning_started, 0, 0,
                                0, null, pre_out, callBowlerAlert, wk_id,
                                keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                                forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                                tea_flag, dinner_flag);

                        /*syncBatsmann(strID, 0, null, false, -1, false, false);
                        syncBatsmann(nstrID, 0, null, false, -1, false, false);
                        syncBowler();*/
                        setEndInnings(false, ballType);
                        endOfMatch();

                    }
                });
//        alertDialog.show();

        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "CANCEL",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        endOfMatch = false;
                        ballType = -1;
                        bCount = 0; // Added on 22/09/2021
                    }
                });
        alertDialog.show();
    }



    public void displayProgress(){

        progress = new ProgressDialog(this);
        progress.setMessage("Please wait...");
        progress.setProgressStyle(ProgressDialog.STYLE_SPINNER);
        progress.setIndeterminate(true);
        progress.setProgress(0);
        progress.show();
    }



    void syncPartnership(int wicket, int outType, int dismissedPlayerID, boolean retired, boolean undoWicket) {


        Log.d("Partnership", "syncPartnership, newPartnership : " + retired);
        // add new variable for new partnership when retiredHurt

        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);

        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {

                Partnership partnership;

                RealmResults<Partnership> result_partnership = realm.where(Partnership.class).
                        equalTo("matchid", matchid).
                        equalTo("innings", currentInnings).
                        equalTo("wicket", wicket).findAll();

                if (result_partnership.isEmpty() || retired) {

//                    newPartnership = false;

                    Number num = realm.where(Partnership.class).max("partnershipID");
                    int psId = (num == null) ? 1 : num.intValue() + 1;

                    Number ps = realm.where(Partnership.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).
                            max("partnershipSequence");

                    int pseq = (ps == null) ? 1 : ps.intValue() + 1;

                    Log.d("Partnership", "psId : " + psId);
                    Log.d("Partnership", "sequence : " + pseq);
                    partnership = realm.createObject(Partnership.class, psId);
                    partnership.setPartnershipSequence(pseq);
                    partnership.setMatchid(matchid);
                    partnership.setMatchID(matchID);
                    partnership.setInnings(currentInnings);
                    partnership.setSUPER_OVER(SUPER_OVER);
                    partnership.setWicket(wicket);
                    partnership.setPlayer1ID(ps1ID);
                    partnership.setPlayer2ID(ps2ID);
                }

//                else {

//                    newPartnership = false;
                partnership = result_partnership.last();
                partnership.setPartnershipRuns(psRuns);
                partnership.setPartnershipBalls(psBalls);
                partnership.setPartnershipTotalBalls(psTBalls);
                partnership.setPartnershipOver(psOver);
                partnership.setDismissedPlayerID(dismissedPlayerID);

                if (ps1ID == player1ID && ps2ID == player2ID) {

                    partnership.setPlayer1Runs(player1Runs);
                    partnership.setPlayer1Balls(player1Balls);
                    partnership.setPlayer1ContributionBalls(p1CB);
                    partnership.setPlayer1ContributionRuns(p1CR);

                    partnership.setPlayer2Runs(player2Runs);
                    partnership.setPlayer2Balls(player2Balls);
                    partnership.setPlayer2ContributionBalls(p2CB);
                    partnership.setPlayer2ContributionRuns(p2CR);

                } else if (ps1ID == player2ID && ps2ID == player1ID) {

                    partnership.setPlayer1Runs(player2Runs);
                    partnership.setPlayer1Balls(player2Balls);
                    partnership.setPlayer1ContributionBalls(p2CB);
                    partnership.setPlayer1ContributionRuns(p2CR);

                    partnership.setPlayer2Runs(player1Runs);
                    partnership.setPlayer2Balls(player1Balls);
                    partnership.setPlayer2ContributionBalls(p1CB);
                    partnership.setPlayer2ContributionRuns(p1CR);

                }


                if (undoWicket) //{
                    partnership.setDismissedPlayerID(0);
//

                realm.copyToRealmOrUpdate(partnership);
                Log.d("partnership", "syncPartnership : " + partnership);
//                }
            }
        });
    }



    void serverSync() {

        Log.d("sync", "serverSync, serverSync 3, : " + serverSync);

        RealmResults<Events> results1 = realm.where(Events.class).
                equalTo("matchid", matchid).
                findAll();
        if (results1.isEmpty()){

            tvServerSync.setText(String.valueOf(
                    new DecimalFormat("##.##").format(serverSync)));    // Added here on 24/11/2021
        }

        else {

           /* RealmResults<Events> resultstotal = realm.where(Events.class).
                    equalTo("matchid", matchid).
//                    equalTo("syncstatus", 1).
                    findAll();*/

            Log.d("serversync", "results1 = " + results1.size());

            RealmResults<Events> resultsync = realm.where(Events.class).
                    equalTo("matchid", matchid).
                    equalTo("syncstatus", 1).
                    findAll();

            Log.d("serversync", "resultsync = " + resultsync.size());

            RealmResults<Undo> resultsundo = realm.where(Undo.class).
                    equalTo("matchid", matchid).
                    equalTo("innings", currentInnings).
                    findAll();
            Log.d("serversync", "resultsundo = " + resultsundo.size());
            /*if (results2.isEmpty())
//                serverSync = 0f;
                Log.d("sync", "serverSync, results2 1, : " + results2);
            else {*/

            float total_events = (float) (results1.size() + resultsundo.size());
//                int synced = results2.size();  Commented on 06/07/2021
            int synced = resultsync.size();
            int synced1 = resultsync.size() + resultsundo.size();

            Log.d("serversync", "total_events = " + total_events);
            Log.d("serversync", "synced = resultsync.size() = " + synced);
            Log.d("serversync", "synced1 = resultsync.size() + resultsundo.size() = " + synced1);
//                Log.d("sync", "serverSync, total_events : " + total_events);
//                Log.d("sync", "serverSync, synced : " + synced);

            if (total_events > 0) {

//                    Log.d("sync", "serverSync, total_events > 0 : " + (total_events > 0));
//                    Log.d("sync", "serverSync, (synced / total_events) : " + (float) (synced / total_events));
//                    Log.d("sync", "serverSync, (total_events / synced) : " + (float) (total_events / synced));
//                    Log.d("sync", "serverSync, serverSync 4, : " + serverSync);
//
//                    serverSync = ((float) (synced / total_events)) * 100;
                serverSync = (synced * 100.0f)/ total_events;
                double serverSync1 = (synced1 * 100.0f)/ total_events;
                Log.d("serversync", "serverSync = " + serverSync);
                Log.d("serversync", "serverSync1 = " + serverSync1);
//                    serverSync = ((float) (total_events / 100)) * synced;

                tvServerSync.setText(String.valueOf(
                        new DecimalFormat("##.##").format(serverSync)));    // Added on 24/11/2021

            }
//            }
        }

//        Log.d("sync", "serverSync, serverSync 1, : " + serverSync);
//        Log.d("sync", "serverSync, serverSync 2, : " + new DecimalFormat("##.##").format(serverSync));
//        tvServerSync.setText(String.valueOf(
//                new DecimalFormat("##.##").format(serverSync)));  Commented on 24/11/2021
    }



    // added on 04/06/2020
    // to free memory
    public void freeMemory() {
        System.runFinalization();
        Runtime.getRuntime().gc();
        System.gc();
    }



    // added on 08/07/2020
    public void post(int i) {
        Log.d("post()", "i : " + i);
        Log.d("post", "post() 3: ");
        if (i == 1)
            Log.d("post()", "wheel = true");
        else if (i == 2)
            Log.d("post()", "substitution = true");
        else if (i == 3)
            Log.d("post()", "power = true");
        else if (i == 4)
            Log.d("post()", "saveUndo");
        else if (i == 5)
            Log.d("post()", "newEvent");
        else if (i == 6)
            Log.d("post()", "updateEvents");


        jsonUndoArray = new JSONArray();
        undo_count = 0;
        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);

        // moved from bottom of this same method
        // added on 19/10/2020
        Match match = realm.where(Match.class).
                equalTo("matchid", matchid).
                findFirst();

        if (match != null) {

            if (match.getMatchSync() != 1) {
                postMatchDetails(matchid);
            }
        }

        // added on 12/11/2021
        RealmResults<Player> players_result = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("sync", 0).
                equalTo("edit", false).
                findAll();
        if (players_result.size() > 0)
            postPlayers();
        // === till here

        // adding players (team A)
                   /* RealmResults<Player> resultsA = realm.where(Player.class).
                            equalTo("matchid", matchid).
                            equalTo("team", 1).findAll();

                    int count_A = realm.where(Player.class).
                            equalTo("matchid", matchid).
                            equalTo("team", 1).
                            equalTo("sync", 1).findAll().size();

                    Log.d("POST()", "scoring 1, resultsA.size() : " + resultsA.size());
                    Log.d("POST()", "scoring 1, count_A : " + count_A);

                    if (resultsA.size() > count_A) {*/

                       /* RealmResults<Player> results1 = realm.where(Player.class).
                                equalTo("matchid", matchid).
                                equalTo("team", 1).
                                equalTo("edit", false).
                                equalTo("sync", 0).findAll();

                        for (Player player : results1) {
                            checkPlayers(player, *//*matchid,*//* matchID, 1, false);
                        }*/

        RealmResults<Player> results1 = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", 1).
                equalTo("edit", true).
                equalTo("sync", 0).findAll();

        for (Player player : results1) {
            checkPlayers(player,/* matchid, */matchID, 1, true);
        }
//                    }

        // adding players (team B)
                    /*RealmResults<Player> resultsB = realm.where(Player.class).
                            equalTo("matchid", matchid).
                            equalTo("team", 2).findAll();

                    int count_B = realm.where(Player.class).
                            equalTo("matchid", matchid).
                            equalTo("team", 2).
                            equalTo("sync", 1).findAll().size();

                    Log.d("POST()", "scoring 2, resultsB.size() : " + resultsB.size());
                    Log.d("POST()", "scoring 2, count_B : " + count_B);

                    if (resultsB.size() > count_B) {*/

                       /* RealmResults<Player> results1 = realm.where(Player.class).
                                equalTo("matchid", matchid).
                                equalTo("team", 2).
                                equalTo("edit", false).
                                equalTo("sync", 0).findAll();

                        for (Player player : results1) {

                            checkPlayers(player,*//* matchid, *//*matchID, 2, false);
                        }*/

        RealmResults<Player> results2 = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", 2).
                equalTo("edit", true).
                equalTo("sync", 0).findAll();

        for (Player player : results2) {
            checkPlayers(player, /*matchid,*/ matchID, 2, true);
        }
//                    }

        // for checking whether team name is edited or not (14/09/2020)
        Match match1 = realm.where(Match.class).
                equalTo("matchid", matchid).findFirst();

        if (match1 != null) {

            if (match1.getTossSync() == 0)    // added don 12/11/2021
                postToss(match1);

            if (match1.getTeamA_sync() == 0 || match1.getTeamB_sync() == 0)    // update don 08/10/2021
                postTeam(match1.getTeamA(), match1.getTeamB());

        }


        // for checking MatchOfficials
        // Added on 11/11/2021
        RealmResults<MatchOfficials> result_officials = realm.where(MatchOfficials.class).
                equalTo("matchid", matchid).
                equalTo("d4s_id", 0).
                equalTo("sync", 0).findAll();
        if (result_officials.size() > 0) {
//                        postOfficialDetails();
            postAdd();
        }

        RealmResults<MatchOfficials> result_officials_edit = realm.where(MatchOfficials.class).
                equalTo("matchid", matchid).
                notEqualTo("d4s_id", 0).
                equalTo("sync", 0).findAll();
        if (result_officials_edit.size() > 0) {
//                        postOfficialDetails();
            for (MatchOfficials official :  result_officials_edit)
                postEdit(official);
        }

        RealmResults<MatchOfficials> result_officials_delete = realm.where(MatchOfficials.class).
                equalTo("matchid", matchid).
                equalTo("delete", true).
                findAll();
        if (result_officials_delete.size() > 0) {
            for (MatchOfficials official :  result_officials_delete) {
                Log.d("USAD", "official = " + official);

                if (official.getD4s_id() > 0) {
                    postOfficialDeletion(official);
                }
                else {
                    delete(official);
                }
            }
        }


                    /* Commented on 18/03/2021 == match note entry is not clarified yet
                    // for checking MatchNotes
                    RealmResults<MatchNotes> result_notes = realm.where(MatchNotes.class).
                            equalTo("matchid", matchid).
                            equalTo("sync", 0).findAll();

                    if (result_notes.size() > 0) {
                        postMatchNote();
                    }*/

        // till here


        RealmResults<Undo> result1 = realm.where(Undo.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).   //Commented on 16/04/2021
//                sort("undoID", Sort.ASCENDING).   Commented on
        sort("eventID", Sort.ASCENDING).
                /*equalTo("sync", 1).*/findAll();


        /* if (result1.isEmpty()) {
         *//* if (isNetworkAvailable()) {
                resetJSONEventArray();*//*
                // commented on 08/07/2020
//                postJSON(matchid, matchID, false);
//            }
//            jsonEventArray = new JSONArray();
        }

        else*/
        if (result1.size() > 0){

            Log.d("jsonUndoArray", "post() 4 : " + result1);
            Log.d("jsonUndoArray", "post() 4, undo_count : " + undo_count);

//                for (Undo undoObject : result1) { Commented on 25/11/2021

            Undo undoObject = result1.last();

            if (undoObject != null) { //undo_count <= 0) {

                if (undoObject.getPost() != 1) {    // Added on 21/04/2021
                    ++undo_count;
                    Log.d("jsonUndoArray", "post() 1 : " + undoObject);

                    try {
                        config = new RealmConfiguration.Builder()
                                .name(AppConstants.GAME_ID + ".realm")
                                .deleteRealmIfMigrationNeeded()
                                .build();
                        realm = Realm.getInstance(config);

                        realm.executeTransaction(new Realm.Transaction() { // TODO: move write to background thread
                            @Override
                            public void execute(Realm bgrealm) {
                                undoObject.setPost(1);
                                bgrealm.insertOrUpdate(undoObject);
                            }
                        });
                    } catch (RealmException e) {
                        Log.d("Scoring", "CheckPlayers, Exception : " + e);
                    } finally {
                        if (realm != null) {
                            realm.close();
                        }
                    }


//                            undoObject.setPost(1);
//                            realm.insertOrUpdate(undoObject);

                    jsonUndoArray.put(setUndo(undoObject));
                    Log.d("jsonUndoArray", "post() 2 : " + jsonUndoArray);

                    Log.d("jsonUndoArray", "post() 5 , isNetworkAvailable : " + isNetworkAvailable());
                    Log.d("jsonUndoArray", "post() 5 , jsonUndoArray : " + jsonUndoArray);
                    Log.d("jsonUndoArray", "post() 5 , undo_count : " + undo_count);

                    Log.d("post()", "b4 postUndoJSON, i = " + i);
                    postUndoJSON(); // Added on 19/11/2021
                    serverSync();   // Added on 19/11/2021
                }
            }
//                }
        }

        /* Commented on 19/11/2021
        Log.d("jsonUndoArray", "post() 5 , isNetworkAvailable : " + isNetworkAvailable());
        Log.d("jsonUndoArray", "post() 5 , jsonUndoArray : " + jsonUndoArray);
        Log.d("jsonUndoArray", "post() 5 , undo_count : " + undo_count);

        if (jsonUndoArray.length() > 0) {

            Log.d("jsonUndoArray", "post() 6 , jsonUndoArray.length() : " + jsonUndoArray.length());
            Log.d("jsonUndoArray", "post() 7 , jsonUndoArray : " + jsonUndoArray);
            postUndoJSON();

        }*/
        else {
            resetJSONEventArray();
            if (jsonEventArray.length() > 0) {


                //postJsonInFileUpload();

               // FileUtils.fileUtils(this);
                postJSON(matchid, matchID/*, false*/);
            }
        }

        serverSync();
    }

    // Deepak Get Preference Value
    private void getSharedPreferenceValue(){
        RealmResults<SharedPreferenceClass> matchValue = realm.where(SharedPreferenceClass.class).findAll();
        Log.d("TAG", "getSharedPreferenceValue: " + matchValue);
        Log.d("TAG", "getSharedPreferenceValue: " + matchValue);
    }

    private void sharePrefenceRealmSave() {

        SharedPreferenceClass sharedPreferenceClass = new SharedPreferenceClass();
        Number current_id = realm.where(SharedPreferenceClass.class ).max("id");
       long next_id;
        if (current_id == null){
            next_id = 1;
        }else {
            next_id = current_id.intValue() + 1;
        }
        sharedPreferenceClass.setId(next_id);
        sharedPreferenceClass.setMatch_id(matchid);
        sharedPreferenceClass.setMatch_ID(matchID);
        sharedPreferenceClass.setTeamA(teamA);
        sharedPreferenceClass.setTeamB(teamB);
        sharedPreferenceClass.setSpInnings(innings);
        sharedPreferenceClass.setBattingTeam(battingTeam);
        sharedPreferenceClass.setFieldingTeam(fieldingTeam);
        sharedPreferenceClass.setBattingTeamNo(battingTeamNo);
        sharedPreferenceClass.setFieldingTeamNo(fieldingTeamNo);
        sharedPreferenceClass.setPlayer1(player1);
        sharedPreferenceClass.setPlayer2(player2);
        sharedPreferenceClass.setPlayer1ID(player1ID);
        sharedPreferenceClass.setPlayer2ID(player2ID);
        sharedPreferenceClass.setTotalInnings(totalInnings);
        sharedPreferenceClass.setPlayer_count(player_count);
        sharedPreferenceClass.setHUNDRED(HUNDRED);
        sharedPreferenceClass.setStriker(striker);
        sharedPreferenceClass.setNonStriker(nonStriker);
        sharedPreferenceClass.setStrID(strID);
        sharedPreferenceClass.setNstrID(nstrID);
        sharedPreferenceClass.setPs1ID(ps1ID);
        sharedPreferenceClass.setPs2ID(ps2ID);
        sharedPreferenceClass.setBowler(bowler);
        sharedPreferenceClass.setBowlerID(bowlerID);
        sharedPreferenceClass.setJust_started(just_started);
        sharedPreferenceClass.setStatus(status);
        sharedPreferenceClass.setMatchtype(matchtype);
        sharedPreferenceClass.setBallsPerOver(ballsPerOver);
        sharedPreferenceClass.setCurrentInnings(currentInnings);
        sharedPreferenceClass.setNoballRun(noballRun);
        sharedPreferenceClass.setWideRun(wideRun);
        sharedPreferenceClass.setPenaltyRun(penaltyRun);
        sharedPreferenceClass.setWicketkeeper(wicketkeeper);
        sharedPreferenceClass.setWk_id(wk_id);
        sharedPreferenceClass.setKeeper_position(keeper_position);
        sharedPreferenceClass.setBattingOrder(battingOrder);
        sharedPreferenceClass.setRUN_ONCE(RUN_ONCE);
        sharedPreferenceClass.setInitialize(initialize);
        sharedPreferenceClass.setScore(score);
        sharedPreferenceClass.setInningsNotStarted(inningsNotStarted);
        sharedPreferenceClass.setSET_OVER(SET_OVER);
        sharedPreferenceClass.setEventID(eventID);
        sharedPreferenceClass.setFirstbowler(firstbowler);
        sharedPreferenceClass.setFirst_batsman(first_batsman);
        sharedPreferenceClass.setInterval(interval);
        sharedPreferenceClass.setSession(session);
        sharedPreferenceClass.setNew_bowler(new_innings);
        sharedPreferenceClass.setConcussion(concussion);
        sharedPreferenceClass.setBatting(batting);
        sharedPreferenceClass.setFielding(fielding);
        sharedPreferenceClass.setSout_id(sout_id);
        sharedPreferenceClass.setSin_id(sin_id);
        sharedPreferenceClass.setNew_bowler(new_bowler);
        sharedPreferenceClass.setSubstitution(substitution);
        sharedPreferenceClass.setSubID(subID);
        sharedPreferenceClass.setBallType(ballType);
        sharedPreferenceClass.setPp_id(pp_id);
        sharedPreferenceClass.setPower(power);
        sharedPreferenceClass.setEfo(efo);
        sharedPreferenceClass.setWheelRegion(wheelRegion);
        sharedPreferenceClass.setStroke_direction(stroke_direction);
        sharedPreferenceClass.setWheel(wheel);
        sharedPreferenceClass.setLimited_over(limited_over);
        sharedPreferenceClass.setPlayerA(playerA);
        sharedPreferenceClass.setPlayerB(playerB);
        sharedPreferenceClass.setFollowon(followon);
        sharedPreferenceClass.setSUPER_OVER(SUPER_OVER);



      realm.executeTransaction(new Realm.Transaction() {
          @Override
          public void execute(Realm realm) {
              realm.copyToRealmOrUpdate(sharedPreferenceClass);
          }
      });
    }


    public void checkPlayers(Player player, /*int matchid, */String matchID, int team, boolean edit) {

        // added on 14/09/2020

        String captain = null, vice_captain = null, wicketkeeper = null;

        if (isNetworkAvailable()) {

   /*         Player player = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("playerID", player_id).findFirst();*/

            if (player != null) {
                Log.d("ADD", "player : " + player.toString());

                JSONArray arrayPlayerB = new JSONArray();
                JSONObject  jsonPlayerB = new JSONObject();

                try {
                    jsonPlayerB.put("name", player.getPlayerName());
                    jsonPlayerB.put("player_id", player.getPlayerID());
                    jsonPlayerB.put("d4s_playerid", player.getD4s_playerid());
//                    if (edit) {
//
//                    }
//
//                    else {
                    if (player.isCaptain())
                        jsonPlayerB.put("captain", "y");
                    else
                        jsonPlayerB.put("captain", "n");
                    if (player.isViceCaptain())
                        jsonPlayerB.put("vice_captain", "y");
                    else
                        jsonPlayerB.put("vice_captain", "n");
                    if (player.isWicketKeeper())
                        jsonPlayerB.put("wicketkeeper", "y");
                    else
                        jsonPlayerB.put("wicketkeeper", "n");
//                    }
                    arrayPlayerB.put(jsonPlayerB);
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                JSONArray subarray = new JSONArray();
                JSONArray subarray1 = new JSONArray();
                JSONArray parray = new JSONArray();
                JSONArray sarray = new JSONArray();

                JSONObject teampsobject= new JSONObject();
                JSONObject teamobject= new JSONObject();


                JSONObject jsonTeamB = new JSONObject();
                try {

                    if (edit) {
                        if (player.isSubstitute()) {
                            jsonTeamB.put("players", subarray);
                            jsonTeamB.put("substitutes", arrayPlayerB);
                        } else {
                            jsonTeamB.put("substitutes", subarray);
                            jsonTeamB.put("players", arrayPlayerB);
                        }
                    }

                    /* Commented on 27/11/2021
                    else {

                        if (player.isSubstitute()) {
                            jsonTeamB.put("substitutes", arrayPlayerB);
                        }
                        else {
                            jsonTeamB.put("players", arrayPlayerB);
                        }
                    }*/

                    // edited

                    RealmResults<Player> players_list = realm.where(Player.class).
                            equalTo("matchID", matchID).
                            equalTo("team", player.getTeam()).findAll();

                    for (Player player111 : players_list) {

                        if (player111.isCaptain())
                            captain = player111.getPlayerName();
                        else
                        if (player111.isViceCaptain())
                            vice_captain = player111.getPlayerName();

                        if (player111.isWicketKeeper())
                            wicketkeeper = player111.getPlayerName();
                    }

                    jsonTeamB.put("captain", captain);
                    jsonTeamB.put("vice captain", vice_captain);
                    jsonTeamB.put("wicketkeeper", wicketkeeper);


                    /*if (player.isCaptain())
                        jsonTeamB.put("captain", player.getPlayerName());
                    else
                        jsonTeamB.put("captain", "");

                    if (player.isViceCaptain())
                        jsonTeamB.put("vice captain", player.getPlayerName());
                    else
                        jsonTeamB.put("vice captain", "");

                    if (player.isWicketKeeper())
                        jsonTeamB.put("wicketkeeper", player.getPlayerName());
                    else
                        jsonTeamB.put("wicketkeeper", "");*/

                    // added on 08/09/2020
                    teamobject.put("players", parray);
                    teamobject.put("substitutes", sarray);

                } catch (JSONException e) {
                    e.printStackTrace();
                }

                JSONObject jsonA = new JSONObject();
                JSONObject jsonB = new JSONObject();
                JSONObject json_temp = new JSONObject();
                try {

                    JSONObject json_p = new JSONObject();
                    json_p.put("player_id", 0);

                    subarray1.put(json_p);

                    json_temp.put("players", subarray1);
                    if (edit)
                        json_temp.put("substitutes", subarray1);//subarray);    // commented on 28/09/2020

                    jsonA.put("matchID", matchID);

                    /*if (player.getTeam() == 1) {
                        jsonB.put("TeamA", jsonTeamB);
                    }
                    else {
                        jsonB.put("TeamB", jsonTeamB);
                    }*/

                    // updated (put edit cndition) on 12/09/2020
                    if (edit) {
                        if (player.getTeam() == 1) {
                            jsonB.put("TeamA", jsonTeamB);
                            jsonB.put("TeamB", json_temp);
//                        jsonB.put("TeamB", teamobject);
                        } else {
//                        jsonB.put("TeamA", teamobject);
                            jsonB.put("TeamA", json_temp);
                            jsonB.put("TeamB", jsonTeamB);
                        }
                    }

                    else {
                        if (player.getTeam() == 1) {
                            jsonB.put("TeamA", jsonTeamB);
                        }
                        else {
                            jsonB.put("TeamB", jsonTeamB);
                        }
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                JSONArray array = new JSONArray();
                array.put(jsonA);
                array.put(jsonB);

                JSONObject jsonfeed = new JSONObject();
                try {
                    if (edit)
                        jsonfeed.put("EditPlayers", array);
                    else {
                        // commented om 12/09/2020
//                        jsonfeed.put("AddPlayers", array);
                        // updated on 12/09/2020
                       /* Commented on 12/11/2021
                       if (team == 1) {
                            if (player.isSubstitute())
                                jsonfeed.put("AddTeamAPlayerSubstitute", array);
                            else
                                jsonfeed.put("AddNewTeamAPlayers", array);
                        }
                        else if (team == 2) {
                            if (player.isSubstitute())
                                jsonfeed.put("AddTeamBPlayerSubstitute", array);
                            else
                                jsonfeed.put("AddNewTeamBPlayers", array);
                        }*/

                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                //adding values to postparams
                JSONObject postparams = new JSONObject();
                try {
                    postparams.put("title", "CHASE_POST");
                    postparams.put("feed", jsonfeed);
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                Log.e("Scoring", "postparams : "+postparams);

                JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                        Constants.CHASE_CRICKET_MATCH_API, postparams,
                        new Response.Listener<JSONObject>() {
                            @Override
                            public void onResponse(JSONObject response) {

                                Log.d("Scoring", "response : " + response);
                                try {

                                    if (!response.getBoolean("error") && response.getInt("status") == 200) {

                                        JSONObject jsonMatch = response.getJSONObject("match");

                                        Realm realm = null;
                                        try {
                                            config = new RealmConfiguration.Builder()
                                                    .name(AppConstants.GAME_ID + ".realm")
                                                    .deleteRealmIfMigrationNeeded()
                                                    .build();
                                            realm = Realm.getInstance(config);
                                            realm.executeTransaction(new Realm.Transaction() {
                                                @Override
                                                public void execute(Realm bgRealm) {

                                                    try {

                                                        Player player1 = bgRealm.where(Player.class).
                                                                equalTo("matchID", jsonMatch.getString("app_matchID")).
                                                                equalTo("playerID", response.getInt("playerid")).
                                                                findFirst();

                                                        if (player1 != null) {
                                                            player1.setSync(1);
                                                            if (player1.isEdit())
                                                                player1.setEdit(false);
                                                            bgRealm.copyFromRealm(player1);
                                                        }

                                                        else {
                                                            Log.d("Scoring", "player not found, playerid : " +
                                                                    response.getInt("playerid"));
                                                        }

                                                    } catch (JSONException e) {
                                                        e.printStackTrace();
                                                    } catch (RealmPrimaryKeyConstraintException e) {
                                                        progress.dismiss();
                                                        Toast.makeText(getApplicationContext(),
                                                                "Primary Key exists, Press Update instead",
                                                                Toast.LENGTH_SHORT).show();
                                                    }
                                                }

                                            });
                                        } catch (RealmException e) {
                                            Log.d("Scoring", "CheckPlayers, Exception : " + e);
                                        } finally {
                                            if (realm != null) {
                                                realm.close();
                                            }
                                        }
                                    }
                                } catch (JSONException e) {
                                    e.printStackTrace();
                                }
                            }
                        },
                        new Response.ErrorListener() {
                            @Override
                            public void onErrorResponse(VolleyError error) {

//                                progress.dismiss();
                                Log.e("Scoring", "Error Message is  : " + error.getMessage());

                            }
                        });

                MyApplicationClass.getInstance(getApplicationContext()).addToRequestQueue(jsonObjReq, "postRequest");
                Log.d("Scoring", "jsonObjReq  : " + jsonObjReq);
                Log.d("Scoring", "postparams  : " + postparams);
            }

            else {
                Log.d("Scoring", "player : " + player);
            }
        }
    }


    // updated on on 20/10/2020
/*
    public void postMatchNote() {

        if (isNetworkAvailable()) {

            // updated on 20/10/2020
            Match match = realm.where(Match.class).
                    equalTo("matchid", matchid).findFirst();

            if (match.getMatchSync() == 0) {
                postJSON(matchid, matchID*/
    /*, false*//*
);    // need to check
            }

            RealmResults<MatchNotes> notes_result = realm.where(MatchNotes.class).
                    equalTo("matchid", matchid).
                    equalTo("sync", 0).findAll();

//            JSONObject json_matchID = new JSONObject();

            JSONArray array_notes = new JSONArray();

            if (notes_result.size() > 0) {


                */
/*try {
                    json_matchID.put("matchID", matchID);
                } catch (JSONException e) {
                    Log.d("MATCH_NOTE", "Scoring, JSONException : " + e);
                }
                *//*

                for (MatchNotes matchNotes : notes_result) {

                    Log.d("MNOte", "Scoring, postMatchnote, matchNotes : " + matchNotes);

                    JSONObject json_notes = new JSONObject();
                    try {
                        json_notes.put("sequence", matchNotes.getSequence());
                        json_notes.put("innings", matchNotes.getInnings());
                        json_notes.put("over", (new DecimalFormat("##.#").format(matchNotes.getOver())));
//                        json_notes.put("over", (int) matchNotes.getOver());
//                        json_notes.put("balls", ((matchNotes.getOver()) % ((int) matchNotes.getOver())));
                        json_notes.put("note", matchNotes.getNote());

                        array_notes.put(json_notes);

                    } catch (JSONException e) {
                        Log.d("MATCH_NOTE", "Scoring, JSONException : " + e);
                    }
                }

                JSONObject jsonObject = new JSONObject();
                try {
                    jsonObject.put("matchID", matchID);
                    jsonObject.put("matchnotes", array_notes);
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                JSONObject jsonfeed = new JSONObject();

                try {
                    jsonfeed.put("AddMatchNote", jsonObject);
                } catch (JSONException e) {
                    e.printStackTrace();
                }


                JSONObject postparams = new JSONObject();
                try {
                    postparams.put("title", "CHASE_POST");
                    postparams.put("feed", jsonfeed);
                } catch (JSONException e) {
                    e.printStackTrace();
                }





            */
/*Match match = realm.where(Match.class).
                    equalTo("matchID", matchID).findFirst();

            if (match != null) {

                if (match.getMatch_note() == null) {
                    Log.d("MATCH_NOTE", "Scoring, no match note found");
                }

                else {

                    JSONObject json_match = new JSONObject();
                    JSONObject json_note = new JSONObject();
                    JSONObject json_feed = new JSONObject();
                    JSONArray array = new JSONArray();

                    try {
                        json_match.put("matchID", matchID);

                        json_note.put("note", match.getMatch_note());

                        array.put(json_match);
                        array.put(json_note);

                        json_feed.put("AddMatchNote", array);

                    } catch (JSONException e) {
                        Log.d("MATCH_NOTE", "Scoring, JSONException : " + e);
                    }


                    JSONObject postparams = new JSONObject();
                    try {
                        postparams.put("title", "CHASE_POST");
                        postparams.put("feed", json_feed);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }*//*


                Log.e("MATCH_NOTE", "Scoring, postparams : " + postparams);

                JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                        Constants.CHASE_CRICKET_MATCH_NOTE, postparams,
                        new Response.Listener<JSONObject>() {
                    @Override
                    public void onResponse(JSONObject response) {

                        Log.d("MATCH_NOTE", "Scoring, response : " + response);


                    }
                    },
                        new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Log.e("MATCH_NOTE", "Scoring, Error Message is  : " + error.getMessage());
                    }
                });

                MyApplicationClass.getInstance(getApplicationContext()).addToRequestQueue(jsonObjReq, "postRequest");
                Log.d("MATCH_NOTE", "Scoring, jsonObjReq  : " + jsonObjReq);
                Log.d("MATCH_NOTE", "Scoring, postparams  : " + postparams);
            }
            else {
                Log.d("MATCH_NOTE", "Scoring, no matchnote to sync");
            }
        }
        else {
            Log.d("MATCH_NOTE", "Scoring, network not available");
        }
    }
*/



    //added on 19/10/2020
/*
    public void postMatch(Match match) {

        if (isNetworkAvailable()) {
            // posting match details if not synced
            JSONObject jsonMatch = new JSONObject();

            try {
                jsonMatch.put("d4s_gameid", match.getD4s_matchid());
                jsonMatch.put("d4s_userid", match.getD4s_userid());

                jsonMatch.put("matchID", match.getMatchID());
                jsonMatch.put("teamA", match.getTeamA());
                jsonMatch.put("d4s_teamA_id", match.getTeamAId());
                jsonMatch.put("teamB", match.getTeamB());
                jsonMatch.put("d4s_teamB_id", match.getTeamBId());
                jsonMatch.put("venue", match.getVenue());
                jsonMatch.put("d4s_venue_id", match.getVenueId());
                if (match.getEnd1() == null)
                    jsonMatch.put("end1", "");
                else
                    jsonMatch.put("end1", match.getEnd1());
                if (match.getEnd2() == null)
                    jsonMatch.put("end2", "");
                else
                    jsonMatch.put("end2", match.getEnd2());
                jsonMatch.put("event", match.getEvent());
                jsonMatch.put("d4s_event_id", match.getEventId());
                jsonMatch.put("phase", match.getPhase());
                jsonMatch.put("match_type", match.getMatchType());
                jsonMatch.put("innings", match.getInnings());
                jsonMatch.put("players", match.getPlayer());
                jsonMatch.put("substitute_players", match.getSubst());
                jsonMatch.put("over", match.getActual_over());
                jsonMatch.put("balls_per_over", match.getBalls());
                jsonMatch.put("wide_value", match.getWiderun());
                jsonMatch.put("noball_value", match.getNoballrun());
                jsonMatch.put("penalty_value", match.getPenaltyrun());
                jsonMatch.put("rainruleused", "n");

            } catch (JSONException e) {
                e.printStackTrace();
            }


            JSONObject jsonfeed = new JSONObject();
            try {
                jsonfeed.put("AddMatch", jsonMatch);
            } catch (JSONException e) {
                e.printStackTrace();
            }


            JSONObject postparams = new JSONObject();
            try {
                postparams.put("title", "CHASE_POST");
                postparams.put("feed", jsonfeed);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                    Constants.CHASE_CRICKET_MATCH_API, postparams,
                    new Response.Listener<JSONObject>() {
                        @Override
                        public void onResponse(JSONObject response) {

                            Log.d("EDIT_TEAM", "Scoring, response : " + response);
                            // Added on 28/07/2021
                            // sync the match
                            try {
                                if (!response.getBoolean("error") && response.getInt("status") == 200) {

                                    JSONObject jsonMatch = response.getJSONObject("match");
                                    Log.d("create", "login(u,p), jsonMatch : " + jsonMatch);
                                    Realm realm = null;
                                    try {
                                         config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
                                        realm.executeTransaction(new Realm.Transaction() {
                                            @Override
                                            public void execute(Realm bgRealm) {

                                                try {

                                                    Match match1 = bgRealm.where(Match.class).
                                                            equalTo("matchID",
                                                                    jsonMatch.getString("app_matchID")).
                                                            findFirst();

                                                    if (match1 != null) {
                                                        match1.setPost(true);
                                                        match1.setMatchSync(1);
                                                        Log.d("matchSync", "create, match synced");
                                                        match1.setStatus("MC");
                                                        match1.setStatusId(1);
                                                        match1.setTeamA_sync(1);
                                                        match1.setTeamB_sync(1);

                                                        bgRealm.copyToRealm(match1);
                                                        Log.d("matchSync", "create, match : " + match1);
                                                    }
                                                } catch (JSONException e) {
                                                    e.printStackTrace();
                                                } catch (RealmPrimaryKeyConstraintException e) {
                                                    progress.dismiss();
                                                }
                                            }
                                        });
                                    } catch (RealmException e) {
                                        Log.d("test", "Exception : " + e);
                                    } finally {
                                        if (realm != null) {
                                            realm.close();
                                        }
                                    }
                                }
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }

                            // === till here


                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {

//                                progress.dismiss();
                            Log.e("EDIT_TEAM", "Scoring, Error Message is  : " + error.getMessage());

                        }
                    });

            MyApplicationClass.getInstance(getApplicationContext()).addToRequestQueue(jsonObjReq, "postRequest");
            Log.d("EDIT_TEAM", "Scoring, jsonObjReq  : " + jsonObjReq);
            Log.d("EDIT_TEAM", "Scoring, postparams  : " + postparams);

        }

        else {
            Log.d("EDIT_TEAM", "Scoring, network not available");
        }
    }
*/


    // ADDED ON 27/02/2021
    private void changeWicketkeeper(int i) {

        AlertDialog wkDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        wkDialog.setIcon(R.drawable.ball);
        wkDialog.setCancelable(false);
        wkDialog.setTitle(wicketkeeper);
        wkDialog.setMessage("is wicketkeeper. Do you want to change it?");
        wkDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        if (i == 1)
                            selectNewWicketkeeper(wk_id);
                        else if (i == 2)
                            setSubstituteAsNewWicketkeeper(wk_id);
                    }
                });
        wkDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "CANCEL",
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });

        wkDialog.show();
    }


    private void selectNewWicketkeeper(int wkID) {

        String old_wk = wicketkeeper;

        if (wkID > 0) {

            RealmResults<Player> results = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", fieldingTeamNo).
                    equalTo("substitute", false).
                    equalTo("playing", true).
                    equalTo("retired_concussion", false).
                    equalTo("retired", false).findAll();

            final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(UpdatedScoringActivity.this,
                    android.R.layout.select_dialog_singlechoice);

            for (Player player : results) {
                if (player.getPlayerID() != wkID)
                    arrayAdapter.add(player.getPlayerName());
            }

            fielderBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
            fielderBuilder.setIcon(R.drawable.ball);
            fielderBuilder.setCancelable(false);
            fielderBuilder.setTitle("Select Wicketkeeper");
            fielderBuilder.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            });
            fielderBuilder.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    String strName = arrayAdapter.getItem(which);
                    AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
                    builderInner.setIcon(R.drawable.ball);
                    builderInner.setCancelable(false);
                    dialog.dismiss();
                    builderInner.setMessage(strName);
                    builderInner.setTitle("Selected Wicketkeeper is ");

                    builderInner.setPositiveButton("CONFIRM", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            wicketkeeper = strName;
                            saveWk(strName, wkID/*old_wk*/, 1);
                            dialog.dismiss();

                        }
                    });
                    builderInner.show();
                }
            });

            fielderBuilder.setNegativeButton("CANCEL", null);
            fielderBuilder.show();
        }

        else {

            Player wk_player = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", fieldingTeamNo).
                    equalTo("playerName", wicketkeeper).
                    equalTo("new_wk", true).
                    equalTo("wicketKeeper", true).findFirst();

            if (wk_player != null) {
                if (wk_player.getPlayerID() > 0) {
                    selectNewWicketkeeper(wk_player.getPlayerID());
                }
            }

        }


    }


    private void setSubstituteAsNewWicketkeeper(int wkID) {

        String old_wk = wicketkeeper;

        if (wkID > 0) {

            RealmResults<Player> results = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", fieldingTeamNo).
                    equalTo("substitute", true).
                    equalTo("playing", false).
                    equalTo("retired_concussion", false).
                    equalTo("retired", false).findAll();

            Log.d("substitute", "setSubstituteAsNewWicketkeeper, results : " + results);

            final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(UpdatedScoringActivity.this,
                    android.R.layout.select_dialog_singlechoice);

            if (results.size() > 0) {

                for (Player player : results) {
                    if (player.getPlayerID() != wkID)
                        arrayAdapter.add(player.getPlayerName());
                }

                fielderBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
                fielderBuilder.setIcon(R.drawable.ball);
                fielderBuilder.setCancelable(false);
                fielderBuilder.setTitle("Select Substitute Wicketkeeper");
                fielderBuilder.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
                fielderBuilder.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        String strName = arrayAdapter.getItem(which);
                        AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
                        builderInner.setIcon(R.drawable.ball);
                        builderInner.setCancelable(false);
                        dialog.dismiss();
                        builderInner.setMessage(strName);
                        builderInner.setTitle("Selected Substitute Wicketkeeper is ");

                        builderInner.setPositiveButton("CONFIRM", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {

                                wicketkeeper = strName;
                                saveWk(strName, wkID /*old_wk*/, 2);
                                dialog.dismiss();

                            }
                        });
                        builderInner.show();
                    }
                });

                fielderBuilder.setNegativeButton("CANCEL", null);
                fielderBuilder.show();
            }

            else {

                AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
                builderInner.setIcon(R.drawable.ball);
                builderInner.setCancelable(false);
//                builderInner.setMessage(strName);
                builderInner.setTitle("Please add substitute players first");
                builderInner.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        playerList();
                    }
                });
                builderInner.show();
            }
        }

        else {

            Player wk_player = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", fieldingTeamNo).
                    equalTo("playerName", wicketkeeper).
                    equalTo("new_wk", true).
                    equalTo("wicketKeeper", true).findFirst();

            if (wk_player != null) {
                if (wk_player.getPlayerID() > 0) {
                    setSubstituteAsNewWicketkeeper(wk_player.getPlayerID());
                }
            }
        }
    }


    private void saveWk(String wicketkeeper, int old_wicketkeeper_id, int i) {

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {

                @Override
                public void execute(Realm bgrealm) {

                    try {
                        // new wicketkeeper
                        Player new_wk = bgrealm.where(Player.class).
                                equalTo("matchid", matchid).
                                equalTo("team", fieldingTeamNo).
                                equalTo("retired", false).
                                equalTo("retired_concussion", false).
                                equalTo("playerName", wicketkeeper).findFirst();

                        if (new_wk != null) {

                            pre_wk_id = wk_id;
                            pre_wk_position = keeper_position;

                            wk_id = new_wk.getPlayerID();

                            Number num1 = bgrealm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", fieldingTeamNo).
                                    max("wicketkeeping_position");
                            int nextId1 = (num1 == null) ? 1 : num1.intValue() + 1;
                            keeper_position = nextId1;
                            new_wk.setNew_wk(true);
                            new_wk.setOld_wk(false);
                            new_wk.setWicketKeeper(true);
                            new_wk.setWicketkeeping_position(nextId1);

                            bgrealm.insertOrUpdate(new_wk);
                            Log.e("Scoring", "saveWk, new_wk : " + new_wk);
                        }

                        // old wicketkeeper
                        Player old_wk = bgrealm.where(Player.class).
                                equalTo("matchid", matchid).
                                equalTo("team", fieldingTeamNo).
                                equalTo("retired", false).
                                equalTo("retired_concussion", false).
                                equalTo("playerID", old_wicketkeeper_id).findFirst();

                        if (old_wk != null) {

                            /*Number num1 = bgrealm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", fieldingTeamNo).
                                    max("wicketkeeping_position");
                            int nextId1 = (num1 == null) ? 1 : num1.intValue() + 1;*/
                            old_wk.setNew_wk(false);
                            old_wk.setOld_wk(true);

//                            old_wk.setWicketkeeping_position(nextId1);

                            bgrealm.insertOrUpdate(old_wk);
                            Log.e("Scoring", "saveWk, old_wk : " + old_wk);
                        }

                        if (i == 1)
                            ballType = 24;
                        if (i == 2)
                            ballType = 25;

                        bCount = 0; // Added on 22/09/2021


                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("openers", "checkSpinnerValues, Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }

        Log.d("DISPLAY", "50 modified = " + modified);
        Log.d("DISPLAY", "50 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket,
                ball, 0, preInningsRuns, remainingRuns, remainingBalls, remainingOver,
                leadingRuns, innings1Runs, innings2Runs, innings3Runs, innings4Runs,  battingTeamNo,
                fieldingTeamNo, player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID,
                lastPreBowlerID, 0, ballType, bCount, -1, 0, -1, 0,
                null,0, disNewBatsmanBattingOrder, -1, 0, 0, false,
                0, commentary, 0, mo, maiden, modified, udisplay, tco,
                0, sessionType, sessionID,
                endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs,
                false, freeHit, false, inning_started, 0,
                0, 0, null, pre_out, callBowlerAlert, wk_id,
                keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team, forfeit_innings,
                CONCEDE, conceded_team, forceEndingType, lunch_flag, tea_flag, dinner_flag);
    }


    // Added on 21/04/2021
    private void updateUndo(int eventid) {

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {

                @Override
                public void execute(Realm bgrealm) {

                    try {

                        Undo undo = bgrealm.where(Undo.class).
                                equalTo("matchid", matchid).
                                equalTo("eventID", eventid).
                                findAll().
                                first();

                        if (undo != null) {
                            undo.setPost(1);
                            bgrealm.insertOrUpdate(undo);

                            Undo undo1 = bgrealm.where(Undo.class).
                                    equalTo("matchid", matchid).
                                    equalTo("eventID", eventid).
                                    findAll().
                                    first();

                            jsonUndoArray.put(setUndo(undo1));
                        }


                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        } catch (RealmException e) {
            Log.d("openers", "checkSpinnerValues, Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }

    }


    private void updateUndo2() {

        Log.d("UU2", "j = 1");

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {

                @Override
                public void execute(Realm bgrealm) {

                    try {

                        RealmResults<Undo> results = bgrealm.where(Undo.class).
                                equalTo("matchid", matchid).
                                findAll();

                        if (results.size() > 0) {
                            for (Undo undo : results) {
                                if (undo != null) {
                                    undo.setPost(0);
                                    bgrealm.insertOrUpdate(undo);
                                }
                            }
                        }

                        Log.d("UU2", "j = 2");
                        jsonUndoArray = new JSONArray();

                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        } catch (RealmException e) {
            Log.d("openers", "checkSpinnerValues, Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }

        Log.d("UU2", "j = 3");
//        post(7);    //  Added on 25/11/2021

    }


    // Added on 28/04/2021
    private void checkUndoLimit() {

        if (UNDO_LIMIT) {
            UNDO_LIMIT = false;
            if (innings.matches("single")) {

                if (sessionID == 6) {
                    sessionID = 12;
                    sessionType = "SS1";
                } else if (sessionID == 7) {
                    sessionID = 8;
                    sessionType = "SS2";
                } else if (sessionID == 9) {
                    sessionID = 10;
                    sessionType = "SS3";
                }

            } else {

                if (currentInnings == 1) {

                    if (sessionID == 6) {
                        sessionID = 12;
                        sessionType = "SS1";
                    }
                }
            }

            Log.d("session", " runOnce 1, sessionType : " + sessionType);
            Log.d("session", " runOnce 1, sessionID : " + sessionID);
            setMatchStatus(sessionType, sessionID);
        }
    }


    private void setSessionFlags() {

        Match match = realm.where(Match.class).
                equalTo("matchid", matchid).
                findFirst();
        if (match != null) {
            lunch_flag = match.getLunch_flag();
            tea_flag = match.getTea_flag();
            dinner_flag = match.getDinner_flag();
        }
    }


    // Added on 01/07/2021
    private String setUndoOutType(int id) {
        String outType = "no";
       /* if (id == -1) {
            outType = "no";
        } else */
        if (id == 0) {
            outType = "b";//"Bowled";
        } else if (id == 1) {
            outType = "c";//Caught";
        } else if (id == 2) {
            outType = "ro";//Runout";
        } else if (id == 3) {
            outType = "st";//Stumped";
        } else if (id == 4) {
            outType = "lb";//LBW";
        } else if (id == 5) {
            outType = "hw";//Hit Wicket";
        } else if (id == 6) {
            outType = "ht";//Hit the Ball Twice";
        } else if (id == 7) {
            outType = "ob";//Obstructing Field";
        } else if (id == 8) {
            outType = "hb";//Handled the Ball";
        } else if (id == 9) {
            outType = "to";//Timed Out";
        } else if (id == 10) {
            outType = "rh";//Retired Hurt";
        } else if (id == 11) {
            outType = "a";//Absent";
        } else if (id == 12) {
            outType = "ro";//Retired Out";
        } else {
            outType = "no";
        }
        return outType;
    }


    // Added on 08/07/2021
    void displayWarningBowler(/*String message,*/ String strName, int type, int rtype, int val) {

        AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
        builderInner.setIcon(R.drawable.ball);
        builderInner.setCancelable(false);
        builderInner.setMessage("Allotted bowler overs completed. Do you want to continue ?");
        builderInner.setTitle("WARNING");

        builderInner.setPositiveButton("CONTINUE", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                confirmExceededOver(strName, type, rtype, val);
            }
        });

        builderInner.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                /*if (rtype == 1)
                    changeBowler(type);
                else if (rtype == 2) {*/
                selectBowlerAlertDialog();
//                }
            }
        });
        builderInner.show();
    }


    // moved from another function
    private void confirmBowler(int type, String strName, int val) {

        Log.d("HUNDRED", "confirmBowler, bt_balls = " + bt_balls);
        Log.d("HUNDRED", "confirmBowler, pbt_balls = " + pbt_balls);

        AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
        builderInner.setIcon(R.drawable.ball);
        builderInner.setCancelable(false);
        builderInner.setMessage(strName);
        builderInner.setTitle("Selected Bowler is");

        builderInner.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                if (replacedBowler == null) { //.matches("")) {

                    if (preBowlerID != 0) {
                        if (!strName.matches(preBowler)) {

                            replaceNextBowler(strName, val);

                        } else {

                            AlertDialog.Builder builderInners = new AlertDialog.Builder(UpdatedScoringActivity.this);
                            builderInners.setIcon(R.drawable.ball);
                            builderInners.setCancelable(false);
                            dialog.dismiss();
                            builderInners.setMessage("Selected bowler " + strName + " just bowled the previous over");
                            builderInners.setTitle("OK to change selection");

                            builderInners.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                    changeBowler(new Events(),type, val);
                                }
                            });
                            builderInners.show();
                        }
                    }

                    else {
                        replaceNextBowler(strName, val);
                    }
                }

                else if (replacedBowler != null) {

                    if (preBowlerID != 0) {

                        if (!(strName.matches(preBowler)) && !(strName.matches(replacedBowler))) {

                            replaceNextBowler(strName, val);

                        } else {

                            AlertDialog.Builder builderInners = new AlertDialog.Builder(UpdatedScoringActivity.this);
                            builderInners.setIcon(R.drawable.ball);
                            builderInners.setCancelable(false);
                            dialog.dismiss();
                            builderInners.setMessage("Selected bowler " + strName + " just bowled the previous over");
                            builderInners.setTitle("OK to change selection");

                            builderInners.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {

                                    dialog.dismiss();
                                    changeBowler(new Events(), type, val);

                                }
                            });
//
                            builderInners.show();
                        }
                    }

                    else {

                        replaceNextBowler(strName, val);
                    }
                }
            }
        });

        builderInner.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                changeBowler(new Events(), type, val);
            }
        });
        builderInner.show();
    }


    // moved from top
    private void confirmReturnBowler() {

        Log.d("WKT", "confirmReturnBowler, dismissedPlayrID = " + dismissedPlayrID);
        Log.d("WKT", "confirmReturnBowler, dismissedPlayer = " + dismissedPlayer);
        Log.d("WKT", "confirmReturnBowler, strID = " + strID);
        Log.d("WKT", "confirmReturnBowler, nstrID = " + nstrID);
        Log.d("WKT", "confirmReturnBowler, endOver = " + endOver);

        //ADDED ON 26/02/2021 (only alert box)
        AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
        builderInner.setIcon(R.drawable.ball);
        builderInner.setCancelable(false);
//        dialog.dismiss();
        builderInner.setMessage(preBowler);
        builderInner.setTitle("Selected Bowler is");

        builderInner.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                tco = currentOver;
                tbo = bowlerOver;
                tpbo = preBowlerOver;

                Log.d("so_inninngs1Runs","selectBowlerAlertDialog13 , : "+so_inninngs1Runs);
                ballType = 6;
                bCount = 0; // Added on 22/09/2021
                int tempID = bowlerID;
                lastPreBowlerID = preBowlerID;
                bowlerID = preBowlerID;
                preBowlerID = tempID;
                preBowler = bowler;
                Log.e("Scoring", "selectBowlerAlertDialog, bowlerAlert, RETURN, ballType : " + ballType);
                Log.d("DISPLAY", "51 modified = " + modified);
                Log.d("DISPLAY", "51 udisplay = " + udisplay);
                newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls,
                        wicket, ball, 0, preInningsRuns, remainingRuns, remainingBalls,
                        remainingOver, leadingRuns, innings1Runs, innings2Runs, innings3Runs,
                        innings4Runs, battingTeamNo, fieldingTeamNo, player1ID, player2ID, strID,
                        nstrID, bowlerID, preBowlerID, lastPreBowlerID,
                        0, ballType, bCount, -1, 0, -1, 0,
                        null, 0, disNewBatsmanBattingOrder, 0, 0, 0,
                        false, 0, commentary, bowlerID, mo, maiden,
                        modified, udisplay, tco, 0, sessionType, sessionID, endOfDay, SUPER_OVER,
                        so_inninngs1Runs, so_inninngs2Runs, false, freeHit,
                        false, inning_started, 0, 0,
                        0, null, pre_out, callBowlerAlert, wk_id,
                        keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                        forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                        tea_flag, dinner_flag);

                newBowler(bowlerID, preBowlerID);
            }
        });

        builderInner.setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                selectBowlerAlertDialog();
            }
        });
        builderInner.show();
    }


    // Added on 09/07/2021
    public void confirmExceededOver(String strName, int type, int rtype, int val) {
        AlertDialog.Builder alert = new AlertDialog.Builder(this);
        alert.setIcon(R.drawable.ball).
                setTitle("Confirm").
                setMessage("Selected bowler is " + strName).
                setCancelable(false).
                setPositiveButton("CONFIRM", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        if (rtype == 1)
                            confirmBowler(type, strName, val);
                        else if (rtype == 2) {
                            confirmReturnBowler();
                        }
                    }
                }).
                setNeutralButton("CANCEL", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        /*if (rtype == 1)
                            changeBowler(type);
                        else if (rtype == 2) {*/
                        selectBowlerAlertDialog();
//                        }
                    }
                }).
                show();
    }


    public void displayWarning(String title, String message, int type, int cb_type, int val) {
//        type = 1;  selectBowlerAlertDialog();
//        type = 2;  changeBowler();
//        type = 2;  confirmContinueBowler();

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle(title).
                setMessage(message).
                setIcon(R.drawable.ball).
                setCancelable(false).
                setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
//                        callChangeBowler();   Commented on 26/07/2021
                        if (type == 1)
                            selectBowlerAlertDialog();
                        else  if (type == 2)
                            changeBowler(new Events(), cb_type, val);
//                        else  if (type == 3)
//                            confirmContinueBowler();
                    }
                }).
                show();
    }


    private void continueBowler() {

        tco = currentOver;

        ballType = 6;
        bCount = 0; // Added on 22/09/2021
//        lastPreBowlerID = preBowlerID;    Commented on 27/07/2021
//        preBowlerID = bowlerID;           Commented on 27/07/2021
//        preBowler = bowler;               Commented on 27/07/2021
        Log.e("Scoring", "selectBowlerAlertDialog, bowlerAlert, RETURN, ballType : " + ballType);
        Log.d("DISPLAY", "53 modified = " + modified);
        Log.d("DISPLAY", "53 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls,
                wicket, ball, 0, preInningsRuns, remainingRuns, remainingBalls,
                remainingOver, leadingRuns, innings1Runs, innings2Runs, innings3Runs,
                innings4Runs, battingTeamNo, fieldingTeamNo, player1ID, player2ID, strID,
                nstrID, bowlerID, preBowlerID, lastPreBowlerID,
                0, ballType, bCount, -1, 0, -1, 0,
                null, 0, disNewBatsmanBattingOrder, 0, 0, 0,
                false, 0, commentary, preBowlerID, mo, maiden,
                modified, udisplay, tco, 0, sessionType, sessionID,
                endOfDay, SUPER_OVER,
                so_inninngs1Runs, so_inninngs2Runs, false, freeHit,
                false, inning_started, 0, 0,
                0, null, pre_out, callBowlerAlert, wk_id,
                keeper_position, pre_wk_id, pre_wk_position, FORFEIT, forfeit_team,
                forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                tea_flag, dinner_flag);

        newBowler(bowlerID, preBowlerID);
    }


    // Addedon 26/07/2021
    void displayAlert(String message) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setIcon(R.drawable.ball)
                .setTitle(message)
                .setCancelable(false)
                .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                })
                .show();
    }


    public void setNewPowerPlay() {

        AlertDialog ppDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        ppDialog.setIcon(R.drawable.ball);
        ppDialog.setCancelable(false);
        ppDialog.setTitle("Do you want to enter PowerPlay details?");
        ppDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        /* Commented on 28/07/2021
                        if (HUNDRED)
                            set100sPowerPlay();
                        else*/
                        setPowerPlay();
                    }
                });
        ppDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "CANCEL",
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });

        ppDialog.show();
    }


    private void set100sPowerPlay() {

        ballType = 21;
        bCount = 0; // Added on 22/09/2021
        Log.d("DISPLAY", "54 modified = " + modified);
        Log.d("DISPLAY", "54 udisplay = " + udisplay);
        newEvent(matchid, matchID, currentInnings, currentRuns, currentOver, totalBalls, wicket,
                ball, 0, preInningsRuns, remainingRuns, remainingBalls, remainingOver,
                leadingRuns, innings1Runs, innings2Runs, innings3Runs, innings4Runs, battingTeamNo,
                fieldingTeamNo, player1ID, player2ID, strID, nstrID, bowlerID, preBowlerID,
                lastPreBowlerID, 0, -1, bCount, -1, 0, -1, 0,
                null, 0, disNewBatsmanBattingOrder, 0,
                0, 0, false, 0, commentary, -1, mo, maiden,
                modified, udisplay, tco, intervalID, sessionType, sessionID,
                endOfDay, SUPER_OVER, so_inninngs1Runs, so_inninngs2Runs, declared, freeHit,
                false, inning_started, 0, 0, 0, null,
                pre_out, callBowlerAlert, wk_id, keeper_position, pre_wk_id, pre_wk_position, FORFEIT,
                forfeit_team, forfeit_innings, CONCEDE, conceded_team, forceEndingType, lunch_flag,
                tea_flag, dinner_flag);

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {

                    try {

                        Number num = bgRealm.where(Power.class).max("id");
                        int id = (num == null) ? 1 : num.intValue() + 1;

                        Power power = bgRealm.createObject(Power.class, id);
                        power.setMatchid(matchid);
                        power.setMatchID(matchID);
                        power.setInnings(currentInnings);
                        power.setStart(1);
                        power.setEnd(25);
                        power.setCount(1);  // sequence
                        bgRealm.copyToRealm(power);
                        Log.d("USA", "set100sPowerPlay, power : " + power);

                        Events events = bgRealm.where(Events.class).
                                equalTo("matchid", matchid).findAll().last();
                        if (events != null) {
                            Log.d("eventId", "b4, updatePowerplay, events  : " + events);
//                            events.setBallType(finalBallType);
                            if (events.getBallType() == 21) {
                                events.setPower_id(pp_id);
                                events.setPower_start_over(1);
                                events.setPower_end_over(25);
                                events.setPower_sequence(1);
                                bgRealm.copyToRealmOrUpdate(events);
                            }
                        }

                    } catch (RealmPrimaryKeyConstraintException e) {
                        Log.d("USA", "set100sPowerPlay, RealmPrimaryKeyConstraintException : " + e);
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }
    }

    // Added on 02/08/2021
    void saveToSP() {

        editor = sharedPreferences.edit();
        editor.putInt("sp_post", 5);
        editor.apply();

       /* // Added on 02/08/2021
        Intent intent= new Intent(getBaseContext(), ScheduledService.class);
        getBaseContext().startService(intent);
        // === till here*/
    }

    // Deepak Json  get shared preference value
    public void getJsonInFileUpload() {
        Log.d("TAG", "getJsonInFileUpload: Invoked");

        try {


            StringRequest stringRequest = new StringRequest(Request.Method.GET,
                    Constants.CHASE_CRICKET_MATCH_API_POST + AppConstants.GAME_ID,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String response) {
                            //hiding the progressbar after completion
//                            progressBar.setVisibility(View.INVISIBLE);
                            Log.d("Home", "response = Data Demo" + response);
                            try {
                                JSONObject matchObjectValue = new JSONObject(response);
                                JSONObject matchObject = new JSONObject(matchObjectValue.getString("data"));
                              //  Log.d("TAG", "onResponse: Get the Value for that " + matchObjectValue.getString("matchid"));

                                //
                                matchid = Integer.parseInt(matchObject.getString("matchid"));
                                matchID = matchObject.getString("matchID");
                                teamA = matchObject.getString("teamA");
                                teamB = matchObject.getString("teamB");
                                innings = matchObject.getString("innings");
                                battingTeam = matchObject.getString("battingTeam");
                                fieldingTeam = matchObject.getString("fieldingTeam");
                                battingTeamNo= Integer.parseInt(matchObject.getString("battingTeamNo"));
                                fieldingTeamNo= Integer.parseInt(matchObject.getString("fieldingTeamNo"));
                                player1 = matchObject.getString("player1");
                                player2 = matchObject.getString("player2");
                                player1ID = Integer.parseInt(matchObject.getString("player1ID"));
                                player2ID = Integer.parseInt(matchObject.getString("player2ID"));
                                totalInnings = Integer.parseInt(matchObject.getString("totalInnings"));
                                player_count = Integer.parseInt(matchObject.getString("player_count"));
                                HUNDRED = Boolean.parseBoolean(matchObject.getString("HUNDRED"));
                                striker = matchObject.getString("striker");
                                nonStriker = matchObject.getString("nonStriker");
                                strID = Integer.parseInt(matchObject.getString("strID"));
                                nstrID = Integer.parseInt(matchObject.getString("nstrID"));
                                ps1ID = Integer.parseInt(matchObject.getString("ps1ID"));
                                ps2ID = Integer.parseInt(matchObject.getString("ps2ID"));
                                bowler = matchObject.getString("bowler");
                                bowlerID = Integer.parseInt(matchObject.getString("bowlerID"));
                                just_started = Boolean.parseBoolean(matchObject.getString("just_started"));
                                status = matchObject.getString("status");
                                matchtype = matchObject.getString("matchtype");
                                ballsPerOver = Integer.parseInt(matchObject.getString("ballsPerOver"));
                                currentInnings = Integer.parseInt(matchObject.getString("currentInnings"));
                                noballRun = Integer.parseInt(matchObject.getString("noballRun"));
                                wideRun = Integer.parseInt(matchObject.getString("wideRun"));
                                penaltyRun = Integer.parseInt(matchObject.getString("penaltyRun"));
                                wicketkeeper = matchObject.getString("wicketkeeper");
                                wk_id = Integer.parseInt(matchObject.getString("wk_id"));
                                keeper_position = Integer.parseInt(matchObject.getString("keeper_position"));
                                battingOrder = Integer.parseInt(matchObject.getString("battingOrder"));
                                RUN_ONCE = Boolean.parseBoolean(matchObject.getString("RUN_ONCE"));
                                initialize = Boolean.parseBoolean(matchObject.getString("initialize"));
                                score = Boolean.parseBoolean(matchObject.getString("score"));
                                inningsNotStarted = Boolean.parseBoolean(matchObject.getString("inningsNotStarted"));
                                SET_OVER = Boolean.parseBoolean(matchObject.getString("SET_OVER"));
                                eventID = Integer.parseInt(matchObject.getString("eventID"));
                                firstbowler = Boolean.parseBoolean(matchObject.getString("firstbowler"));
                                first_batsman = Boolean.parseBoolean(matchObject.getString("first_batsman"));
                                interval = Boolean.parseBoolean(matchObject.getString("interval"));
                                session = Boolean.parseBoolean(matchObject.getString("session"));
                                new_innings = Boolean.parseBoolean(matchObject.getString("new_innings"));
                                concussion= Boolean.parseBoolean(matchObject.getString("concussion"));
                                batting = Boolean.parseBoolean(matchObject.getString("batting"));
                                fielding = Boolean.parseBoolean(matchObject.getString("fielding"));
                                sout_id = Integer.parseInt(matchObject.getString("sout_id"));
                                sin_id = Integer.parseInt(matchObject.getString("sin_id"));
                                new_bowler = Boolean.parseBoolean(matchObject.getString("new_bowler"));
                                substitution = Boolean.parseBoolean(matchObject.getString("substitution"));
                                subID = Integer.parseInt(matchObject.getString("subID"));
                                ballType  = Integer.parseInt(matchObject.getString("ballType"));
                                pp_id = Integer.parseInt(matchObject.getString("pp_id"));
                                power  = Boolean.parseBoolean(matchObject.getString("power"));
                                efo = Boolean.parseBoolean(matchObject.getString("efo"));
                               // wheelRegion = matchObject.getString("wheelRegion");
                                stroke_direction = Integer.parseInt(matchObject.getString("stroke_direction"));
                                wheel = Boolean.parseBoolean(matchObject.getString("wheel"));
                                limited_over = Boolean.parseBoolean(matchObject.getString("limited_over"));
                                playerA = Integer.parseInt(matchObject.getString("playerA"));
                                playerB = Integer.parseInt(matchObject.getString("playerB"));
                                followon = Boolean.parseBoolean(matchObject.getString("followon"));
                                SUPER_OVER = Boolean.parseBoolean(matchObject.getString("SUPER_OVER"));
                                sessionID = Integer.parseInt(matchObject.getString("sessionID"));
                                preInningsRuns = Integer.parseInt(matchObject.getString("preInningsRuns"));
                                if (currentInnings > 1){
                                    innings1Runs = Integer.parseInt(matchObject.getString("innings1Runs"));
                                    innings2Runs = Integer.parseInt(matchObject.getString("innings2Runs"));
                                    innings3Runs = Integer.parseInt(matchObject.getString("innings3Runs"));
                                    innings4Runs = Integer.parseInt(matchObject.getString("innings4Runs"));
                                    if (currentInnings == 2 && innings.matches("single")) {
                                        preInningsRuns = innings1Runs;
                                    }
                                    if (SUPER_OVER){

                                        if (currentInnings == 99)
                                            so_inninngs1Runs = Integer.parseInt(matchObject.getString("so_inninngs1Runs"));
                                        else if (currentInnings == 100) {
                                            so_inninngs1Runs = Integer.parseInt(matchObject.getString("so_inninngs1Runs"));
                                            so_inninngs2Runs = Integer.parseInt(matchObject.getString("so_inninngs2Runs"));
                                        }
                                        Log.d("so_inninngs1Runs", "getFromSP()1 : "+so_inninngs1Runs);
                                    }
                                }

                                if (!RUN_ONCE) {

                                    Log.e("SCoring", "oncreate, initializeVariables 1");
                                    initializeVariables();

                                    if (SET_OVER && (runs == 0)){// || (runs == 0)){

                                        Log.e("SCoring", "oncreate, SET_OVER : "+SET_OVER);
                                        setOver(537);                   // for setting the over after displaying Wagon wheel
                                    }

                                }


                                if (interval)
                                    disableButtons(-1);
                            } catch (JSONException e) {
                                throw new RuntimeException(e);
                            }


                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {

                            Log.d("TAG", "onErrorResponse: " + error.networkResponse);

                        }
                    });

            //creating a request queue
            RequestQueue requestQueue = Volley.newRequestQueue(this);

            //adding the string request to request queue
            requestQueue.add(stringRequest);
        }catch (Exception e){

        }

    }

    // Deepak Json Added Post
    public void postJsonInFileUpload(){
        JSONObject matchObject = new JSONObject();
        try {


            matchObject.put("matchid",matchid);
            matchObject.put("matchID",matchID);
            matchObject.put("teamA",teamA);
            matchObject.put("teamB",teamB);
            matchObject.put("innings",innings);
            matchObject.put("battingTeam",battingTeam);
            matchObject.put("fieldingTeam",fieldingTeam);
            matchObject.put("battingTeamNo",battingTeamNo);
            matchObject.put("fieldingTeamNo",fieldingTeamNo);
            matchObject.put("player1",player1);
            matchObject.put("player2",player2);
            matchObject.put("player1ID",player1ID);
            matchObject.put("player2ID",player2ID);
            matchObject.put("totalInnings",totalInnings);
            matchObject.put("player_count",player_count);
            matchObject.put("HUNDRED",HUNDRED);
            matchObject.put("striker",striker);
            matchObject.put("nonStriker",nonStriker);
            matchObject.put("strID",strID);
            matchObject.put("nstrID",nstrID);
            matchObject.put("ps1ID",ps1ID);
            matchObject.put("ps2ID",ps2ID);
            matchObject.put("bowler",bowler);
            matchObject.put("bowlerID",bowlerID);
            matchObject.put("just_started",just_started);
            matchObject.put("status",status);
            matchObject.put("matchtype",matchtype);
            matchObject.put("ballsPerOver",ballsPerOver);
            matchObject.put("currentInnings",currentInnings);
            matchObject.put("noballRun",noballRun);
            matchObject.put("wideRun",wideRun);
            matchObject.put("penaltyRun",penaltyRun);
            matchObject.put("wicketkeeper",wicketkeeper);
            matchObject.put("wk_id",wk_id);
            matchObject.put("keeper_position",keeper_position);
            matchObject.put("battingOrder",battingOrder);
            matchObject.put("RUN_ONCE",RUN_ONCE);
            matchObject.put("initialize",initialize);
            matchObject.put("score",score);
            matchObject.put("inningsNotStarted",inningsNotStarted);
            matchObject.put("SET_OVER",SET_OVER);
            matchObject.put("eventID",eventID);
            matchObject.put("firstbowler",firstbowler);
            matchObject.put("first_batsman",first_batsman);
            matchObject.put("interval",interval);
            matchObject.put("session",session);
            matchObject.put("new_innings",new_innings);
            matchObject.put("concussion",concussion);
            matchObject.put("batting",batting);
            matchObject.put("fielding",fielding);
            matchObject.put("sout_id",sout_id);
            matchObject.put("sin_id",sin_id);
            matchObject.put("new_bowler",new_bowler);
            matchObject.put("substitution",substitution);
            matchObject.put("subID",subID);
            matchObject.put("ballType",ballType);
            matchObject.put("pp_id",pp_id);
            matchObject.put("power",power);
            matchObject.put("efo",efo);
           // matchObject.put("wheelRegion",wheelRegion);
            matchObject.put("stroke_direction",stroke_direction);
            matchObject.put("wheel",wheel);
            matchObject.put("limited_over",limited_over);
            matchObject.put("playerA",playerA);
            matchObject.put("playerB",playerB);
            matchObject.put("followon",followon);
            matchObject.put("SUPER_OVER",SUPER_OVER);
            matchObject.put("sessionID",sessionID);
            matchObject.put("innings1Runs",innings1Runs);
            matchObject.put("innings2Runs",innings2Runs);
            matchObject.put("innings3Runs",innings3Runs);
            matchObject.put("innings4Runs",innings4Runs);
            matchObject.put("preInningsRuns",preInningsRuns);
            matchObject.put("so_inninngs1Runs",so_inninngs1Runs);
            matchObject.put("so_inninngs2Runs",so_inninngs2Runs);

            Log.d("TAG", "postJsonInFileUpload: Post Shared Preference Value " + matchObject);
            StringRequest stringRequest = new StringRequest(Request.Method.POST, Constants.CHASE_CRICKET_MATCH_API_POST +  AppConstants.GAME_ID ,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String response) {
                            Log.d("Updated Value", "Updated Value onResponse: Value " + response);
                            //Toast.makeText(MainActivity.this,response,Toast.LENGTH_LONG).show();
                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            Log.d("TAG", "Updated Value onErrorResponse: " + error);
                            //Toast.makeText(MainActivity.this,error.toString(),Toast.LENGTH_LONG).show();
                        }
                    }){
                @Override
                protected Map<String,String> getParams(){
                    Map<String,String> params = new HashMap<String, String>();
                    params.put("data", String.valueOf(matchObject));
                    return params;
                }

            };

            RequestQueue requestQueue = Volley.newRequestQueue(this);

            //adding the string request to request queue
            requestQueue.add(stringRequest);
//            JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
//                    Constants.CHASE_CRICKET_MATCH_API_POST + "{" + AppConstants.GAME_ID + "}",
//                    matchObject,
//                    new Response.Listener<JSONObject>() {
//                        @Override
//                        public void onResponse(JSONObject response) {
//
//                            Log.e("scoring", "response : View Data " + response);
//
//                            //getJsonInFileUpload();
//
//                        }
//
//                    },
//                    new Response.ErrorListener() {
//                        @Override
//                        public void onErrorResponse(VolleyError error) {
////                            serverSync();   Commented on 13/11/2021
//                            Log.e("volley", "Scoring, onErrorResponse  : " + error.getMessage() + error.networkResponse);
//
//                        }
//                    });
//            MyApplicationClass.getInstance(getApplicationContext()).addToRequestQueue(jsonObjReq, "postRequest");

        }catch (Exception e){

        }
    }

    // Added on 03/08/2021
    public void postMatchDetails(int matchid) {

        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
        if (isNetworkAvailable()) {


            Match match = realm.where(Match.class).equalTo("matchid", matchid).findFirst();
            Log.d("create", "match : " + match);

            JSONObject matchObject = new JSONObject();
            try {
                if (match != null) {
                    matchObject.put("d4s_gameid", match.getD4s_matchid());
                    matchObject.put("d4s_userid", match.getD4s_userid());
                    matchObject.put("matchID", match.getMatchID());
                    matchObject.put("teamA", match.getTeamA());
                    matchObject.put("d4s_teamA_id", match.getTeamAId());
                    matchObject.put("teamB", match.getTeamB());
                    matchObject.put("d4s_teamB_id", match.getTeamBId());
                    matchObject.put("venue", match.getVenue());
                    matchObject.put("d4s_venue_id", match.getVenueId());
                    matchObject.put("end1", match.getEnd1());
                    matchObject.put("end2", match.getEnd2());
                    matchObject.put("event", match.getEvent());
                    matchObject.put("d4s_event_id", match.getEventId());
                    matchObject.put("phase", match.getPhase());
                    matchObject.put("match_type", match.getMatchType());
                    matchObject.put("innings", match.getInnings());
                    matchObject.put("max_balls_per_over", match.getMax_opb());
                    matchObject.put("date", match.getDate());
                    matchObject.put("teamAplayers", match.getPlayerA());
                    matchObject.put("teamBplayers", match.getPlayerB());
//                    matchObject.put("players", match.getPlayer());
//                matchObject.put("players", match.getPlayerA());
//                matchObject.put("players", match.getPlayerB());
//                    matchObject.put("substitute_players", match.getSubst());
//                matchObject.put("substitute_players", match.getSubstA());
                    matchObject.put("over", match.getOver());
                    matchObject.put("balls_per_over", match.getBalls());
                    matchObject.put("wide_value", match.getWiderun());
                    matchObject.put("noball_value", match.getNoballrun());
                    matchObject.put("penalty_value", match.getPenaltyrun());
                    matchObject.put("rainruleused", "n");
                    matchObject.put("max_overs_per_bowler", match.getMax_opb());
                    matchObject.put("max_balls_per_bowler", match.getMax_bpb());
                }

            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject jsonObject = new JSONObject();
            try {
                jsonObject.put("matchID", matchID);
//                jsonObject.put("officials", arrayOfficials);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject jsonfeed = new JSONObject();
            try {
                jsonfeed.put("AddMatch", matchObject);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject postparams = new JSONObject();
            try {
                postparams.put("title", "CHASE_POST");
                postparams.put("feed", jsonfeed);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            Log.d("create", "postparams : " + postparams);

            JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                    Constants.CHASE_CRICKET_MATCH_API, postparams,
                    new Response.Listener<JSONObject>() {
                        @Override
                        public void onResponse(JSONObject response) {

                            try {

                                Log.d("request", "response : " + response);

                                //if no error in response

                                if (!response.getBoolean("error") && response.getInt("status") == 200) {

                                    JSONObject jsonMatch = response.getJSONObject("match");
                                    Log.d("create", "login(u,p), jsonMatch : " + jsonMatch);
                                    String MATCHID = jsonMatch.getString("app_matchID");
                                    int teamA_id = jsonMatch.getInt("team1_id");
                                    int teamB_id = jsonMatch.getInt("team2_id");
                                    Realm realm = null;
                                    try {
                                        config = new RealmConfiguration.Builder()
                                                .name(AppConstants.GAME_ID + ".realm")
                                                .deleteRealmIfMigrationNeeded()
                                                .build();
                                        realm = Realm.getInstance(config);
                                        realm.executeTransaction(new Realm.Transaction() {
                                            @Override
                                            public void execute(Realm bgRealm) {

                                                try {

                                                    Match match1 = bgRealm.where(Match.class).
                                                            equalTo("matchID",MATCHID).
                                                            /*jsonMatch.getString("app_matchID")).*/
                                                                    findFirst();

                                                    if (match1 != null) {
                                                        match1.setPost(true);
                                                        match1.setMatchSync(1);
                                                        Log.d("matchSync", "create, match synced");
                                                        match1.setStatus("MC");
                                                        match1.setStatusId(1);
                                                        match1.setTeamA_sync(1);
                                                        match1.setTeamB_sync(1);

                                                        // Adding team ids
                                                        match1.setTeamAId(teamA_id);
                                                        match1.setTeamBId(teamB_id);

                                                        bgRealm.copyToRealm(match1);
                                                        Log.d("matchSync", "create, match : " + match1);
                                                    }


                                                } catch (RealmPrimaryKeyConstraintException e) {
                                                    progress.dismiss();
//                                                    Toast.makeText(getApplicationContext(),
//                                                            "Primary Key exists, Press Update instead",
//                                                            Toast.LENGTH_SHORT).show();
                                                }
                                            }
                                        });
                                    } catch (RealmException e) {
                                        Log.d("test", "Exception : " + e);
                                    } finally {
                                        if (realm != null) {
                                            realm.close();
                                        }
                                    }

                                }
//                                progress.dismiss();

                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
//        Toast.makeText(getApplicationContext(), error.getMessage(), Toast.LENGTH_SHORT).show();
                            Log.d("CREATE", "Error Message is  : " + error);
                        }
                    });

            MyApplicationClass.getInstance(getApplicationContext()).
                    addToRequestQueue(jsonObjReq, "postRequest");
            Log.d("create", "jsonObjReq  : " + jsonObjReq);
            Log.d("create", "postparams  : " + postparams);

        }
//        Toast.makeText(getApplicationContext(), "Match created", Toast.LENGTH_SHORT).show();
    }


    // Added on 30/08/2021
    public void changeBowlerUndoAlert (Events lastEvent, String message) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setIcon(R.drawable.ball).
                setCancelable(false).
                setMessage(message).
                setPositiveButton("CHANGE BOWLER", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
//                        removeBowler(); // Adde don 15/11/2021
                        changeBowler(lastEvent,5, 1);
                    }
                }).
                // Added on 13/11/2021
                        setNegativeButton("Cancel", null).
                // till here
                        setNeutralButton("NO", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();

                        player_in_id = 0;
                        endOver = false;
                        Log.d("Scoring", "undo, ubtype : "+ubtype+", events : "+lastEvent);
                        int bid = lastEvent.getNewBowlerID();

                        Bowler bow = realm.where(Bowler.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("team", fieldingTeamNo).
                                equalTo("playerID", bid).findFirst();
//               Log.d("undobow", "bowler bt 6, : " + bow);
                        Log.d("HUNDRED", "undo 1, bow = " + bow);
                        if (bow != null) {

                            if ((bow.getBalls() == 0) && (bow.getRuns() == 0) &&
                                    (bow.getNoBalls() == 0) && (bow.getWides() == 0)) {

                                if (!realm.isInTransaction()) {
                                    realm.beginTransaction();
                                }

                                bow.deleteFromRealm();
                                realm.commitTransaction();
                            }
                        }

                        setStrikerNonStriker(lastEvent);

                        currentOver = lastEvent.getOvers();

                        Log.e("Scoring", "Undo, ubtype = "+ubtype+", resetBowler : "+resetBowler);
                        Log.e("Scoring", "Undo, currentOver : "+currentOver);

                        String temp = bowler;
                        int tID = bowlerID;
                        bowler = preBowler;
                        bowlerID = preBowlerID;

                        Bowler bowler = realm.where(Bowler.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("team", fieldingTeamNo).
                                equalTo("playerID", bowlerID).findFirst();
                        Log.d("HUNDRED", "undo 2, bow = " + bow);

                        Log.d("undo", "bowler bt 6.1, : " + bow);

                        Log.e("Scoring", "Undo, ubtype = "+ubtype+", bowler : "+bowler);



                        if (bowler != null) {

                            bwRun = bowler.getRuns();//lastEvent.getBowlerRuns();
                            bowlerBalls = bowler.getBalls();//lastEvent.getBowlerBalls();
                            bt_balls = bowler.getTotalBalls(); // Added on 26/07/2021
                            bowlerOver = bowler.getOver();//lastEvent.getBowlerOver();
                            bowlerWicket = bowler.getWicket();//lastEvent.getBowlerWicket();
                            bowlerDots = bowler.getDots();
                            bowlerF4s = bowler.getF4s();
                            bowlerS6s = bowler.getS6s();
                            bowlerNoBall = bowler.getNoBalls();
                            bowlerWide = bowler.getWides();
                            bowlerMO = bowler.getMaidenOver();
                        }

                        if (currentOver == 1.0f || currentOver == 0.6f) {
                            preBowlerID = 0;
                            preBowler = null;
                        }

                        else if (lastPreBowlerID > 0){
                            preBowlerID = lastPreBowlerID;
                            preBowler = realm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", fieldingTeamNo).
                                    equalTo("playerID", preBowlerID).findFirst().getPlayerName();

                            Bowler pbow = realm.where(Bowler.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", currentInnings).
                                    equalTo("team", fieldingTeamNo).
                                    equalTo("playerID", preBowlerID).findFirst();

                            Log.e("Scoring", "Undo, ubtype = "+ubtype+", bowler : "+bowler);



                            if (pbow != null) {

                                preBowlerRun = pbow.getRuns();//lastEvent.getBowlerRuns();
                                preBowlerBalls = pbow.getBalls();//lastEvent.getBowlerBalls();
                                preBowlerOver = pbow.getOver();//lastEvent.getBowlerOver();
                                preBowlerWicket = pbow.getWicket();//lastEvent.getBowlerWicket();
                                pbt_balls = pbow.getTotalBalls();    // added on 28/07/2021
                                preBowlerDots = pbow.getDots();      // added on 28/07/2021
                                preBowlerMO = pbow.getMaidenOver();
                            }
                        }

                        modified = lastEvent.getCurrentOver();
                        Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                                "Bowler undone", Toast.LENGTH_SHORT).show();
                        tvBowler.setText("");
                        resetValues(lastEvent, ubtype);

                        Log.d("remainingOver", "ubtype = 2, 6 : " + remainingOver);
                        Log.d("remainingBalls", "ubtype = 2, 6 : " + remainingBalls);
                        undo(); //  Added on 31/08/2021
                    }
                }).
                show();
    }


    public void changeBatsmanUndoAlert (Events lastEvent, String message) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setIcon(R.drawable.ball).
                setCancelable(false).
                setMessage(message).
                setPositiveButton("CHANGE BATSMAN", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        UNDO = true;
//                        replaceBatsman(lastEvent, false); //Commented on 31/08/2021

//                        out = true;

                        undoNewBatsman(lastEvent);
                    }
                }).
                // Added on 15/11/2021
                        setNegativeButton("Cancel", null).
                // till here
                        setNeutralButton("NO", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();

                        Log.d("Scoring", "undo, ubtype : "+ubtype+", events : "+lastEvent);
                        Log.d("remainingOver", "ubtype = 7, 1 : " + remainingOver);
                        Log.d("remainingBalls", "ubtype = 7, 1 : " + remainingBalls);
                        endOver = false;
                        int newBatsmanID = lastEvent.getDisNewBatsmanID();

                        Log.d("undo", "ubtype : 7,  newBatsmanID : "+newBatsmanID);
                        Log.d("undo", "ubtype : 7,  getDismissedPlayerID : "+lastEvent.getDismissedPlayerID());

                        Batsman batsmann = realm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("team", battingTeamNo).
                                equalTo("innings", currentInnings).
                                equalTo("batsman_pID", newBatsmanID).findFirst();

                        realm.executeTransaction(new Realm.Transaction() {
                            @Override
                            public void execute(Realm bgRealm) {

                                try {

//                               if (!batsmann.isRetired()) {

                                    if (batsmann != null) {

                                        batsmann.setToBeBatted(true);
                                        batsmann.setPlaying(false);
                                        batsmann.setRetired(false);
                                        batsmann.setRuns(0);
                                        batsmann.setBalls(0);
                                        batsmann.setS6s(0);
                                        batsmann.setF4s(0);
                                        batsmann.setOut(false);
                                        batsmann.setBattingOrder(100);

                                        bgRealm.copyToRealm(batsmann);
                                    }
                                    Log.d("batsmann", "after undo , ubtype = " + ubtype +

                                            ", batsmann : " + batsmann.toString());


                                } catch (RealmPrimaryKeyConstraintException e) {
                                    Toast.makeText(getApplicationContext(),
                                            "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                                }
                            }
                        });


                        config = new RealmConfiguration.Builder()
                                .name(AppConstants.GAME_ID + ".realm")
                                .deleteRealmIfMigrationNeeded()
                                .build();
                        realm = Realm.getInstance(config);
                        Batsman batsman = realm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("team", battingTeamNo).
                                equalTo("batsman_pID", lastEvent.getDismissedPlayerID()).findFirst();

                        if (batsman != null) {
                            Log.d("UNDO", " balltype 7, batsman is not null");

                            strID = lastEvent.getStrikerID();
                            nstrID = lastEvent.getNonStrikerID();
                            if (strID == newBatsmanID) {
                                strID = lastEvent.getDismissedPlayerID();
                                striker = realm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", battingTeamNo).
                                        equalTo("playerID", strID).findFirst().getPlayerName();
                                strikerRuns = batsman.getRuns();
                                strikerBalls = batsman.getBalls();
                                strikerDots = batsman.getDots();
                                strikerF4s = batsman.getF4s();
                                strikerS6s = batsman.getS6s();

                            }

                            else if (nstrID == newBatsmanID) {
                                nstrID = lastEvent.getDismissedPlayerID();
                                nonStriker = realm.where(Player.class).
                                        equalTo("matchid", matchid).
                                        equalTo("team", battingTeamNo).
                                        equalTo("playerID", nstrID).findFirst().getPlayerName();
                                nonStrikerRuns = batsman.getRuns();
                                nonStrikerBalls = batsman.getBalls();
                                nonStrikerDots = batsman.getDots();
                                nonStrikerF4s = batsman.getF4s();
                                nonStrikerS6s = batsman.getS6s();
                            }


                            Log.d("undo", "1 ubtype : " + ubtype + ", newBatsmanID : " + newBatsmanID +
                                    ", dismissedID : " + lastEvent.getDismissedPlayerID());
                            Log.d("undo", "1 ubtype : " + ubtype + ", strID : " + strID + ", strikerRuns : " + strikerRuns +
                                    ", strikerBalls : " + strikerBalls + ", strikerDots : " + strikerDots + ", strikerF4s : " + strikerF4s +
                                    ", strikerS6s : " + strikerS6s);

                            Log.d("undo", "1 ubtype : " + ubtype + ", nstrID : " + nstrID + ", nonStrikerRuns : " + nonStrikerRuns +
                                    ", nonStrikerBalls : " + nonStrikerBalls + ", nonStrikerDots : " + nonStrikerDots +
                                    ", nonStrikerF4s : " + nonStrikerF4s + ", nonStrikerS6s : " + nonStrikerS6s);

                            Log.d("undo", "1 ubtype : " + ubtype + ", player1ID : " + player1ID + ", player1Runs : " + player1Runs +
                                    ", player1Balls : " + player1Balls + ", player1Dots : " + player1Dots +
                                    ", player1F4s : " + player1F4s + ", player1S6s : " + player1S6s);

                            Log.d("undo", "1 ubtype : " + ubtype + ", player2ID : " + player2ID + ", player2Runs : " + player2Runs +
                                    ", player2Balls : " + player2Balls + ", player2Dots : " + player2Dots +
                                    ", player2F4s : " + player2F4s + ", player2S6s : " + player2S6s);

                            if (player1ID == newBatsmanID)
                                player1ID = lastEvent.getDismissedPlayerID();
                            else if (player2ID == newBatsmanID)
                                player2ID = lastEvent.getDismissedPlayerID();

                            if (player1ID == strID && player2ID == nstrID) {
                                Log.d("undo", "3 player1ID : " + player1ID + ", newBatsmanID : " + newBatsmanID +
                                        ", dismissedID : " + lastEvent.getDismissedPlayerID());

                                player1Runs = strikerRuns;
                                player1Balls = strikerBalls;
                                player1Dots = strikerDots;
                                player1F4s = strikerF4s;
                                player1S6s = strikerS6s;

                                player2Runs = nonStrikerRuns;
                                player2Balls = nonStrikerBalls;
                                player2Dots = nonStrikerDots;
                                player2F4s = nonStrikerF4s;
                                player2S6s = nonStrikerS6s;
                            }

                            else if (player2ID == strID && player1ID == nstrID) {
                                Log.d("undo", "4 player2ID : " + player2ID + ", newBatsmanID : " + newBatsmanID +
                                        ", dismissedID : " + lastEvent.getDismissedPlayerID());
                                player2Runs = strikerRuns;
                                player2Balls = strikerBalls;
                                player2Dots = strikerDots;
                                player2F4s = strikerF4s;
                                player2S6s = strikerS6s;

                                player1Runs = nonStrikerRuns;
                                player1Balls = nonStrikerBalls;
                                player1Dots = nonStrikerDots;
                                player1F4s = nonStrikerF4s;
                                player1S6s = nonStrikerS6s;
                            }

                            Log.d("undo", "2 ubtype : " + ubtype + ", newBatsmanID : " + newBatsmanID +
                                    ", dismissedID : " + lastEvent.getDismissedPlayerID());
                            Log.d("undo", "2 strID : " + strID + ", strikerRuns : " + strikerRuns +
                                    ", strikerBalls : " + strikerBalls + ", strikerDots : " + strikerDots + ", strikerF4s : " + strikerF4s +
                                    ", strikerS6s : " + strikerS6s);

                            Log.d("undo", "2 nstrID : " + nstrID + ", nonStrikerRuns : " + nonStrikerRuns +
                                    ", nonStrikerBalls : " + nonStrikerBalls + ", nonStrikerDots : " + nonStrikerDots +
                                    ", nonStrikerF4s : " + nonStrikerF4s + ", nonStrikerS6s : " + nonStrikerS6s);

                            Log.d("undo", "2 player1ID : " + player1ID + ", player1Runs : " + player1Runs +
                                    ", player1Balls : " + player1Balls + ", player1Dots : " + player1Dots +
                                    ", player1F4s : " + player1F4s + ", player1S6s : " + player1S6s);

                            Log.d("undo", "2 player2ID : " + player2ID + ", player2Runs : " + player2Runs +
                                    ", player2Balls : " + player2Balls + ", player2Dots : " + player2Dots +
                                    ", player2F4s : " + player2F4s + ", player2S6s : " + player2S6s);
                        }

                        else
                            Log.d("UNDO", " balltype 7, batsman is null");

                        //resetting partnership

                        if (ps1ID == newBatsmanID)
                            ps1ID = lastEvent.getDismissedPlayerID();
                        else if (ps2ID == newBatsmanID)
                            ps2ID = lastEvent.getDismissedPlayerID();

                        RealmResults<Partnership> results1 = realm.where(Partnership.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("wicket", (wicket + 1)).findAll();

                        if (results1.isEmpty())
                            Log.d("Partnership", "undo ubtype 7, results1 : " + results1);
                        else {
                            Partnership partnership1 = results1.last();
                            Log.d("Partnership", "undo ubtype 7, partnership1 : " + partnership1);

                            if (partnership1 != null) {
                                if (!realm.isInTransaction()) {
                                    realm.beginTransaction();
                                }
                                partnership1.deleteFromRealm();
                                realm.commitTransaction();
                            }
                        }

                        RealmResults<Partnership> results2 = realm.where(Partnership.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).findAll();

                        if (results2.isEmpty())
                            Log.d("Partnership", "undo ubtype 7, results2 : " + results2);
                        else {
                            Partnership partnership = results2.last();
                            Log.d("Partnership", "undo ubtype 7, results2 : " + results2);
                            if (partnership.getDismissedPlayerID() == lastEvent.getDismissedPlayerID()) {

                                psRuns = partnership.getPartnershipRuns();
                                psBalls = partnership.getPartnershipBalls();
                                psTBalls = partnership.getPartnershipTotalBalls();   // Added on 28/07/2021
                                psOver = partnership.getPartnershipOver();

                                if (ps1ID == partnership.getPlayer1ID()) {
                                    p1CB = partnership.getPlayer1ContributionBalls();
                                    p1CR = partnership.getPlayer1ContributionRuns();
                                }
                                else if (ps2ID == partnership.getPlayer1ID()) {
                                    p2CB = partnership.getPlayer1ContributionBalls();
                                    p2CR = partnership.getPlayer1ContributionRuns();
                                }

                                if (ps1ID == partnership.getPlayer2ID()) {
                                    p1CB = partnership.getPlayer2ContributionBalls();
                                    p1CR = partnership.getPlayer2ContributionRuns();
                                }
                                else if (ps2ID == partnership.getPlayer2ID()) {
                                    p2CB = partnership.getPlayer2ContributionBalls();
                                    p2CR = partnership.getPlayer2ContributionRuns();
                                }
                            }
                        }

                        Log.d("event", "undo ubtype = 7, lastEvent : " + lastEvent);

                        pre_interval = false;

                        Log.d("remainingOver", "ubtype = 7, 2 : " + remainingOver);
                        Log.d("remainingBalls", "ubtype = 7, 2 : " + remainingBalls);

                        if (lastEvent.getDismissedPlayerID() == player1ID)
                            tvPlayer1.setText("");
                        else if (lastEvent.getDismissedPlayerID() == player2ID)
                            tvPlayer2.setText("");



                        Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                                "New Batsman undone", Toast.LENGTH_SHORT).show();

                        resetValues(lastEvent, ubtype);
                        undo(); //  Added on 31/08/2021
                    }
                }).
                show();
    }


    public void changeIntervalUndoAlert (Events lastEvent, String message) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setIcon(R.drawable.ball).
                setCancelable(false).
                setMessage(message).
                setPositiveButton("CHANGE INTERVAL", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        UNDO = true;
                        setInterval(lastEvent, 5);
                    }
                }).
                // Added on 15/11/2021
                        setNegativeButton("Cancel", null).
                // till here
                        setNeutralButton("NO", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();

                        Log.d("remainingOver", "ubtype = 12, 1 : " + remainingOver);
                        Log.d("remainingBalls", "ubtype = 12, 1 : " + remainingBalls);

                        Log.d("Scoring", "undo 1, ubtype : "+ubtype+", events : "+lastEvent);

                        endOver = false;
                        setStrikerNonStriker(lastEvent);
                        Log.d("Scoring", "undo 2, ubtype : "+ubtype+", events : "+lastEvent);
                        setBowler(lastEvent);
                        Log.d("Scoring", "undo 3, ubtype : "+ubtype+", events : "+lastEvent);

                        modified = lastEvent.getUndoDisplay();
                        int intervalId = lastEvent.getIntervalId();  // Added on 07/07/2021
                        if (intervalId != 7)  // Added on 07/07/2021
                            enableButtons(3);  // Added on 07/07/2021

                        Log.d("Scoring", "undo 4, ubtype : "+ubtype+", events : "+lastEvent);
                        Toast.makeText(getApplicationContext(), // Added on 30/08/2021
                                "Interval undone", Toast.LENGTH_SHORT).show();
                        resetValues(lastEvent, ubtype);
                        Log.d("remainingOver", "ubtype = 12, 2 : " + remainingOver);
                        Log.d("remainingBalls", "ubtype = 12, 2 : " + remainingBalls);
                    }
                }).
                show();
    }


    /*// to check last ball type
    public int checkLastBallType() {

        Events lastEvents = realm.where(Events.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).findAll().last();

        if (lastEvents != null) {
            Log.d("checkLastBallType", "" + lastEvents);
            return lastEvents.getBallType();
        }
        else
            return 0;
    }*/


    /*// Added on 31/08/2021
    public void undoErrorDisplay(int ubtype, String message) {
        AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
        builderInner.setIcon(R.drawable.ball);
        builderInner.setCancelable(false);
        builderInner.setMessage(message);
        builderInner.setTitle("Warning");

        builderInner.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                if (ubtype == 6)
                    changeBowler(new Events(),6, 0);
                else if (ubtype == 7)
//                    UNDO = true;
                    replaceBatsman(new Events(), false);

            }
        });
        builderInner.show();
    }*/


    // to check last ball type
    public int checkLastBallType() {
        int return_val = 0;
        Events lastEvents = realm.where(Events.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).findAll().last();

        if (lastEvents != null) {
            Log.d("checkLastBallType", "" + lastEvents);
            int ballType = lastEvents.getBallType();
            if (ballType == 4 || ballType == 5) {
                int dismissID = lastEvents.getDismissedPlayerID();
                if (dismissID > 0) {
                    if (dismissID == lastEvents.getStrikerID() ||
                            dismissID == lastEvents.getNonStrikerID())

                        return_val = 111;
                } else
                    return_val = ballType;
            } else
                return_val = ballType;
        }

        return  return_val;
    }


    public void undoNewBatsman(Events lastEvent) {
//        changeBatsman(lastEvent.getDismissedPlayerID(), null, false, false);
        if (wicket >= 0 && wicket <= player_count - 2) {

            removeBatsman(lastEvent);    // Added on 15/11/2021

            ArrayList<Integer> batsmanIDList = new ArrayList<Integer>();

            final ArrayAdapter<String> batsmanAdapter = new ArrayAdapter<String>(UpdatedScoringActivity.this,
                    android.R.layout.select_dialog_singlechoice);

            RealmResults<Player> p_results = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", battingTeamNo).
                    equalTo("retired_concussion", false).    // added on 27/02/2021
                            equalTo("substitute", false).findAll();

            p_results.load();
            for (Player player : p_results) {
                batsmanIDList.add(player.getPlayerID());
            }

            Log.e("Scoring", "changeBatsman, 1st, batsmanIDList : "+batsmanIDList);
//            Log.e("Scoring", "changeBatsman, dismissedPlayerID : "+dismissedPlayerID);

            RealmResults<Batsman> b_result = realm.where(Batsman.class).                // check for
                    equalTo("matchid", matchid).
                    equalTo("innings", currentInnings).
                    equalTo("team", battingTeamNo).
//                    equalTo("retired_concussion", false).    // added on 27/02/2021
        equalTo("out", true).findAll();
            b_result.load();
            Log.e("UNB", "b_result = "+b_result);

            for (Batsman batsman : b_result) {

                Log.e("Scoring", "changeBatsman, b_result : "+b_result);

                for (int i = 0; i < batsmanIDList.size(); i++){
                    if (batsmanIDList.get(i) == batsman.getBatsman_pID()){
                        batsmanIDList.remove(i);
                    }
                }
            }

            Log.e("Scoring", "changeBatsman, 2nd," +
                    " removing out players from batsman list, batsmanIDList : "+batsmanIDList);
            Log.e("Scoring", "changeBatsman, b4 dismissedList : "+dismissedList);


            if (dismissedList != null) {
                for (int id : dismissedList) {
                    if (id != 0) {

                        for (int i = 0;i < batsmanIDList.size(); i++){
                            if (batsmanIDList.get(i) == id){
                                batsmanIDList.remove(i);
                            }
                        }
                    }
                }
            }

            Log.e("Scoring", "changeBatsman, after dismissedList : "+dismissedList);
            Log.e("Scoring", "changeBatsman, retiredList : "+retiredList);

            for (int b_ID : batsmanIDList) {
                for (Player player : p_results) {
                    if (b_ID == player.getPlayerID()) {
                        batsmanAdapter.add(player.getPlayerName());
                    }
                }
            }

            Log.e("Scoring", "changeBatsman, batsmanAdapter : "+batsmanAdapter);


            batsmanAdapter.remove(striker);
            batsmanAdapter.remove(nonStriker);

            Log.e("Scoring", "changeBatsman, batsmanBuilder");

            batsmanBuilder = new AlertDialog.Builder(UpdatedScoringActivity.this);
            batsmanBuilder.setIcon(R.drawable.ball);
            batsmanBuilder.setCancelable(false);
            batsmanBuilder.setTitle("Select New Batsman");
            /*batsmanBuilder.setPositiveButton("CANCEL", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            });*/

          /* Commented on 31/08/2021
             batsmanBuilder.setNegativeButton("INTERVAL",
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
//                    dismissedPlayrID = dismissedPlayerID;
                            dialog.dismiss();
                            pre_out = true;
                            setInterval(lastEvent, 6);
                        }
                    }); //=========== added till here*/

            batsmanBuilder.setAdapter(batsmanAdapter, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog1, int which) {

                    newBatsman = batsmanAdapter.getItem(which);
//                dialog1.dismiss();
                    AlertDialog.Builder builderInner = new AlertDialog.Builder(UpdatedScoringActivity.this);
                    builderInner.setIcon(R.drawable.ball);
                    builderInner.setCancelable(false);

                    builderInner.setMessage(newBatsman);
                    builderInner.setTitle("Selected new Batsman is");
//                    Log.e("Scoring", "changeBatsman, batsmanBuilder, builderInner");

                    builderInner.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            dismissedPlayrID = 0; // added on 11/05/2020
                            dialog1.dismiss();
                            dialog.dismiss();

                            // Added on  16/11/2021
                            if ((lastEvent.getBalls() % ballsPerOver) == 0)
                                setUndoNewBatsman(lastEvent.getDisNewBatsmanID(), newBatsman,
                                        true, lastEvent.getEventID());
                            else
                                setUndoNewBatsman(lastEvent.getDisNewBatsmanID(), newBatsman,
                                        false, lastEvent.getEventID());
                            // till here


                            /* Commented on 16/11/2021
                            Player pl = realm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", battingTeamNo).
                                    equalTo("playerID", lastEvent.getDisNewBatsmanID()).findFirst();
                            if (pl != null)
                                updateBatsman(newBatsman, pl.getPlayerName(), lastEvent.getEventID());*/

                        }
                    });

                   /* builderInner.setNeutralButton("Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            Log.d("CHANGEBATSMAN", "changeBatsman, Selected Batsman is, Cancel");
                            changeBatsman(dismissedPlayerID, replacedBatsman, newPartnership, bow);//-1);
                        }
                    });*/
//                    changeBatsman(dismissedPlayerID, replacedBatsman, newPartnership, bow);//-1);
//
                    builderInner.show();
//                dialog.dismiss();
                }
            });

            batsmanBuilder.show();
        }

        else {

            outOfPlayerAlert = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
            outOfPlayerAlert.setIcon(R.drawable.ball);
            outOfPlayerAlert.setCancelable(false);
//            outOfPlayerAlert.setTitle("No more players left for change batsman"); // Commented on 28/07/2021
            outOfPlayerAlert.setTitle("No players left to change");
            outOfPlayerAlert.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
                            bats = null;
                        }
                    });
            outOfPlayerAlert.show();

        }

        Log.e("Scoring", "wicket = "+wicket);
        Log.e("Scoring", "player_count = "+player_count);

    }


    public void updateEvents(int eventid, int newBatsmanID, int newBowlerID) {

//        syncBowler();
        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {

                try {
                    Events events = realm.where(Events.class).
                            equalTo("matchid", matchid).
                            equalTo("innings", currentInnings).//findAll().last();
                                    equalTo("eventID", eventid).findFirst();
                    if (events != null) {
                        if ((events.getBallType() == 7) && (newBatsmanID > 0)) {
                            events.setDisNewBatsmanID(newBatsmanID);
                            Player p = realm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", battingTeamNo).
                                    equalTo("playerID", newBatsmanID).
                                    findFirst();
                            events.setDisNewBatsmanD4SID(p.getD4s_playerid());
                            events.setPlayer1ID(player1ID);
                            events.setPlayer2ID(player2ID);
                            events.setStrikerID(strID);
                            p = realm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", battingTeamNo).
                                    equalTo("playerID", strID).
                                    findFirst();
                            events.setStrikerD4SID(p.getD4s_playerid());
                            events.setNonStrikerID(nstrID);
                            p = realm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", battingTeamNo).
                                    equalTo("playerID", nstrID).
                                    findFirst();
                            events.setNonStrikerD4SID(p.getD4s_playerid());
                            events.setP_p1Id(ps1ID);
                            p = realm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", battingTeamNo).
                                    equalTo("playerID", ps1ID).
                                    findFirst();
                            events.setP_p1D4SID(p.getD4s_playerid());
                            events.setP_p2Id(ps2ID);
                            p = realm.where(Player.class).
                                    equalTo("matchid", matchid).
                                    equalTo("team", battingTeamNo).
                                    equalTo("playerID", ps2ID).
                                    findFirst();
                            events.setP_p2D4SID(p.getD4s_playerid());
                        } else if ((events.getBallType() == 6) && (newBowlerID > 0))
                            events.setNewBowlerID(newBowlerID);
                        events.setSyncstatus(0);
                        realm.insertOrUpdate(events);
                        Log.d("HUNDRED", "syncBowler 3, bowller = " + events);
                    }
                } catch (RealmException e){
                    Log.d("SyncBowler", "Exception  : "+e);
                }
            }
        });

        RealmResults<Events> events_result = realm.where(Events.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).
                lessThan("eventID", eventid).findAll();
        if (events_result.size() > 0) {
            Events events = events_result.last();
            if (newBatsmanID > 0) {
                if (events.getBallType() == 4 || events.getBallType() == 5) {
                    selectBowlerAlertDialog();
                }
            }
        }
        post(6);
    }



    // Added on 07/09/2021
    public void checkEndInnings() {

        if (currentInnings == totalInnings){

            Log.d("Scoring","setover , innings : "+innings);
            Log.d("Scoring","setover , totalInnings : "+totalInnings);
            Log.d("Scoring","setover , currentOver : "+currentOver);
            Log.d("Scoring","setover , totalOver : "+totalOver);
            Log.d("Scoring","setover , currentRuns : "+currentRuns);
            Log.d("Scoring","setover , innings1Runs : "+innings1Runs);
            Log.d("so_inninngs1Runs","setover8 , : "+so_inninngs1Runs);

            if (totalInnings == 2) {

                if (currentOver == totalOver) {
                    target_achieved = true;
                    // Updated on 28/07/2021
                    if (HUNDRED)
                        endMessage = "Allotted Balls are completed";
                    else
                        endMessage = "Allotted Overs are completed";
                    displayAlert(endMessage, 1);
                }
//                else if (currentOver <= totalOver) {  Commented for updated condition
                else if ((currentOver <= totalOver) && (currentInnings == 2)) { // updated on 15/12/2021

                    if (currentRuns > innings1Runs) {
                        target_achieved = true;
                        endMessage = "Target Achieved";
                        displayAlert(endMessage, 1);
                    }

                    if (revisedTarget > 0) {
                        if (currentRuns >= revisedTarget) {
                            target_achieved = true;
                            endMessage = "Revised Target Achieved";
                            displayAlert(endMessage, 1);
                        }
                    }

                    if (!target_achieved) {
                        if (checkFreeHit)
                            checkFreeHitBall();
                    }
                }
            }

            else if (totalInnings == 4 && currentInnings == 4) {

                if (remainingRuns <= 0) {
                    target_achieved = true;
                    endMessage = "Target Achieved";
                    displayAlert(endMessage, 1);
                }

                if (!target_achieved) {
                    if (checkFreeHit)
                        checkFreeHitBall();
                }
            }
        }

        if (SUPER_OVER && currentInnings == 100) {

            Log.d("so_inninngs1Runs","setover9 , : "+so_inninngs1Runs);

            if (currentRuns > so_inninngs1Runs) {
                target_achieved = true;
                endMessage = "Target Achieved";
                displayAlert(endMessage, 1);
            }

            if (revisedTarget > 0) {
                if (currentRuns >= revisedTarget) {
                    target_achieved = true;
                    endMessage = "Revised Target Achieved";
                    displayAlert(endMessage, 1);
                }
            }

            if (!target_achieved) {
                if (checkFreeHit)
                    checkFreeHitBall();
            }
        }
    }



    // Added on 09/09/2021
    public void checkExtra(int run) {

        int possibleRun = currentRuns + run;
        Log.d("US","checkExtra , possibleRun : "+possibleRun);

        if (currentInnings == totalInnings){

            Log.d("US","checkExtra , innings : "+innings);
            Log.d("US","checkExtra , totalInnings : "+totalInnings);
            Log.d("US","checkExtra , currentOver : "+currentOver);
            Log.d("US","checkExtra , totalOver : "+totalOver);
            Log.d("US","checkExtra , currentRuns : "+currentRuns);
            Log.d("US","checkExtra , innings1Runs : "+innings1Runs);
            Log.d("US", "so_inninngs1Runs, checkExtra , : "+so_inninngs1Runs);

            if (totalInnings == 2) {

                if (currentOver <= totalOver) {

                    if (possibleRun > innings1Runs) {
                        displayOutError();
                    }

                    if (revisedTarget > 0) {
                        if (possibleRun >= revisedTarget) {
                            displayOutError();
                        }
                    }
                }
            }

            else if (totalInnings == 4 && currentInnings == 4) {

                if (remainingRuns <= 0) {
                    displayOutError();
                }
            }
        }

        if (SUPER_OVER && currentInnings == 100) {

            Log.d("so_inninngs1Runs","setover9 , : "+so_inninngs1Runs);

            if (possibleRun > so_inninngs1Runs) {
                displayOutError();
            }

            if (revisedTarget > 0) {
                if (possibleRun >= revisedTarget) {
                    displayOutError();
                }
            }
        }
    }


    public void displayOutError() {
        AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        alertDialog.setIcon(R.drawable.ball);
        alertDialog.setCancelable(false);
        alertDialog.setTitle("Dismissal not possible");
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        out = false;
                        outType = -1;
                        ballType = -1;
                        bCount = 0; // Added on 22/09/2021
                        dismissedPlayer = "";
                        single = false;
                        multi = false;
                        retired = false;
                        popupOUT.dismiss();
                    }
                });
        alertDialog.show();
    }

    // Added on 20/09/2021
    public void confirmReplace(int i) {
        AlertDialog alertDialog = new AlertDialog.Builder(UpdatedScoringActivity.this).create();
        alertDialog.setIcon(R.drawable.ball);
        alertDialog.setCancelable(false);
        alertDialog.setTitle("Replace player");
        String msg = "";
        if (i == 1)
            msg = "Selected wrong batsman ?";
        else
            msg = "Selected wrong bowler ?";
        alertDialog.setMessage(msg);
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "REPLACE",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        if (i == 1)
                            replaceBatsman(new Events(), false);
                        else
                            changeBowler(new Events(),0, 1);
                    }
                });
        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "CANCEL",
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
        alertDialog.show();
    }


    // Added on 05/10/2021
    // splitted the add official and edit officials
/*
    private void postOfficialDetails() {

        // Added on 11/11/2021
         config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
        if (isNetworkAvailable()) {
            RealmResults<MatchOfficials> results = realm.where(MatchOfficials.class).
                        equalTo("matchid", matchid).
                        equalTo("d4s_id", 0).
                        equalTo("sync", 0).findAll();

                Log.d("ADD_OFFICIALS", "Scoring, results 1 : " + results);
                if (results.isEmpty()) {

                    Log.d("ADD_OFFICIALS", "Scoring, results : " + results);
                }

                else {

                    JSONArray arrayOfficials = new JSONArray();

                    Log.d("ADD_OFFICIALS", "Scoring, matchID : " + matchID);

                    for (MatchOfficials officials : results) {

                        JSONObject jsonOfficials = new JSONObject();

                        try {
                            if (!officials.getOfficialName().matches("")) {
                                jsonOfficials.put("name", officials.getOfficialName());

                                if (officials.getStatus().matches("u1") || officials.getStatus().matches("u2"))
                                    jsonOfficials.put("type", "u");
                                else
                                    jsonOfficials.put("type", officials.getStatus());

//                                if (officials.getD4s_id() == 0)
//                                    jsonOfficials.put("d4s_playerid", 0);
//                                else
                                    jsonOfficials.put("d4s_playerid", officials.getD4s_id());

                                arrayOfficials.put(jsonOfficials);
                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                    }

                    JSONObject jsonObject = new JSONObject();
                    try {
                        jsonObject.put("matchID", matchID);
                        jsonObject.put("officials", arrayOfficials);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }


                    JSONObject jsonfeed = new JSONObject();

                    try {
                        jsonfeed.put("AddMatchOfficials", jsonObject);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }


                    JSONObject postparams = new JSONObject();
                    try {
                        postparams.put("title", "CHASE_POST");
                        postparams.put("feed", jsonfeed);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                            Constants.CHASE_CRICKET_MATCH_API, postparams,
                            new Response.Listener<JSONObject>() {
                                @Override
                                public void onResponse(JSONObject response) {

                                    try {

                                        Log.d("ADD_OFFICIALS", "Scoring, response : " + response);
                                        if (!response.getBoolean("error") && response.getInt("status") == 200) {

                                            JSONObject jsonMatch = response.getJSONObject("match");
                                            Log.d("Create", "pod, jsonMatch = " + jsonMatch);

                                            JSONArray array = jsonMatch.getJSONArray("officials");
                                            Log.d("Create", "pod, array = " + array);

                                            if (array.length() > 0) {

                                                try {
                                                     config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
                                                    realm.executeTransaction(new Realm.Transaction() {
                                                        @Override
                                                        public void execute(Realm bgRealm) {

                                                            try {

                                                                for (int i = 0; i < array.length(); i++) {
                                                                    JSONObject object = array.getJSONObject(i);
                                                                    Log.d("Create", "pod, object = " + object);

                                                                    if (object.getString("officialtype").matches("u")) {

                                                                        Log.d("Create", "pod, officialtype = " + object.getString("officialtype"));
                                                                        Log.d("Create", "pod, officialname = " + object.getString("officialname"));
                                                                        Log.d("Create", "pod, officialid = " + object.getString("officialid"));

                                                                        MatchOfficials officials_u = bgRealm.where(MatchOfficials.class).
                                                                                equalTo("matchID", jsonMatch.getString("app_matchID")).
                                                                                equalTo("officialName", object.getString("officialname")).
                                                                                        findFirst();

                                                                        Log.d("Create", "pod, officials_u = " + officials_u);

                                                                        if (officials_u != null) {

                                                                            officials_u.setD4s_id(object.getInt("officialid"));
                                                                            officials_u.setSync(1);
                                                                            bgRealm.copyToRealm(officials_u);
                                                                            Log.d("Create", "pod, officials_u = " + officials_u);
                                                                        }

                                                                    } else {

                                                                        MatchOfficials officials = bgRealm.where(MatchOfficials.class).
                                                                                equalTo("matchID", jsonMatch.getString("app_matchID")).
                                                                                equalTo("status", object.getString("officialtype")).
                                                                                findFirst();

                                                                        if (officials != null) {

                                                                            officials.setD4s_id(object.getInt("officialid"));
                                                                            officials.setSync(1);
                                                                            bgRealm.copyToRealm(officials);
                                                                            Log.d("Create", "pod, officials = " + officials);
                                                                        }
                                                                    }
                                                                }
                                                            } catch (JSONException e) {
                                                                e.printStackTrace();
                                                            }
                                                        }
                                                    });
                                                } catch (RealmException e) {
                                                    Log.d("test", "Exception : " + e);
                                                } finally {
                                                    if (realm != null) {
                                                        realm.close();
                                                    }
                                                }
                                            }
                                        } else {
                                            Toast.makeText(getApplicationContext(),
                                                    response.getString("message"), Toast.LENGTH_SHORT).show();
                                        }

                                    } catch (JSONException e) {
                                        e.printStackTrace();
                                    }
                                }
                            },
                            new Response.ErrorListener() {
                                @Override
                                public void onErrorResponse(VolleyError error) {

//
//                                  Toast.makeText(getApplicationContext(), error.getMessage(), Toast.LENGTH_SHORT).show();
                                    Log.d("ADD_OFFICIALS", "Scoring, Error Message is  : " + error);

                                }
                            });

                    MyApplicationClass.getInstance(getApplicationContext()).
                            addToRequestQueue(jsonObjReq, "postRequest");
                    Log.d("ADD_OFFICIALS", "Scoring, jsonObjReq  : " + jsonObjReq);
                    Log.d("ADD_OFFICIALS", "Scoring, postparams  : " + postparams);

                }
            }


        // === til here

        // Commented on 11/11/2021
        */
/*
         config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
        RealmResults<MatchOfficials> results = realm.where(MatchOfficials.class).
                equalTo("matchid", matchid).
                equalTo("sync", 0).findAll();

        Log.d("US", "AddMatchOfficials, results 1 : " + results);
        if (results.isEmpty()) {
            Log.d("US", "AddMatchOfficials, results : " + results);
        }

        else {
            JSONArray arrayOfficialsAdd = new JSONArray();
            JSONArray arrayOfficialsEdit = new JSONArray();

            Log.d("US", "AddMatchOfficials, matchID : " + matchID);

            for (MatchOfficials officials : results) {

                JSONObject jsonOfficialsAdd = new JSONObject();
                JSONObject jsonOfficialsEdit = new JSONObject();

                try {
                    if (officials.getEdit() == 1) { // added on 04/12/2020
                        if (!officials.getOfficialName().matches("")) {
                            jsonOfficialsAdd.put("name", officials.getOfficialName());

                            if (officials.getStatus().matches("u1") || officials.getStatus().matches("u2"))
                                jsonOfficialsAdd.put("type", "u");
                            else
                                jsonOfficialsAdd.put("type", officials.getStatus());

                            if (officials.getD4s_id() == 0)
                                jsonOfficialsAdd.put("d4s_playerid", 0);
                            else
                                jsonOfficialsAdd.put("d4s_playerid", officials.getD4s_id());

                            arrayOfficialsAdd.put(jsonOfficialsAdd);
                        }
                    }

                    // added on 04/12/2020
                    if (officials.getEdit() == 2) {
                        if (!officials.getOfficialName().matches("")) {
                            jsonOfficialsEdit.put("name", officials.getOfficialName());

                            if (officials.getStatus().matches("u1") || officials.getStatus().matches("u2"))
                                jsonOfficialsEdit.put("type", "u");
                            else
                                jsonOfficialsEdit.put("type", officials.getStatus());

                            if (officials.getD4s_id() == 0)
                                jsonOfficialsEdit.put("d4s_playerid", 0);
                            else
                                jsonOfficialsEdit.put("d4s_playerid", officials.getD4s_id());

                            arrayOfficialsEdit.put(jsonOfficialsEdit);
                        }
                    } // =========== till here

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            // Added on 10/05/2021
            if (arrayOfficialsEdit.length() > 0)
                postEdit(arrayOfficialsEdit);
            if (arrayOfficialsAdd.length() > 0)
                postAdd(arrayOfficialsAdd);
            // === till here
        }*//*

    }
*/


    // to post edit details
    public void postEdit(MatchOfficials officials) {
        final String TAG = "USA";
        // added on 11/11/2021
        if (isNetworkAvailable()) {

            JSONObject jsonDetails = new JSONObject();
            try {
                if (!officials.getOfficialName().matches("")) {
                    jsonDetails.put("name", officials.getOfficialName());

                    if (officials.getStatus().matches("u1") || officials.getStatus().matches("u2"))
                        jsonDetails.put("type", "u");
                    else
                        jsonDetails.put("type", officials.getStatus());

                    jsonDetails.put("d4s_playerid", officials.getD4s_id());
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONArray array = new JSONArray();
            array.put(jsonDetails);

            JSONObject jsonEdit = new JSONObject();
            try {
                jsonEdit.put("matchID", matchID);
                jsonEdit.put("officials", array);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject jsonfeed = new JSONObject();
            try {
                jsonfeed.put("EditMatchOfficials", jsonEdit);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject postparams = new JSONObject();
            try {
                postparams.put("title", "CHASE_POST");
                postparams.put("feed", jsonfeed);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            Log.d(TAG, "postparams = " + postparams);

            JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                    Constants.CHASE_CRICKET_MATCH_API, postparams,
                    new Response.Listener<JSONObject>() {
                        @Override
                        public void onResponse(JSONObject response) {

                            Log.d(TAG, "postEdit, response : " + response);

                            try {
                                if (!response.getBoolean("error") && response.getInt("status") == 200) {

                                    JSONObject jsonMatch = response.getJSONObject("match");
                                    Log.d(TAG, "postEdit, jsonMatch = " + jsonMatch);

                                    try {
                                        config = new RealmConfiguration.Builder()
                                                .name(AppConstants.GAME_ID + ".realm")
                                                .deleteRealmIfMigrationNeeded()
                                                .build();
                                        realm = Realm.getInstance(config);
                                        realm.executeTransaction(new Realm.Transaction() {
                                            @Override
                                            public void execute(Realm bgRealm) {

                                                try {

                                                    MatchOfficials officials = bgRealm.where(MatchOfficials.class).
                                                            equalTo("matchID", jsonMatch.getString("app_matchID")).
                                                            equalTo("d4s_id", jsonMatch.getInt("playerid")).
                                                            findFirst();

                                                    if (officials != null) {

                                                        officials.setSync(1);
                                                        bgRealm.copyToRealm(officials);
                                                        Log.d(TAG, "postEdit, officials = " + officials);
                                                    }

                                                } catch (JSONException e) {
                                                    e.printStackTrace();
                                                }
                                            }
                                        });
                                    } catch (RealmException e) {
                                        Log.d(TAG, "Exception : " + e);
                                    } finally {
                                        if (realm != null) {
                                            realm.close();
                                        }
                                    }
                                }
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
//                                  Toast.makeText(getApplicationContext(), error.getMessage(), Toast.LENGTH_SHORT).show();
                            Log.d(TAG, "postEdit, Error Message is  : " + error);
                        }
                    });

            MyApplicationClass.getInstance(getApplicationContext()).
                    addToRequestQueue(jsonObjReq, "postRequest");
            Log.d(TAG, "postEdit = " + jsonObjReq);
            Log.d(TAG, "postEdit = " + postparams);
        }
    }


    private void postAdd() {
// Added on 11/11/2021
        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);
        if (isNetworkAvailable()) {
            RealmResults<MatchOfficials> results = realm.where(MatchOfficials.class).
                    equalTo("matchid", matchid).
                    equalTo("d4s_id", 0).
                    equalTo("sync", 0).findAll();

            Log.d("ADD_OFFICIALS", "Scoring, results 1 : " + results);
            if (results.isEmpty()) {

                Log.d("ADD_OFFICIALS", "Scoring, results : " + results);
            }

            else {

                JSONArray arrayOfficials = new JSONArray();

                Log.d("ADD_OFFICIALS", "Scoring, matchID : " + matchID);

                for (MatchOfficials officials : results) {

                    JSONObject jsonOfficials = new JSONObject();

                    try {
                        if (!officials.getOfficialName().matches("")) {
                            jsonOfficials.put("name", officials.getOfficialName());

                            if (officials.getStatus().matches("u1") || officials.getStatus().matches("u2"))
                                jsonOfficials.put("type", "u");
                            else
                                jsonOfficials.put("type", officials.getStatus());

//                                if (officials.getD4s_id() == 0)
//                                    jsonOfficials.put("d4s_playerid", 0);
//                                else
                            jsonOfficials.put("d4s_playerid", officials.getD4s_id());

                            arrayOfficials.put(jsonOfficials);
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                }

                JSONObject jsonObject = new JSONObject();
                try {
                    jsonObject.put("matchID", matchID);
                    jsonObject.put("officials", arrayOfficials);
                } catch (JSONException e) {
                    e.printStackTrace();
                }


                JSONObject jsonfeed = new JSONObject();

                try {
                    jsonfeed.put("AddMatchOfficials", jsonObject);
                } catch (JSONException e) {
                    e.printStackTrace();
                }


                JSONObject postparams = new JSONObject();
                try {
                    postparams.put("title", "CHASE_POST");
                    postparams.put("feed", jsonfeed);
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                        Constants.CHASE_CRICKET_MATCH_API, postparams,
                        new Response.Listener<JSONObject>() {
                            @Override
                            public void onResponse(JSONObject response) {

                                try {

                                    Log.d("ADD_OFFICIALS", "Scoring, response : " + response);
                                    if (!response.getBoolean("error") && response.getInt("status") == 200) {

                                        JSONObject jsonMatch = response.getJSONObject("match");
                                        Log.d("Create", "pod, jsonMatch = " + jsonMatch);

                                        JSONArray array = jsonMatch.getJSONArray("officials");
                                        Log.d("Create", "pod, array = " + array);

                                        if (array.length() > 0) {

                                            try {
                                                config = new RealmConfiguration.Builder()
                                                        .name(AppConstants.GAME_ID + ".realm")
                                                        .deleteRealmIfMigrationNeeded()
                                                        .build();
                                                realm = Realm.getInstance(config);
                                                realm.executeTransaction(new Realm.Transaction() {
                                                    @Override
                                                    public void execute(Realm bgRealm) {

                                                        try {

                                                            for (int i = 0; i < array.length(); i++) {
                                                                JSONObject object = array.getJSONObject(i);
                                                                Log.d("Create", "pod, object = " + object);

                                                                if (object.getString("officialtype").matches("u")) {

                                                                    Log.d("Create", "pod, officialtype = " + object.getString("officialtype"));
                                                                    Log.d("Create", "pod, officialname = " + object.getString("officialname"));
                                                                    Log.d("Create", "pod, officialid = " + object.getString("officialid"));

                                                                    MatchOfficials officials_u = bgRealm.where(MatchOfficials.class).
                                                                            equalTo("matchID", jsonMatch.getString("app_matchID")).
                                                                            equalTo("officialName", object.getString("officialname")).
                                                                            findFirst();

                                                                    Log.d("Create", "pod, officials_u = " + officials_u);

                                                                    if (officials_u != null) {

                                                                        officials_u.setD4s_id(object.getInt("officialid"));
                                                                        officials_u.setSync(1);
                                                                        bgRealm.copyToRealm(officials_u);
                                                                        Log.d("Create", "pod, officials_u = " + officials_u);
                                                                    }

                                                                } else {

                                                                    MatchOfficials officials = bgRealm.where(MatchOfficials.class).
                                                                            equalTo("matchID", jsonMatch.getString("app_matchID")).
                                                                            equalTo("status", object.getString("officialtype")).
                                                                            findFirst();

                                                                    if (officials != null) {

                                                                        officials.setD4s_id(object.getInt("officialid"));
                                                                        officials.setSync(1);
                                                                        bgRealm.copyToRealm(officials);
                                                                        Log.d("Create", "pod, officials = " + officials);
                                                                    }
                                                                }
                                                            }
                                                        } catch (JSONException e) {
                                                            e.printStackTrace();
                                                        }
                                                    }
                                                });
                                            } catch (RealmException e) {
                                                Log.d("test", "Exception : " + e);
                                            } finally {
                                                if (realm != null) {
                                                    realm.close();
                                                }
                                            }
                                        }
                                    } else {
                                        Toast.makeText(getApplicationContext(),
                                                response.getString("message"), Toast.LENGTH_SHORT).show();
                                    }

                                } catch (JSONException e) {
                                    e.printStackTrace();
                                }
                            }
                        },
                        new Response.ErrorListener() {
                            @Override
                            public void onErrorResponse(VolleyError error) {

//
//                                  Toast.makeText(getApplicationContext(), error.getMessage(), Toast.LENGTH_SHORT).show();
                                Log.d("ADD_OFFICIALS", "Scoring, Error Message is  : " + error);

                            }
                        });

                MyApplicationClass.getInstance(getApplicationContext()).
                        addToRequestQueue(jsonObjReq, "postRequest");
                Log.d("ADD_OFFICIALS", "Scoring, jsonObjReq  : " + jsonObjReq);
                Log.d("ADD_OFFICIALS", "Scoring, postparams  : " + postparams);

            }
        }
    }


    // Added on 08/10/2021
    // to update the team names
    public void updateTeam() {
//        changeTeamName();
//        setCommentry();
//        setInterval();
        Match match = realm.where(Match.class)
                .equalTo("matchid", matchid)
                .findFirst();

        if (match != null) {
            if (match.isPulled()) {
                Toast.makeText(getApplicationContext(),
                        "No edit is allowed for assigned matches", Toast.LENGTH_SHORT).show();
            } else {

                View intervalView = View.inflate(this, R.layout.edit_team_name, null);
                EditText edit_teamA = (EditText) intervalView.findViewById(R.id.et_teamA);
                EditText edit_teamB = (EditText) intervalView.findViewById(R.id.et_teamB);
                edit_teamA.setText(teamA);
                edit_teamB.setText(teamB);

                new AlertDialog.Builder(this)
                        .setTitle("Update team name")
                        .setIcon(R.drawable.ball)
                        .setCancelable(false)
                        .setView(intervalView)
                        .setPositiveButton("UPDATE", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                dialogInterface.dismiss();

                                if (edit_teamA.getText().toString().equals("") || edit_teamB.getText().toString().equals("")) {
                                    displayWarning("Invalid team name");
                                    updateTeam();

                                } else {

                                    teamAName = edit_teamA.getText().toString();
                                    teamBName = edit_teamB.getText().toString();
                                    Log.d("updatedTeam", "teamAName : " + teamAName);
                                    Log.d("updatedTeam", "teamBName : " + teamBName);

                                    if (teamAName.matches("") || teamBName.matches("")) {
                                        displayWarning("Invalid team name");
                                    } else {
                                        if (teamAName.matches(teamA) && teamBName.matches(teamB)) {
                                            Toast.makeText(getApplicationContext(),
                                                    "Team names did not updated", Toast.LENGTH_SHORT).show();
                                        } else {
                                            if (teamAName.matches(teamBName)) {
                                                displayWarning("Team names can not be same");
                                                Log.d("Scoring", "changeTeamName, TeamName = teamB");
                                            } else {
                                        /*if (teamAName.matches(teamA) && !(teamBName.matches(teamB)))
                                           newTeamName(teamB, teamBName);
                                        else if (!(teamAName.matches(teamA)) && (teamBName.matches(teamB)))
                                            newTeamName(teamA, teamAName);*/
                                                newTeamName(teamAName, teamBName);
                                                postTeam(teamAName, teamBName);
                                            }
                                        }
                                    }
                                }
                            }
                        })
                        .setNeutralButton("CANCEL", null)
                        .show();
            }
        }

    }


    // Added on 11/11/2021
    private void postOfficialDeletion(MatchOfficials officials) {
        final String TAG = "USAD";

        if (isNetworkAvailable()) {

            JSONObject jsonDetails = new JSONObject();
            try {
                if (!officials.getOfficialName().matches("")) {
                    jsonDetails.put("name", officials.getOfficialName());

                    if (officials.getStatus().matches("u1") || officials.getStatus().matches("u2"))
                        jsonDetails.put("type", "u");
                    else
                        jsonDetails.put("type", officials.getStatus());

                    jsonDetails.put("d4s_playerid", officials.getD4s_id());
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONArray array = new JSONArray();
            array.put(jsonDetails);

            JSONObject jsonEdit = new JSONObject();
            try {
                jsonEdit.put("matchID", matchID);
                jsonEdit.put("officials", array);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject jsonfeed = new JSONObject();
            try {
                jsonfeed.put("DeleteMatchOfficials", jsonEdit);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject postparams = new JSONObject();
            try {
                postparams.put("title", "CHASE_POST");
                postparams.put("feed", jsonfeed);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            Log.d(TAG, "postDelete, postparams = " + postparams);

            JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                    Constants.CHASE_CRICKET_MATCH_API, postparams,
                    new Response.Listener<JSONObject>() {
                        @Override
                        public void onResponse(JSONObject response) {

                            Log.d(TAG, "postDelete, response : " + response);

                            try {
                                if (!response.getBoolean("error") && response.getInt("status") == 200) {

                                    JSONObject jsonMatch = response.getJSONObject("match");
                                    Log.d(TAG, "postDelete, jsonMatch = " + jsonMatch);

//                                    try {

                                    Realm bgRealm = null;
                                    config = new RealmConfiguration.Builder()
                                            .name(AppConstants.GAME_ID + ".realm")
                                            .deleteRealmIfMigrationNeeded()
                                            .build();
                                    realm = Realm.getInstance(config);
//                                        realm.executeTransaction(new Realm.Transaction() {
//                                            @Override
//                                            public void execute(Realm bgRealm) {

                                    try {
                                        MatchOfficials official = bgRealm.where(MatchOfficials.class).
                                                equalTo("matchID", jsonMatch.getString("app_matchID")).
                                                equalTo("officialID", officials.getOfficialID()).
                                                findFirst();

                                        if (official != null){
                                            if (!bgRealm.isInTransaction()) {
                                                bgRealm.beginTransaction();
                                            }

                                            official.deleteFromRealm();
                                            bgRealm.commitTransaction();
                                        }

                                    } catch (JSONException e) {
                                        e.printStackTrace();
                                    }
//                                            }
//                                        });
//                                    } catch (RealmException e) {
//                                        Log.d(TAG, "Exception : " + e);
//                                    } finally {
//                                        if (realm != null) {
//                                            realm.close();
//                                        }
//                                    }
                                }
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
//                                  Toast.makeText(getApplicationContext(), error.getMessage(), Toast.LENGTH_SHORT).show();
                            Log.d(TAG, "postDelete, Error Message is  : " + error);
                        }
                    });

            MyApplicationClass.getInstance(getApplicationContext()).
                    addToRequestQueue(jsonObjReq, "postRequest");
            Log.d(TAG, "postDelete = " + jsonObjReq);
//            Log.d(TAG, "postDelete = " + postparams);
        }
    }



    private void delete(MatchOfficials o) {

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {

                    try {
//
                        MatchOfficials officials = bgRealm.where(MatchOfficials.class).
                                equalTo("matchid", matchid).
                                equalTo("officialID", o.getOfficialID()).findFirst();

                        if (officials != null) {
                            if (officials.getD4s_id() == 0) {
                                if (!bgRealm.isInTransaction()) {
                                    bgRealm.beginTransaction();
                                }
                                officials.deleteFromRealm();
                                bgRealm.commitTransaction();

                            }
                        }
                    } catch (RealmException e) {
                        Toast.makeText(getApplicationContext(),
                                " " + e, Toast.LENGTH_SHORT).show();
                    }
                }
            });

        } catch (RealmException e) {
            Log.d("TAG", "Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }
    }


    // Added on 12/11/2021
    private void postPlayers() {

        String capA = "", vcA = "", wkA = "", capB = "", vcB = "", wkB = "";

        if (isNetworkAvailable()) {
            // starting of adding Team A players
            JSONObject jsonPlayerA;

            // for adding players
            RealmResults<Player> results = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", 1).
                    equalTo("edit", false).
                    equalTo("substitute", false).findAll();
            Log.e("captain", "team1 players : "+results);
            JSONArray arrayPlayerA = new JSONArray();

            for (Player player : results) {

                jsonPlayerA = new JSONObject();

                try {
                    jsonPlayerA.put("name", player.getPlayerName());
                    jsonPlayerA.put("player_id", player.getPlayerID());
                    jsonPlayerA.put("d4s_playerid", player.getD4s_playerid());
                    if (player.isCaptain()) {
                        jsonPlayerA.put("captain", "y");
                        capA = player.getPlayerName();
                    }else
                        jsonPlayerA.put("captain", "n");
                    if (player.isViceCaptain()) {
                        jsonPlayerA.put("vice_captain", "y");
                        vcA = player.getPlayerName();
                    }else
                        jsonPlayerA.put("vice_captain", "n");
                    if (player.isWicketKeeper()) {
                        jsonPlayerA.put("wicketkeeper", "y");
                        wkA = player.getPlayerName();
                    } else
                        jsonPlayerA.put("wicketkeeper", "n");
                    arrayPlayerA.put(jsonPlayerA);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            //for adding substitute players

            results = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", 1).
                    equalTo("edit", false).
                    equalTo("substitute", true).findAll();
            Log.e("captain", "team1 substitutes : "+results);
            JSONArray arraySubA = new JSONArray();

            for (Player player : results) {

                jsonPlayerA = new JSONObject();

                try {
                    jsonPlayerA.put("name", player.getPlayerName());
                    jsonPlayerA.put("player_id", player.getPlayerID());
                    jsonPlayerA.put("d4s_playerid", player.getD4s_playerid());
                    if (player.isCaptain()) {
                        jsonPlayerA.put("captain", "y");
                        capA = player.getPlayerName();
                    } else
                        jsonPlayerA.put("captain", "n");
                    if (player.isViceCaptain()) {
                        jsonPlayerA.put("vice_captain", "y");
                        vcA = player.getPlayerName();
                    } else
                        jsonPlayerA.put("vice_captain", "n");
                    if (player.isWicketKeeper()) {
                        jsonPlayerA.put("wicketkeeper", "y");
                        wkA = player.getPlayerName();
                    } else
                        jsonPlayerA.put("wicketkeeper", "n");
                    arraySubA.put(jsonPlayerA);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            JSONObject jsonTeamA = new JSONObject();
            try {
                jsonTeamA.put("players", arrayPlayerA);
                jsonTeamA.put("substitutes", arraySubA);
                jsonTeamA.put("captain", capA);
                jsonTeamA.put("vice captain", vcA);
                jsonTeamA.put("wicketkeeper", wkA);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject jsonA = new JSONObject();
            try {
                jsonA.put("TeamA", jsonTeamA);
            } catch (JSONException e) {
                e.printStackTrace();
            }// end of adding Tam A players


            // starting of adding Team B players
            JSONObject jsonPlayerB;

            // for adding players

            results = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", 2).
                    equalTo("edit", false).
                    equalTo("substitute", false).findAll();
            Log.e("captain", "team2 players : "+results);
            JSONArray arrayPlayerB = new JSONArray();

            for (Player player : results) {

                jsonPlayerB = new JSONObject();

                try {
                    jsonPlayerB.put("name", player.getPlayerName());
                    jsonPlayerB.put("player_id", player.getPlayerID());
                    jsonPlayerB.put("d4s_playerid", player.getD4s_playerid());
                    if (player.isCaptain()) {
                        jsonPlayerB.put("captain", "y");
                        capB = player.getPlayerName();
                    } else
                        jsonPlayerB.put("captain", "n");
                    if (player.isViceCaptain()) {
                        jsonPlayerB.put("vice_captain", "y");
                        vcB = player.getPlayerName();
                    } else
                        jsonPlayerB.put("vice_captain", "n");
                    if (player.isWicketKeeper()) {
                        jsonPlayerB.put("wicketkeeper", "y");
                        wkB = player.getPlayerName();
                    } else
                        jsonPlayerB.put("wicketkeeper", "n");
                    arrayPlayerB.put(jsonPlayerB);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            //for adding substitute players

            results = realm.where(Player.class).
                    equalTo("matchid", matchid).
                    equalTo("team", 2).
                    equalTo("edit", false).
                    equalTo("substitute", true).findAll();
            Log.e("captain", "team2 substitutes : "+results);
            JSONArray arraySubB = new JSONArray();

            for (Player player : results) {

                jsonPlayerB = new JSONObject();

                try {
                    jsonPlayerB.put("name", player.getPlayerName());
                    jsonPlayerB.put("player_id", player.getPlayerID());
                    jsonPlayerB.put("d4s_playerid", player.getD4s_playerid());
                    if (player.isCaptain()) {
                        jsonPlayerB.put("captain", "y");
                        capA = player.getPlayerName();

                    } else
                        jsonPlayerB.put("captain", "n");
                    if (player.isViceCaptain()) {
                        jsonPlayerB.put("vice_captain", "y");
                        vcB = player.getPlayerName();
                    } else
                        jsonPlayerB.put("vice_captain", "n");
                    if (player.isWicketKeeper()) {
                        jsonPlayerB.put("wicketkeeper", "y");
                        wkB = player.getPlayerName();
                    } else
                        jsonPlayerB.put("wicketkeeper", "n");
                    arraySubB.put(jsonPlayerB);

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            JSONObject jsonTeamB = new JSONObject();
            try {
//                if (!squad) {
                jsonTeamB.put("players", arrayPlayerB);
                jsonTeamB.put("substitutes", arraySubB);
//                }
                jsonTeamB.put("captain", capB);
                jsonTeamB.put("vice captain", vcB);
                jsonTeamB.put("wicketkeeper", wkB);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject jsonB = new JSONObject();
            try {
                jsonB.put("TeamB", jsonTeamB);
            } catch (JSONException e) {
                e.printStackTrace();
            }//end of adding Team B players


            JSONObject jsonmid = new JSONObject();
            try {
                jsonmid.put("matchID", matchID);
            } catch (JSONException e) {
                e.printStackTrace();
            }


            //adding players to Players array
            JSONArray arrayPlayers = new JSONArray();
            arrayPlayers.put(jsonmid);
            arrayPlayers.put(jsonA);
            arrayPlayers.put(jsonB);

            // adding values into feed
            JSONObject jsonFeed = new JSONObject();
            try {
                jsonFeed.put("AddPlayers", arrayPlayers);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            //adding values to postparams
            JSONObject postparams = new JSONObject();
            try {
                postparams.put("title", "CHASE_POST");
                postparams.put("feed", jsonFeed);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            Log.e("captain", "postparams : "+postparams);

            JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                    Constants.CHASE_CRICKET_MATCH_API, postparams,
                    new Response.Listener<JSONObject>() {
                        @Override
                        public void onResponse(JSONObject response) {

                            try {

                                Log.e("captain", "response : " + response);
                                //if no error in response
                                if (!response.getBoolean("error") && response.getInt("status") == 200) {

                                    JSONObject jsonMatch = response.getJSONObject("match");

                                    Realm realm = null;
                                    try {
                                        config = new RealmConfiguration.Builder()
                                                .name(AppConstants.GAME_ID + ".realm")
                                                .deleteRealmIfMigrationNeeded()
                                                .build();
                                        realm = Realm.getInstance(config);
                                        realm.executeTransaction(new Realm.Transaction() {
                                            @Override
                                            public void execute(Realm bgRealm) {

                                                try {

                                                    Match match1 = bgRealm.where(Match.class).
                                                            equalTo("matchID",
                                                                    jsonMatch.getString("app_matchID")).
                                                            findFirst();

                                                    if (match1 != null) {

                                                        match1.setPlayer_post(true);
                                                        match1.setStatus("CVW");
                                                        match1.setStatusId(3);
                                                        match1.setPlayerSync(1);;

                                                        bgRealm.copyToRealm(match1);


                                                        // for players
                                                        // code updated on 12/11/2021
                                                        JSONArray array = jsonMatch.getJSONArray("playerinfo");
                                                        if (array.length() > 0) {
                                                            for (int i = 0; i < array.length(); i++) {
                                                                JSONObject object = array.getJSONObject(i);
                                                                Player player = bgRealm.where(Player.class).
                                                                        equalTo("matchID", jsonMatch.getString("app_matchID")).
                                                                        equalTo("playerID", object.getInt("playerid")).
                                                                        findFirst();

                                                                if (player != null) {
                                                                    player.setSync(1);
                                                                    player.setD4s_playerid(object.getInt("d4splayerid"));
                                                                    bgRealm.copyFromRealm(player);
                                                                }
                                                            }
                                                        }
                                                    }

                                                } catch (JSONException e) {
                                                    e.printStackTrace();
                                                } catch (RealmPrimaryKeyConstraintException e) {
                                                    Toast.makeText(getApplicationContext(),
                                                            "Primary Key exists, Press Update instead",
                                                            Toast.LENGTH_SHORT).show();
                                                }
                                            }
                                        });
                                    } catch (RealmException e) {
                                        Log.d("test", "Exception : " + e);
                                    } finally {
                                        if (realm != null) {
                                            realm.close();
                                        }
                                    }
                                } else {
                                    Log.d("TOSS", "data saved wrongly");
                                }
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
//                            progress.dismiss();
                            Log.e("captain", "Error Message is  : " + error.getMessage());
                        }
                    });
            MyApplicationClass.getInstance(getApplicationContext()).addToRequestQueue(jsonObjReq, "postRequest");
            Log.d("captain", "jsonObjReq  : " + jsonObjReq);
            Log.d("captain", "postparams  : " + postparams);
        }

    }


    private void postToss(Match match) {

        if (match != null) {

            if (isNetworkAvailable()) {

                // added on 19/10/2020
                JSONObject jsonToss = new JSONObject();
                try {
                    jsonToss.put("matchID", matchID);
                    if (match.isNoToss() || match.isUnknownToss()) {
                        jsonToss.put("winner", -1);
                        jsonToss.put("decision", decision);
                        jsonToss.put("battingteam", tossWinner);
                    } else {
                        jsonToss.put("winner", tossWinner);
                        jsonToss.put("decision", decision);
                        jsonToss.put("battingteam", 0);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }


                JSONArray arrayToss = new JSONArray();
                arrayToss.put(jsonToss);

                JSONObject jsonFeed = new JSONObject();
                try {

                    jsonFeed.put("AddToss", arrayToss);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                Log.e("toss", "jsonFeed : " + jsonFeed);

                //adding values to postparams
                JSONObject postparams = new JSONObject();
                try {
                    postparams.put("title", "CHASE_POST");
                    postparams.put("feed", jsonFeed);
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                Log.e("captain", "postparams : " + postparams);

                JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                        Constants.CHASE_CRICKET_MATCH_API, postparams,
                        new Response.Listener<JSONObject>() {
                            @Override
                            public void onResponse(JSONObject response) {


                                Log.e("captain", "response : " + response);

                                try {

                                    Log.e("captain", "response : " + response);
                                    //if no error in response
                                    if (!response.getBoolean("error") && response.getInt("status") == 200) {

                                        JSONObject jsonMatch = response.getJSONObject("match");

                                        Realm realm = null;
                                        try {
                                            config = new RealmConfiguration.Builder()
                                                    .name(AppConstants.GAME_ID + ".realm")
                                                    .deleteRealmIfMigrationNeeded()
                                                    .build();
                                            realm = Realm.getInstance(config);
                                            realm.executeTransaction(new Realm.Transaction() {
                                                @Override
                                                public void execute(Realm bgRealm) {

                                                    try {

                                                        Match match1 = bgRealm.where(Match.class).
                                                                equalTo("matchID",
                                                                        jsonMatch.getString("app_matchID")).
                                                                findFirst();

                                                        if (match1 != null) {

                                                            match1.setStatus("TC");
                                                            match1.setStatusId(4);
                                                            match1.setTossSync(1);

                                                            bgRealm.copyToRealm(match1);

                                                            Log.d("matchSync", "toss, match1 : " + match1);
                                                        }

                                                    } catch (JSONException e) {
                                                        e.printStackTrace();
                                                    } catch (RealmPrimaryKeyConstraintException e) {
//                                                    progress.dismiss();
                                                        Toast.makeText(getApplicationContext(),
                                                                "Primary Key exists, Press Update instead",
                                                                Toast.LENGTH_SHORT).show();
                                                    }
                                                }
                                            });
                                        } catch (RealmException e) {
                                            Log.d("test", "Exception : " + e);
                                        } finally {
                                            if (realm != null) {
                                                realm.close();
                                            }
                                        }

                                    } else {
                                        Log.d("USA", "postToss, wrong data");
//                                    progress.dismiss();
//                                    Toast.makeText(getApplicationContext(),
//                                            response.getString("message"), Toast.LENGTH_SHORT).show();
                                    }
                                } catch (JSONException e) {
                                    e.printStackTrace();
                                }
                            }
                        },
                        new Response.ErrorListener() {
                            @Override
                            public void onErrorResponse(VolleyError error) {
                                Log.e("captain", "Error Message is  : " + error.getMessage());
                            }
                        });

                MyApplicationClass.getInstance(getApplicationContext()).addToRequestQueue(jsonObjReq, "postRequest");
                Log.d("toss", "jsonObjReq  : " + jsonObjReq);
                Log.d("toss", "postparams  : " + postparams);
            }
        }
    }


    // Added on 15/11/2021
    void removeBowler() {
        RealmResults<Bowler> result_bowler = realm.where(Bowler.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).
                beginGroup().
                equalTo("over", 0).
                and().
                equalTo("balls", 0).
                and().
                equalTo("wides", 0).
                and().
                equalTo("noBalls", 0).
                endGroup().
                findAll();

        if (result_bowler.size() > 0) {
            Log.d("removeBowler", "result_bowler = " + result_bowler.toString());
            for (Bowler bowler : result_bowler) {
                Player player = realm.where(Player.class).
                        equalTo("matchid", matchid).
                        equalTo("team", fieldingTeamNo).
                        equalTo("playerID", bowler.getPlayerID()).
                        findFirst();

                Log.d("removeBowler", "player = " + player.toString());

                deleteBowler(bowler.getPlayerID());

            }
        }
    }


    private void deleteBowler(int pID) {

        Realm realm = null;
        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);

        Bowler bowler = realm.where(Bowler.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).
                equalTo("playerID", pID).
                findFirst();

        if (bowler != null) {
            if (!realm.isInTransaction()) {
                realm.beginTransaction();
            }
            bowler.deleteFromRealm();
            realm.commitTransaction();
        }
    }


    void removeBatsman(Events lastEvent) {
        int newBatsmanID = lastEvent.getDisNewBatsmanID();

        Log.d("undo", "ubtype : 7,  newBatsmanID : "+newBatsmanID);
        Log.d("undo", "ubtype : 7,  getDismissedPlayerID : "+lastEvent.getDismissedPlayerID());

        Batsman batsmann = realm.where(Batsman.class).
                equalTo("matchid", matchid).
                equalTo("team", battingTeamNo).
                equalTo("innings", currentInnings).
                equalTo("batsman_pID", newBatsmanID).findFirst();

        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm bgRealm) {

                try {

                    if (batsmann != null) {

                        batsmann.setToBeBatted(true);
                        batsmann.setPlaying(false);
                        batsmann.setRetired(false);
                        batsmann.setRuns(0);
                        batsmann.setBalls(0);
                        batsmann.setS6s(0);
                        batsmann.setF4s(0);
                        batsmann.setOut(false);
                        batsmann.setBattingOrder(100);

                        bgRealm.copyToRealm(batsmann);
                    }
                    Log.d("batsmann", "after undo , ubtype = " + ubtype +

                            ", batsmann : " + batsmann.toString());


                } catch (RealmPrimaryKeyConstraintException e) {
                    Toast.makeText(getApplicationContext(),
                            "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                }
            }
        });
    }
    /*{
        RealmResults<Batsman> batsmen = realm.where(Batsman.class).
                equalTo("matchid", matchid).
                equalTo("innings", currentInnings).
                beginGroup().
                    equalTo("playing", true).
                    and().
                    equalTo("balls", 0).
                    and().
                    notEqualTo("battingOrder", 1).
                    and().
                    notEqualTo("battingOrder", 2).
                endGroup().
                findAll();

        if (batsmen.size() > 0) {
            Log.d("removeBowler", "batsmen = " + batsmen.toString());
            for (Batsman batsman : batsmen) {
                Player player = realm.where(Player.class).
                        equalTo("matchid", matchid).
                        equalTo("team", battingTeamNo).
                        equalTo("playerID", batsman.getBatsman_pID()).
                        findFirst();

                Log.d("removeBowler", "player = " + player.toString());

                reset(batsman.getBatsman_pID());
            }
        }
    }*/


    void reset(int pID) {

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {

                    try {
//
                        Batsman batsman = bgRealm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("batsman_pID", pID).
                                findFirst();

                        if (batsman != null) {
                            batsman.setBattingOrder(100);
                            batsman.setPlaying(false);
                            batsman.setToBeBatted(true);
                            bgRealm.copyToRealm(batsman);
                            Log.d("reset", "batsman = " + batsman);
                        }
                    } catch (RealmException e) {
                        Toast.makeText(getApplicationContext(),
                                " " + e, Toast.LENGTH_SHORT).show();
                    }
                }
            });

        } catch (RealmException e) {
            Log.d("reset", "Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }
    }


    // Added on 16/11/2021
    void setUndoNewBatsman(int oldBats, String bats, boolean bow, int eID) {

        int batsID = realm.where(Player.class).
                equalTo("matchid", matchid).
                equalTo("team", battingTeamNo).
                equalTo("playerName", bats).findFirst().getPlayerID();

        Batsman batsmann = realm.where(Batsman.class).
                equalTo("matchid", matchid).
                equalTo("team", battingTeamNo).
                equalTo("innings", currentInnings).
                equalTo("batsman_pID", batsID).findFirst();



        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgRealm) {

                    try {

                        Number num1 = bgRealm.where(Batsman.class).
                                equalTo("matchid", matchid).
                                equalTo("innings", currentInnings).
                                equalTo("team", battingTeamNo).
                                notEqualTo("battingOrder", 100).
                                max("battingOrder");
                        int order = (num1 == null) ? 1 : num1.intValue() + 1;
                        disNewBatsmanBattingOrder = order;

                        Log.d("order", "scoring, order : " + order);
                        Log.d("order", "scoring, num1 : " + num1);


                        if (SUPER_OVER) {

                            newFlag = true;

                            Batsman batsmann = bgRealm.where(Batsman.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", currentInnings).
                                    equalTo("team", battingTeamNo).
                                    equalTo("batsman_pID", batsID).findFirst();
                            Log.d("Scoring","synchBatsmann, batsmann :"+batsmann);

                            if (batsmann == null){

                                Number num = bgRealm.where(Batsman.class).max("batsmanID");
                                int batId = (num == null) ? 1 : num.intValue() + 1;

                                batsmann = bgRealm.createObject(Batsman.class, batId);
                                batsmann.setBatsman_pID(batsID);
                                batsmann.setMatchid(matchid);
                                batsmann.setMatchID(matchID);
                                batsmann.setTeam(battingTeamNo);
                                batsmann.setInnings(currentInnings);
                                batsmann.setPlaying(true);
                                batsmann.setSUPER_OVER(SUPER_OVER);
                                batsmann.setBattingOrder(order);

                                bgRealm.copyToRealmOrUpdate(batsmann);


                            }
                        }

                        else {
                            /*Number num1 = bgRealm.where(Batsman.class).
                                    equalTo("matchid", matchid).
                                    equalTo("innings", currentInnings).
                                    equalTo("team", battingTeamNo).
                                    notEqualTo("battingOrder", 100).
                                    max("battingOrder");
                            int order = (num1 == null) ? 1 : num1.intValue() + 1;*/

//                         ++battingOrder;

                            if (batsmann != null) {

                                if (retiredList.size() > 0) {
                                    if (!batsmann.isRetired())
                                        batsmann.setBattingOrder(order);
                                } else
                                    batsmann.setBattingOrder(order);

                                bgRealm.copyToRealm(batsmann);
                            }

                        }


                    } catch (RealmPrimaryKeyConstraintException e) {
                        Toast.makeText(getApplicationContext(),
                                "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        } catch (RealmException e) {
            Log.d("setNewBatsman", "Exception : " + e);
        } finally {
            if (realm != null) {
                realm.close();
            }
        }



        // sync Partnership table

        ballType = 7;
        bCount = 0; // Added on 22/09/2021

        psRuns = 0;
        psBalls = 0;
        psTBalls = 0;   // added on 28/07/2021
        psOver = 0;

        Log.d("setUndoNewBatsman", "ps1ID : " + ps1ID + ", ps2ID : " + ps2ID + ", oldBats : " + oldBats);


        if (ps1ID == oldBats) {
            ps1ID = batsID;
            p1CB = 0;
            p1CR = 0;
            p2CB = 0;
            p2CR = 0;
            /*if (newFlag) {        // don't need it, because anyway new partnerShip will create

            }*/
        }

        else if (ps2ID == oldBats) {
            ps2ID = batsID;
            p1CB = 0;
            p1CR = 0;
            p2CB = 0;
            p2CR = 0;
        }


        if (player1ID == oldBats) {

            player1ID = batsID;
            player1 = bats;
            if (newFlag) {      // selected player is new

                player1Balls = 0;
                player1Runs = 0;
                player1Dots = 0;
                player1F4s = 0;
                player1S6s = 0;

            }

            else {      // selected player was retired

                player1Balls = batsmann.getBalls();
                player1Runs = batsmann.getRuns();
                player1Dots = batsmann.getDots();
                player1F4s = batsmann.getF4s();
                player1S6s = batsmann.getS6s();
            }
            tvPlayer1.setText(bats);
            tvPlayer1Runs.setText(String.valueOf(player1Runs));
            tvPlayer1Balls.setText(String.valueOf(player1Balls));

        }

        else if (player2ID == oldBats) {

            player2ID = batsID;
            player2 = bats;

            if (newFlag) {
                player2Balls = 0;
                player2Runs = 0;
                player2Dots = 0;
                player2F4s = 0;
                player2S6s = 0;
            }
            else {
                player2Balls = batsmann.getBalls();
                player2Runs = batsmann.getRuns();
                player2Dots = batsmann.getDots();
                player2F4s = batsmann.getF4s();
                player2S6s = batsmann.getS6s();
            }
            tvPlayer2.setText(bats);
            tvPlayer2Runs.setText(String.valueOf(player2Runs));
            tvPlayer2Balls.setText(String.valueOf(player2Balls));
        }

        if (strID == oldBats) {

            strID = batsID;
            striker = bats;

            if (newFlag) {
                strikerRuns = 0;
                strikerBalls = 0;
                strikerDots = 0;
                strikerF4s = 0;
                strikerS6s = 0;
            }
            else {
                strikerRuns = batsmann.getRuns();
                strikerBalls = batsmann.getBalls();
                strikerDots = batsmann.getDots();
                strikerF4s = batsmann.getF4s();
                strikerS6s = batsmann.getS6s();
            }
        }

        else if (nstrID == oldBats) {

            nstrID = batsID;
            nonStriker = bats;

            if (newFlag) {
                nonStrikerRuns = 0;
                nonStrikerBalls = 0;
                nonStrikerDots = 0;
                nonStrikerF4s = 0;
                nonStrikerS6s = 0;
            }
            else {
                nonStrikerRuns = batsmann.getRuns();
                nonStrikerBalls = batsmann.getBalls();
                nonStrikerDots = batsmann.getDots();
                nonStrikerF4s = batsmann.getF4s();
                nonStrikerS6s = batsmann.getS6s();
            }
        }


        // save the new Batsman event

        Log.d("so_inninngs1Runs","setNewBatsman18 , : "+so_inninngs1Runs);
        Log.d("Partnership","setNewBatsman 18 , : "+newPartnership);


       /* if (newPartnership) {
//            newPartnership = false;
            syncPartnership(wicket, false, -1, true);
        }
        else {*/
//        syncPartnership(wicket + 1, outType, 0, newPartnership, false);
        updatePartnership(wicket + 1);  // Added on 16/11/2021
        /*}*/


        Log.d("Partnership","setNewBatsman 19 , : "+newPartnership);

        updateEvents(eID, batsID, 0);

        Log.d("Partnership","setNewBatsman 20 , : "+newPartnership);


        syncBatsmann(batsID, 0, null, false,
                -1, false, false, false);

        Log.d("Partnership","setNewBatsman 1, wicket : " + wicket);
        Log.d("Partnership","setNewBatsman 1, psRuns : " + psRuns);
        Log.d("Partnership","setNewBatsman 1, psBalls : " + psBalls);
        Log.d("Partnership","setNewBatsman 1, player1ID : " + player1ID);
        Log.d("Partnership","setNewBatsman 1, ps1ID : " + ps1ID);
        Log.d("Partnership","setNewBatsman 1, p1CR : " + p1CR);
        Log.d("Partnership","setNewBatsman 1, p1CB : " + p1CB);
        Log.d("Partnership","setNewBatsman 1, player2ID: "+player2ID);
        Log.d("Partnership","setNewBatsman 1, ps2ID : " + ps2ID);
        Log.d("Partnership","setNewBatsman 1, p2CR : " + p2CR);
        Log.d("Partnership","setNewBatsman 1, p2CB : " + p2CB);
        Log.d("Partnership","setNewBatsman 21 , : "+newPartnership);
        Log.d("Partnership","setNewBatsman 21, bow : " + bow);
        Log.d("Partnership","setNewBatsman 21, bowlerID : " + bowlerID);
        Log.d("Partnership","setNewBatsman 21, preBowlerID : " + preBowlerID);
        Log.d("Partnership","setNewBatsman 21, lastBowler : " + lastBowler);

        if (bow)
            selectBowlerAlertDialog();
    }


    void updatePartnership(int wicket) {

        config = new RealmConfiguration.Builder()
                .name(AppConstants.GAME_ID + ".realm")
                .deleteRealmIfMigrationNeeded()
                .build();
        realm = Realm.getInstance(config);

        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {

                Partnership partnership = realm.where(Partnership.class).
                        equalTo("matchid", matchid).
                        equalTo("innings", currentInnings).
                        equalTo("wicket", wicket).findAll().last();

                if (partnership != null) {


                    partnership.setPlayer1ID(ps1ID);
                    partnership.setPlayer2ID(ps2ID);

//                    partnership.setPartnershipRuns(psRuns);
//                    partnership.setPartnershipBalls(psBalls);
//                    partnership.setPartnershipTotalBalls(psTBalls);
//                    partnership.setPartnershipOver(psOver);
//                    partnership.setDismissedPlayerID(dismissedPlayerID);

                    if (ps1ID == player1ID && ps2ID == player2ID) {

                        partnership.setPlayer1Runs(player1Runs);
                        partnership.setPlayer1Balls(player1Balls);
                        partnership.setPlayer1ContributionBalls(p1CB);
                        partnership.setPlayer1ContributionRuns(p1CR);

                        partnership.setPlayer2Runs(player2Runs);
                        partnership.setPlayer2Balls(player2Balls);
                        partnership.setPlayer2ContributionBalls(p2CB);
                        partnership.setPlayer2ContributionRuns(p2CR);

                    } else if (ps1ID == player2ID && ps2ID == player1ID) {

                        partnership.setPlayer1Runs(player2Runs);
                        partnership.setPlayer1Balls(player2Balls);
                        partnership.setPlayer1ContributionBalls(p2CB);
                        partnership.setPlayer1ContributionRuns(p2CR);

                        partnership.setPlayer2Runs(player1Runs);
                        partnership.setPlayer2Balls(player1Balls);
                        partnership.setPlayer2ContributionBalls(p1CB);
                        partnership.setPlayer2ContributionRuns(p1CR);

                    }

                    realm.copyToRealmOrUpdate(partnership);
                    Log.d("partnership", "syncPartnership : " + partnership);
                }
            }
        });
    }


    // Added on 24/11/2021
    // to test undo
    // to dipsly events ids in descending order

    void displayEventID() {

        tvCommentry.setText("");

        StringBuilder str = new StringBuilder();

        RealmResults<Events> results = realm.where(Events.class)
                .equalTo("matchid", matchid)
                .equalTo("innings", currentInnings)
                .sort("eventID", Sort.DESCENDING)
                .findAll();

        for (Events e : results) {
            Log.d("DEID", "e.getEventID() = " + e.getEventID());
            Log.d("DEID", "e.getBallType() = " + e.getBallType());
            if ((e.getBallType() != 15) && (e.getBallType() != 13)) {
                str.append(e.getEventID() + "(str = " + e.getStrikerD4SID());
                if (e.getStrikerID() == e.getDismissedPlayerID())
                    str.append("-out");
                else
                    str.append("-not");

                str.append("), nstr = " + e.getNonStrikerD4SID());
                if (e.getNonStrikerD4SID() == e.getDismissedPlayerID())
                    str.append("-out");
                else
                    str.append("-not");

                str.append("), --- " + e.getBallType() + "\n");
            }
        }
        Log.d("DEID", "str = " + str);
        Log.d("DEID", "str.toString() = " + str.toString());
//        tvCommentry.setText(str);
    }


    // Added on 26/11/2021
    private void resetPowerPlay(int ubtype, Events lastevent) {
        // use power id and power sequence of Events table

        // Added on 15/12/2021
        if (ubtype == 21) { // undoing added power play
            Power power = realm.where(Power.class)
                    .equalTo("matchid", matchid)
                    .equalTo("innings", currentInnings)
                    .equalTo("id", lastevent.getPower_id())
                    .findFirst();
            if (power != null) {
                if (!realm.isInTransaction()) {
                    realm.beginTransaction();
                }

                power.deleteFromRealm();
                realm.commitTransaction();
            }
        }

        else
        if (ubtype == 22) { // undoing updated powerplay
            Events preEvent = realm.where(Events.class)
                    .equalTo("matchid", matchid)
                    .equalTo("innings", currentInnings)
//                        .beginGroup()
                    .lessThan("eventID", lastevent.getEventID())
                    .equalTo("power_sequence", lastevent.getPower_sequence())
//                        .endGroup()
                    .findAll()
                    .last();
            if (preEvent != null) {
                int start = preEvent.getPower_start_over();
                int end = preEvent.getPower_end_over();

                Realm realm = null;
                try {
                    config = new RealmConfiguration.Builder()
                            .name(AppConstants.GAME_ID + ".realm")
                            .deleteRealmIfMigrationNeeded()
                            .build();
                    realm = Realm.getInstance(config);
                    realm.executeTransaction(new Realm.Transaction() {
                        @Override
                        public void execute(Realm bgRealm) {
//                                try {

                            Power power = bgRealm.where(Power.class)
                                    .equalTo("matchid", matchid)
                                    .equalTo("innings", currentInnings)
                                    .equalTo("id", lastevent.getPower_id())
//                                        .equalTo("count", lastevent.getPower_sequence())
                                    .findFirst();

                            Log.d("resetPowerPlay", "updated power = " + power);

                            if (power != null) {
                                power.setStart(start);
                                power.setEnd(end);

                                bgRealm.copyToRealmOrUpdate(power);
                                Log.d("resetPowerPlay", "undo updated power = " + power);
                            }




//                                } catch (RealmPrimaryKeyConstraintException e) {
//                                    Toast.makeText(getApplicationContext(),
//                                            "Primary Key exists, Press Update instead", Toast.LENGTH_SHORT).show();
//                                }
                        }
                    });
                } catch (RealmException e) {
                    Log.d("setNewBatsman", "Exception : " + e);
                } finally {
                    if (realm != null) {
                        realm.close();
                    }
                }

            }
        }
        else
        if (ubtype == 23) { // undoing deleted power play

            if (lastevent != null) {
                int start = lastevent.getPower_start_over();
                int end = lastevent.getPower_end_over();
                int id = lastevent.getPower_id();
                int sequence = lastevent.getPower_sequence();

                Realm realm = null;
                try {
                    config = new RealmConfiguration.Builder()
                            .name(AppConstants.GAME_ID + ".realm")
                            .deleteRealmIfMigrationNeeded()
                            .build();
                    realm = Realm.getInstance(config);
                    realm.executeTransaction(new Realm.Transaction() {
                        @Override
                        public void execute(Realm bgRealm) {
//                                try {

                            Power power = bgRealm.createObject(Power.class, id);

                            power.setMatchid(matchid);
                            power.setMatchID(matchID);
                            power.setInnings(currentInnings);
                            power.setStart(start);
                            power.setEnd(end);
                            power.setCount(sequence);  // sequence

                            bgRealm.copyToRealm(power);
                            Log.d("resetPowerPlay", "undo deleted power = " + power);

                        }
                    });
                } catch (RealmException e) {
                    Log.d("setNewBatsman", "Exception : " + e);
                } finally {
                    if (realm != null) {
                        realm.close();
                    }
                }
            }
        }
        // === till here
    }



    // Added on 15/12/2021
    public  void getCommentaryType() {

        View view = View.inflate(this, R.layout.commentary, null);
        Button b1 = (Button) view.findViewById(R.id.c_bbb);
        Button b2 = (Button) view.findViewById(R.id.c_other);
        b1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                setCommentry(1);
            }
        });
        b2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                setCommentry(2);
            }
        });

        new AlertDialog.Builder(this).
                setIcon(R.drawable.ball).
                setTitle("Select Commentary Type").
                setView(view).
                setCancelable(true).
                setNeutralButton("Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                }).
                show();
    }


    private void setFeiOther() {

        final EditText input = new EditText(this);
        input.setInputType(InputType.TYPE_CLASS_TEXT);
        new AlertDialog.Builder(UpdatedScoringActivity.this)
                .setIcon(R.drawable.ball)
                .setCancelable(false)
                .setTitle("Condition for Force ending is")
                .setView(input)
                .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        if ((input.getText().toString().equals(null)) || (input.getText().toString().matches(""))) {
                            Toast.makeText(getApplicationContext(),
                                    "Please enter the reason", Toast.LENGTH_SHORT).show();
                        } else {
                            fei_com = input.getText().toString();
                            Log.d("fei_com", "fei_com : " + fei_com);

                            if (currentInnings == totalInnings) {
                                if (currentRuns == preInningsRuns) {
                                    check_SUPEROVER();
                                } else {
                                    callEndOfMatch(2, 0);
                                }
                            } else {
                                setEndInnings(false, ballType);
                                displayScoreCard(false, false);
                            }
                        }
                    }
                })

                .setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                        rain_rule = false;
                        fei_others = false;
                        remaining_absent = false;
                        ballType = -1;
                        bCount = 0;
                        endOfInnings = false;
                        forceEndingType = 0;
                    }
                })
                .show();
    }


    private void postCommentary(int flag, String commentary) {

        RealmResults<Commentary> results = realm.where(Commentary.class)
                .equalTo("matchid", matchid)
                .equalTo("innings", currentInnings)
                .equalTo("sync", 0)
                .findAll();
        if (results.size() > 0) {
            JSONArray array = new JSONArray();
            for (Commentary com : results) {
                Events events = realm.where(Events.class)
                        .equalTo("matchid", matchid)
                        .equalTo("innings", currentInnings)
                        .equalTo("eventID", com.getEventID())
                        .findAll().last();

                if (events.getSyncstatus() == 1) {
                    if (isNetworkAvailable()) {
                        JSONObject object = new JSONObject();
                        try {
                            object.put("eventid", com.getEventID());
                            object.put("matchID", com.getMatchID());
                            object.put("commentary", com.getCommentary());
                            if (com.getFlag() == 1)
                                object.put("type", "ballbyball");
                            else if (com.getFlag() == 2)
                                object.put("type", "other");
                            array.put(object);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }


            JSONObject jsonFeed = new JSONObject();
            try {
                jsonFeed.put("AddCom", array);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JSONObject postparams = new JSONObject();
            try {
                postparams.put("title", "CHASE_POST");
                postparams.put("feed", jsonFeed);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
                    Constants.CHASE_CRICKET_MATCH_API,
                    postparams,
                    new Response.Listener<JSONObject>() {
                        @Override
                        public void onResponse(JSONObject response) {

                            Log.d("postCommentary", "response = " + response);
                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
//                           serverSync();   Commented on 13/11/2021
                            Log.e("volley", "Scoring, onErrorResponse  : " + error);
                        }
                    });

            MyApplicationClass.getInstance(getApplicationContext()).addToRequestQueue(jsonObjReq, "postRequest");
            Log.d("scoring", "jsonObjReq  : " + jsonObjReq);
            Log.d("scoring", "postparams  : " + postparams);
        }
    }


    // Added on 16/12/2021
    private void savetoDB(int flag, String commentary) {

        Realm realm = null;
        try {
            config = new RealmConfiguration.Builder()
                    .name(AppConstants.GAME_ID + ".realm")
                    .deleteRealmIfMigrationNeeded()
                    .build();
            realm = Realm.getInstance(config);
            realm.executeTransaction(new Realm.Transaction() {
                @Override
                public void execute(Realm bgrealm) {

                    try {

                        Events events = bgrealm.where(Events.class)
                                .equalTo("matchid", matchid)
                                .equalTo("innings", currentInnings)
                                .findAll().last();

                        Number num = bgrealm.where(Commentary.class).max("id");
                        int nextId = (num == null) ? 1 : num.intValue() + 1;

                        Commentary com = bgrealm.createObject(Commentary.class, nextId);
                        com.setMatchid(matchid);
                        com.setMatchID(matchID);
                        com.setEventID(events.getEventID());
                        com.setInnings(currentInnings);
                        com.setFlag(flag);
                        com.setCommentary(commentary);
                        bgrealm.copyToRealm(com);
                    }
                    catch (RealmPrimaryKeyConstraintException e) {
                        Log.d("MatchNote", " Exception : "+e);
                    }
                }
            });
        }

        catch (RealmException e) {
            Log.d("test", "Exception : " + e);
        }

        finally {
            if (realm != null) {
                realm.close();
            }
        }
    }
}